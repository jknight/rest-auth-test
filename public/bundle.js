(() => {
  let __defineProperty = Object.defineProperty;
  let __hasOwnProperty = Object.prototype.hasOwnProperty;
  let __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  let __markAsModule = (target) => {
    return __defineProperty(target, "__esModule", {value: true});
  };
  let __exportStar = (target, module) => {
    __markAsModule(target);
    for (let key in module)
      if (__hasOwnProperty.call(module, key) && !__hasOwnProperty.call(target, key) && key !== "default")
        __defineProperty(target, key, {get: () => module[key], enumerable: true});
    return target;
  };
  let __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__defineProperty({}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports, module) => {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var checkPropTypes = require_checkPropTypes();
        var ReactVersion = "16.13.1";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          suspense: null
        };
        var ReactCurrentOwner = {
          current: null
        };
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name2, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name2 || "Unknown") + sourceInfo;
        }
        var Resolved = 1;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = {};
        var currentlyValidatingElement = null;
        function setCurrentlyValidatingElement(element) {
          {
            currentlyValidatingElement = element;
          }
        }
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentlyValidatingElement) {
              var name2 = getComponentName(currentlyValidatingElement.type);
              var owner = currentlyValidatingElement._owner;
              stack += describeComponentFrame(name2, currentlyValidatingElement._source, owner && getComponentName(owner.type));
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          _assign(ReactSharedInternals, {
            ReactDebugCurrentFrame,
            ReactComponentTreeHook: {}
          });
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component2(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component2.prototype.isReactComponent = {};
        Component2.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component2.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component2.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component2.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component2.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef2() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement2(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = ("" + key).replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
        }
        var POOL_SIZE = 10;
        var traverseContextPool = [];
        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
          if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
          } else {
            return {
              result: mapResult,
              keyPrefix,
              func: mapFunction,
              context: mapContext,
              count: 0
            };
          }
        }
        function releaseTraverseContext(traverseContext) {
          traverseContext.result = null;
          traverseContext.keyPrefix = null;
          traverseContext.func = null;
          traverseContext.context = null;
          traverseContext.count = 0;
          if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
          }
        }
        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            callback(traverseContext, children, nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getComponentKey(child, i);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              {
                if (iteratorFn === children.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(children);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getComponentKey(child, ii++);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else if (type === "object") {
              var addendum = "";
              {
                addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
              }
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + ")." + addendum);
                }
              }
            }
          }
          return subtreeCount;
        }
        function traverseAllChildren(children, callback, traverseContext) {
          if (children == null) {
            return 0;
          }
          return traverseAllChildrenImpl(children, "", callback, traverseContext);
        }
        function getComponentKey(component, index) {
          if (typeof component === "object" && component !== null && component.key != null) {
            return escape(component.key);
          }
          return index.toString(36);
        }
        function forEachSingleChild(bookKeeping, child, name2) {
          var func = bookKeeping.func, context = bookKeeping.context;
          func.call(context, child, bookKeeping.count++);
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          if (children == null) {
            return children;
          }
          var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
          traverseAllChildren(children, forEachSingleChild, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapSingleChildIntoContext(bookKeeping, child, childKey) {
          var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
          var mappedChild = func.call(context, child, bookKeeping.count++);
          if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey);
            }
            result.push(mappedChild);
          }
        }
        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
          var escapedPrefix = "";
          if (prefix != null) {
            escapedPrefix = escapeUserProvidedKey(prefix) + "/";
          }
          var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
          traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, func, context);
          return result;
        }
        function countChildren(children) {
          return traverseAllChildren(children, function() {
            return null;
          }, null);
        }
        function toArray(children) {
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
            return child;
          });
          return result;
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        function lazy(ctor) {
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            _status: -1,
            _result: null
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
        }
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          return {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name2 = getComponentName(ReactCurrentOwner.current.type);
            if (name2) {
              return "\n\nCheck the render method of `" + name2 + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement(element);
          {
            error('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
          }
          setCurrentlyValidatingElement(null);
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var name2 = getComponentName(type);
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              setCurrentlyValidatingElement(element);
              checkPropTypes(propTypes, element.props, "prop", name2, ReactDebugCurrentFrame.getStackAddendum);
              setCurrentlyValidatingElement(null);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name2 || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            setCurrentlyValidatingElement(fragment);
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                break;
              }
            }
            if (fragment.ref !== null) {
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
            }
            setCurrentlyValidatingElement(null);
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement2.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            var testMap = new Map([[frozenObject, null]]);
            var testSet = new Set([frozenObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component2;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef2;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = true;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var shouldYieldToHost;
        var requestPaint;
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
              }
            }
          };
          var initialTime = Date.now();
          exports.unstable_now = function() {
            return Date.now() - initialTime;
          };
          requestHostCallback = function(cb) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          shouldYieldToHost = function() {
            return false;
          };
          requestPaint = exports.unstable_forceFrameRate = function() {
          };
        } else {
          var performance2 = window.performance;
          var _Date = window.Date;
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
            if (typeof cancelAnimationFrame !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
          }
          if (typeof performance2 === "object" && typeof performance2.now === "function") {
            exports.unstable_now = function() {
              return performance2.now();
            };
          } else {
            var _initialTime = _Date.now();
            exports.unstable_now = function() {
              return _Date.now() - _initialTime;
            };
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            shouldYieldToHost = function() {
              return exports.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (true) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
        var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        }
        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288;
        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;
        function logEvent(entries) {
          if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;
              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                stopLoggingProfilingEvents();
                return;
              }
              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
          }
        }
        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }
        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }
        function markTaskStart(task, ms) {
          {
            profilingState[QUEUE_SIZE]++;
            if (eventLog !== null) {
              logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
            }
          }
        }
        function markTaskCompleted(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskCanceled(task, ms) {
          {
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskErrored(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskRun(task, ms) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;
            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markTaskYield(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;
            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markSchedulerSuspended(ms) {
          {
            mainThreadIdCounter++;
            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        function markSchedulerUnsuspended(ms) {
          {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          {
            markSchedulerUnsuspended(initialTime2);
          }
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();
              markSchedulerSuspended(_currentTime);
            }
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (callback !== null) {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function timeoutForPriorityLevel(priorityLevel) {
          switch (priorityLevel) {
            case ImmediatePriority:
              return IMMEDIATE_PRIORITY_TIMEOUT;
            case UserBlockingPriority:
              return USER_BLOCKING_PRIORITY;
            case IdlePriority:
              return IDLE_PRIORITY;
            case LowPriority:
              return LOW_PRIORITY_TIMEOUT;
            case NormalPriority:
            default:
              return NORMAL_PRIORITY_TIMEOUT;
          }
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;
          var timeout;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
            timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
          } else {
            timeout = timeoutForPriorityLevel(priorityLevel);
            startTime = currentTime;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          {
            newTask.isQueued = false;
          }
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            }
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          }
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        function unstable_shouldYield() {
          var currentTime = exports.unstable_now();
          advanceTimers(currentTime);
          var firstTask = peek(taskQueue);
          return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = unstable_shouldYield;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name2, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name2,
            timestamp
          };
          var prevInteractions = exports.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_tracing_development();
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS((exports) => {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React2 = require_react();
        var _assign = require_object_assign();
        var Scheduler = require_scheduler();
        var checkPropTypes = require_checkPropTypes();
        var tracing = require_tracing();
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
          ReactSharedInternals.ReactCurrentDispatcher = {
            current: null
          };
        }
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
          ReactSharedInternals.ReactCurrentBatchConfig = {
            suspense: null
          };
        }
        function warn(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        if (!React2) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var invokeGuardedCallbackImpl = function(name2, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        };
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            var invokeGuardedCallbackDev = function(name2, func, context, a, b, c, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
            };
            invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name2, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var getFiberCurrentPropsFromNode = null;
        var getInstanceFromNode = null;
        var getNodeFromInstance = null;
        function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
          getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
          getInstanceFromNode = getInstanceFromNodeImpl;
          getNodeFromInstance = getNodeFromInstanceImpl;
          {
            if (!getNodeFromInstance || !getInstanceFromNode) {
              error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
            }
          }
        }
        var validateEventDispatches;
        {
          validateEventDispatches = function(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            var listenersIsArr = Array.isArray(dispatchListeners);
            var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
            var instancesIsArr = Array.isArray(dispatchInstances);
            var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
            if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
              error("EventPluginUtils: Invalid `event`.");
            }
          };
        }
        function executeDispatch(event, listener, inst) {
          var type = event.type || "unknown-event";
          event.currentTarget = getNodeFromInstance(inst);
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function executeDispatchesInOrder(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          {
            validateEventDispatches(event);
          }
          if (Array.isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
              if (event.isPropagationStopped()) {
                break;
              }
              executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
            }
          } else if (dispatchListeners) {
            executeDispatch(event, dispatchListeners, dispatchInstances);
          }
          event._dispatchListeners = null;
          event._dispatchInstances = null;
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var eventPluginOrder = null;
        var namesToPlugins = {};
        function recomputePluginOrdering() {
          if (!eventPluginOrder) {
            return;
          }
          for (var pluginName in namesToPlugins) {
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            if (!(pluginIndex > -1)) {
              {
                throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
              }
            }
            if (plugins[pluginIndex]) {
              continue;
            }
            if (!pluginModule.extractEvents) {
              {
                throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
              }
            }
            plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
              if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                {
                  throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                }
              }
            }
          }
        }
        function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
          if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
            }
          }
          eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (var phaseName in phasedRegistrationNames) {
              if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
              }
            }
            return true;
          } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
          }
          return false;
        }
        function publishRegistrationName(registrationName, pluginModule, eventName) {
          if (!!registrationNameModules[registrationName]) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
            }
          }
          registrationNameModules[registrationName] = pluginModule;
          registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
        }
        var plugins = [];
        var eventNameDispatchConfigs = {};
        var registrationNameModules = {};
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function injectEventPluginOrder(injectedEventPluginOrder) {
          if (!!eventPluginOrder) {
            {
              throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
            }
          }
          eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
          recomputePluginOrdering();
        }
        function injectEventPluginsByName(injectedNamesToPlugins) {
          var isOrderingDirty = false;
          for (var pluginName in injectedNamesToPlugins) {
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
              continue;
            }
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
              if (!!namesToPlugins[pluginName]) {
                {
                  throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                }
              }
              namesToPlugins[pluginName] = pluginModule;
              isOrderingDirty = true;
            }
          }
          if (isOrderingDirty) {
            recomputePluginOrdering();
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var PLUGIN_EVENT_SYSTEM = 1;
        var IS_REPLAYED = 1 << 5;
        var IS_FIRST_ANCESTOR = 1 << 6;
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var enableProfilerTimer = true;
        var enableDeprecatedFlareAPI = false;
        var enableFundamentalAPI = false;
        var warnAboutStringRefs = false;
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a, b, c, d) {
          return fn(a, b, c, d);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            return fn(a, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
            flushDiscreteUpdatesImpl();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix = name2.toLowerCase().slice(0, 5);
                return prefix !== "data-" && prefix !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name2) {
          return properties.hasOwnProperty(name2) ? properties[name2] : null;
        }
        function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name2;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, RESERVED, false, name2, null, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name2 = _ref[0], attributeName = _ref[1];
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, null, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, false, name2.toLowerCase(), null, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, false, name2, null, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, false, name2.toLowerCase(), null, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, true, name2, null, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, OVERLOADED_BOOLEAN, false, name2, null, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, POSITIVE_NUMERIC, false, name2, null, false);
        });
        ["rowSpan", "start"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, NUMERIC, false, name2.toLowerCase(), null, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, null, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
        });
        var ReactDebugCurrentFrame = null;
        {
          ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name2, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name2, expected) {
          {
            if (!isAttributeNameSafe(name2)) {
              return;
            }
            if (!node.hasAttribute(name2)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name2);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name2, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name2);
          if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name2)) {
              var _attributeName = name2;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name2, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match = path.match(BEFORE_SLASH_RE);
                if (match) {
                  var pathBeforeSlash = match[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name2 || "Unknown") + sourceInfo;
        }
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function initializeLazyComponentType(lazyComponent) {
          if (lazyComponent._status === Uninitialized) {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var thenable = ctor();
            lazyComponent._result = thenable;
            thenable.then(function(moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function(error2) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error2;
              }
            });
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
              return "";
            default:
              var owner = fiber._debugOwner;
              var source = fiber._debugSource;
              var name2 = getComponentName(fiber.type);
              var ownerName = null;
              if (owner) {
                ownerName = getComponentName(owner.type);
              }
              return describeComponentFrame(name2, source, ownerName);
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        }
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var ReactDebugCurrentFrame$2 = null;
        var ReactControlledValuePropTypes = {
          checkPropTypes: null
        };
        {
          ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          var propTypes = {
            value: function(props, propName, componentName) {
              if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            },
            checked: function(props, propName, componentName) {
              if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          };
          ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
            checkPropTypes(propTypes, props, "prop", tagName, ReactDebugCurrentFrame$2.getStackAddendum);
          };
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name2 = node.name;
          if (name2 !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name2 !== "") {
            node.name = name2;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name2 = props.name;
          if (props.type === "radio" && name2 != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || node.ownerDocument.activeElement !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React2.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React2.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var isArray2 = Array.isArray(props[propName]);
              if (props.multiple && !isArray2) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray2) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
              if (options[_i].selected !== selected) {
                options[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options.length; _i2++) {
              if (options[_i2].value === _selectedValue) {
                options[_i2].selected = true;
                if (setDefaultSelected) {
                  options[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options[_i2].disabled) {
                defaultSelected = options[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            ReactControlledValuePropTypes.checkPropTypes("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        function unsafeCastStringToDOMTopLevelType(topLevelType) {
          return topLevelType;
        }
        function unsafeCastDOMTopLevelTypeToString(topLevelType) {
          return topLevelType;
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
        var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationend"));
        var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationiteration"));
        var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationstart"));
        var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
        var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
        var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType("canplaythrough");
        var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
        var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
        var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
        var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
        var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType("compositionend");
        var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType("compositionstart");
        var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType("compositionupdate");
        var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType("contextmenu");
        var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
        var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
        var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType("dblclick");
        var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
        var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
        var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
        var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
        var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
        var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
        var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
        var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
        var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
        var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType("durationchange");
        var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
        var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
        var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
        var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
        var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
        var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("gotpointercapture");
        var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
        var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
        var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
        var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
        var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
        var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
        var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
        var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType("loadeddata");
        var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType("loadedmetadata");
        var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("lostpointercapture");
        var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
        var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
        var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
        var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
        var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
        var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
        var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
        var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
        var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
        var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType("pointercancel");
        var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType("pointerdown");
        var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType("pointermove");
        var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType("pointerout");
        var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType("pointerover");
        var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
        var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
        var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType("ratechange");
        var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
        var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
        var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
        var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
        var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType("selectionchange");
        var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
        var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
        var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
        var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
        var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType("timeupdate");
        var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
        var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType("touchcancel");
        var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
        var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
        var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType("touchstart");
        var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("transitionend"));
        var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType("volumechange");
        var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
        var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel");
        var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
        function getRawEventName(topLevelType) {
          return unsafeCastDOMTopLevelTypeToString(topLevelType);
        }
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        var elementListenerMap = new PossiblyWeakMap();
        function getListenerMapForElement(element) {
          var listenerMap = elementListenerMap.get(element);
          if (listenerMap === void 0) {
            listenerMap = new Map();
            elementListenerMap.set(element, listenerMap);
          }
          return listenerMap;
        }
        function get(key) {
          return key._reactInternalFiber;
        }
        function has(key) {
          return key._reactInternalFiber !== void 0;
        }
        function set(key, value) {
          key._reactInternalFiber = value;
        }
        var NoEffect = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function accumulateInto(current2, next) {
          if (!(next != null)) {
            {
              throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
            }
          }
          if (current2 == null) {
            return next;
          }
          if (Array.isArray(current2)) {
            if (Array.isArray(next)) {
              current2.push.apply(current2, next);
              return current2;
            }
            current2.push(next);
            return current2;
          }
          if (Array.isArray(next)) {
            return [current2].concat(next);
          }
          return [current2, next];
        }
        function forEachAccumulated(arr, cb, scope) {
          if (Array.isArray(arr)) {
            arr.forEach(cb, scope);
          } else if (arr) {
            cb.call(scope, arr);
          }
        }
        var eventQueue = null;
        var executeDispatchesAndRelease = function(event) {
          if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) {
              event.constructor.release(event);
            }
          }
        };
        var executeDispatchesAndReleaseTopLevel = function(e) {
          return executeDispatchesAndRelease(e);
        };
        function runEventsInBatch(events) {
          if (events !== null) {
            eventQueue = accumulateInto(eventQueue, events);
          }
          var processingEventQueue = eventQueue;
          eventQueue = null;
          if (!processingEventQueue) {
            return;
          }
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
          if (!!eventQueue) {
            {
              throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            }
          }
          rethrowCaughtError();
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
        var callbackBookkeepingPool = [];
        function releaseTopLevelCallbackBookKeeping(instance) {
          instance.topLevelType = null;
          instance.nativeEvent = null;
          instance.targetInst = null;
          instance.ancestors.length = 0;
          if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
            callbackBookkeepingPool.push(instance);
          }
        }
        function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
          if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.eventSystemFlags = eventSystemFlags;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
          }
          return {
            topLevelType,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            ancestors: []
          };
        }
        function findRootContainerNode(inst) {
          if (inst.tag === HostRoot) {
            return inst.stateNode.containerInfo;
          }
          while (inst.return) {
            inst = inst.return;
          }
          if (inst.tag !== HostRoot) {
            return null;
          }
          return inst.stateNode.containerInfo;
        }
        function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = null;
          for (var i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
              var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              if (extractedEvents) {
                events = accumulateInto(events, extractedEvents);
              }
            }
          }
          return events;
        }
        function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          runEventsInBatch(events);
        }
        function handleTopLevel(bookKeeping) {
          var targetInst = bookKeeping.targetInst;
          var ancestor = targetInst;
          do {
            if (!ancestor) {
              var ancestors = bookKeeping.ancestors;
              ancestors.push(ancestor);
              break;
            }
            var root2 = findRootContainerNode(ancestor);
            if (!root2) {
              break;
            }
            var tag = ancestor.tag;
            if (tag === HostComponent || tag === HostText) {
              bookKeeping.ancestors.push(ancestor);
            }
            ancestor = getClosestInstanceFromNode(root2);
          } while (ancestor);
          for (var i = 0; i < bookKeeping.ancestors.length; i++) {
            targetInst = bookKeeping.ancestors[i];
            var eventTarget = getEventTarget(bookKeeping.nativeEvent);
            var topLevelType = bookKeeping.topLevelType;
            var nativeEvent = bookKeeping.nativeEvent;
            var eventSystemFlags = bookKeeping.eventSystemFlags;
            if (i === 0) {
              eventSystemFlags |= IS_FIRST_ANCESTOR;
            }
            runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
          }
        }
        function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
          var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
          try {
            batchedEventUpdates(handleTopLevel, bookKeeping);
          } finally {
            releaseTopLevelCallbackBookKeeping(bookKeeping);
          }
        }
        function legacyListenToEvent(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
          }
        }
        function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
          if (!listenerMap.has(topLevelType)) {
            switch (topLevelType) {
              case TOP_SCROLL:
                trapCapturedEvent(TOP_SCROLL, mountAt);
                break;
              case TOP_FOCUS:
              case TOP_BLUR:
                trapCapturedEvent(TOP_FOCUS, mountAt);
                trapCapturedEvent(TOP_BLUR, mountAt);
                listenerMap.set(TOP_BLUR, null);
                listenerMap.set(TOP_FOCUS, null);
                break;
              case TOP_CANCEL:
              case TOP_CLOSE:
                if (isEventSupported(getRawEventName(topLevelType))) {
                  trapCapturedEvent(topLevelType, mountAt);
                }
                break;
              case TOP_INVALID:
              case TOP_SUBMIT:
              case TOP_RESET:
                break;
              default:
                var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                if (!isMediaEvent) {
                  trapBubbledEvent(topLevelType, mountAt);
                }
                break;
            }
            listenerMap.set(topLevelType, null);
          }
        }
        function isListeningToAllDependencies(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            if (!listenerMap.has(dependency)) {
              return false;
            }
          }
          return true;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
        var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function trapReplayableEventForDocument(topLevelType, document2, listenerMap) {
          legacyListenToTopLevelEvent(topLevelType, document2, listenerMap);
        }
        function eagerlyTrapReplayableEvents(container, document2) {
          var listenerMapForDoc = getListenerMapForElement(document2);
          discreteReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
          continuousReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
        }
        function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          return {
            blockedOn,
            topLevelType,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            container
          };
        }
        function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS:
            case TOP_BLUR:
              queuedFocus = null;
              break;
            case TOP_DRAG_ENTER:
            case TOP_DRAG_LEAVE:
              queuedDrag = null;
              break;
            case TOP_MOUSE_OVER:
            case TOP_MOUSE_OUT:
              queuedMouse = null;
              break;
            case TOP_POINTER_OVER:
            case TOP_POINTER_OUT: {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case TOP_GOT_POINTER_CAPTURE:
            case TOP_LOST_POINTER_CAPTURE: {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode$1(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS: {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
              return true;
            }
            case TOP_DRAG_ENTER: {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
              return true;
            }
            case TOP_MOUSE_OVER: {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
              return true;
            }
            case TOP_POINTER_OVER: {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
              return true;
            }
            case TOP_GOT_POINTER_CAPTURE: {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              nextDiscreteEvent.blockedOn = nextBlockedOn;
            } else {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        function addEventBubbleListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, false);
        }
        function addEventCaptureListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, true);
        }
        var simpleEventPluginEventTypes = {};
        var topLevelEventsToDispatchConfig = new Map();
        var eventPriorities = new Map();
        var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, "blur", TOP_CANCEL, "cancel", TOP_CLICK, "click", TOP_CLOSE, "close", TOP_CONTEXT_MENU, "contextMenu", TOP_COPY, "copy", TOP_CUT, "cut", TOP_AUX_CLICK, "auxClick", TOP_DOUBLE_CLICK, "doubleClick", TOP_DRAG_END, "dragEnd", TOP_DRAG_START, "dragStart", TOP_DROP, "drop", TOP_FOCUS, "focus", TOP_INPUT, "input", TOP_INVALID, "invalid", TOP_KEY_DOWN, "keyDown", TOP_KEY_PRESS, "keyPress", TOP_KEY_UP, "keyUp", TOP_MOUSE_DOWN, "mouseDown", TOP_MOUSE_UP, "mouseUp", TOP_PASTE, "paste", TOP_PAUSE, "pause", TOP_PLAY, "play", TOP_POINTER_CANCEL, "pointerCancel", TOP_POINTER_DOWN, "pointerDown", TOP_POINTER_UP, "pointerUp", TOP_RATE_CHANGE, "rateChange", TOP_RESET, "reset", TOP_SEEKED, "seeked", TOP_SUBMIT, "submit", TOP_TOUCH_CANCEL, "touchCancel", TOP_TOUCH_END, "touchEnd", TOP_TOUCH_START, "touchStart", TOP_VOLUME_CHANGE, "volumeChange"];
        var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
        var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, "drag", TOP_DRAG_ENTER, "dragEnter", TOP_DRAG_EXIT, "dragExit", TOP_DRAG_LEAVE, "dragLeave", TOP_DRAG_OVER, "dragOver", TOP_MOUSE_MOVE, "mouseMove", TOP_MOUSE_OUT, "mouseOut", TOP_MOUSE_OVER, "mouseOver", TOP_POINTER_MOVE, "pointerMove", TOP_POINTER_OUT, "pointerOut", TOP_POINTER_OVER, "pointerOver", TOP_SCROLL, "scroll", TOP_TOGGLE, "toggle", TOP_TOUCH_MOVE, "touchMove", TOP_WHEEL, "wheel"];
        var continuousPairsForSimpleEventPlugin = [TOP_ABORT, "abort", TOP_ANIMATION_END, "animationEnd", TOP_ANIMATION_ITERATION, "animationIteration", TOP_ANIMATION_START, "animationStart", TOP_CAN_PLAY, "canPlay", TOP_CAN_PLAY_THROUGH, "canPlayThrough", TOP_DURATION_CHANGE, "durationChange", TOP_EMPTIED, "emptied", TOP_ENCRYPTED, "encrypted", TOP_ENDED, "ended", TOP_ERROR, "error", TOP_GOT_POINTER_CAPTURE, "gotPointerCapture", TOP_LOAD, "load", TOP_LOADED_DATA, "loadedData", TOP_LOADED_METADATA, "loadedMetadata", TOP_LOAD_START, "loadStart", TOP_LOST_POINTER_CAPTURE, "lostPointerCapture", TOP_PLAYING, "playing", TOP_PROGRESS, "progress", TOP_SEEKING, "seeking", TOP_STALLED, "stalled", TOP_SUSPEND, "suspend", TOP_TIME_UPDATE, "timeUpdate", TOP_TRANSITION_END, "transitionEnd", TOP_WAITING, "waiting"];
        function processSimpleEventPluginPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i += 2) {
            var topEvent = eventTypes2[i];
            var event = eventTypes2[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var onEvent = "on" + capitalizedEvent;
            var config = {
              phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + "Capture"
              },
              dependencies: [topEvent],
              eventPriority: priority
            };
            eventPriorities.set(topEvent, priority);
            topLevelEventsToDispatchConfig.set(topEvent, config);
            simpleEventPluginEventTypes[event] = config;
          }
        }
        function processTopEventPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i++) {
            eventPriorities.set(eventTypes2[i], priority);
          }
        }
        processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
        function getEventPriorityForPluginSystem(topLevelType) {
          var priority = eventPriorities.get(topLevelType);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function trapBubbledEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, false);
        }
        function trapCapturedEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, true);
        }
        function trapEventForPluginEventSystem(container, topLevelType, capture) {
          var listener;
          switch (getEventPriorityForPluginSystem(topLevelType)) {
            case DiscreteEvent:
              listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case UserBlockingEvent:
              listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case ContinuousEvent:
            default:
              listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
          }
          var rawEventName = getRawEventName(topLevelType);
          if (capture) {
            addEventCaptureListener(container, rawEventName, listener);
          } else {
            addEventBubbleListener(container, rawEventName, listener);
          }
        }
        function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
          runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
        }
        function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          if (!_enabled) {
            return;
          }
          if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
          if (blockedOn === null) {
            clearIfContinuousEvent(topLevelType, nativeEvent);
            return;
          }
          if (isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
            return;
          }
          clearIfContinuousEvent(topLevelType, nativeEvent);
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
          }
        }
        function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
          }
          return null;
        }
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix, key) {
          return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name2, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name2) {
          return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name2) {
            if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
              return;
            }
            warnedStyleNames[name2] = true;
            error("Unsupported style property %s. Did you mean %s?", name2, camelize(name2.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name2) {
            if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
              return;
            }
            warnedStyleNames[name2] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name2, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name2, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name2);
          };
          var warnStyleValueIsInfinity = function(name2, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name2);
          };
          warnValidStyle = function(name2, value) {
            if (name2.indexOf("-") > -1) {
              warnHyphenatedStyleName(name2);
            } else if (badVendoredStyleNamePattern.test(name2)) {
              warnBadVendoredStyleName(name2);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name2, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name2, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name2, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        var ReactDebugCurrentFrame$3 = null;
        {
          ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name2) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name2) && warnedProperties[name2]) {
              return true;
            }
            if (rARIACamel.test(name2)) {
              var ariaName = "aria-" + name2.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2);
                warnedProperties[name2] = true;
                return true;
              }
              if (name2 !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
                warnedProperties[name2] = true;
                return true;
              }
            }
            if (rARIA.test(name2)) {
              var lowerCasedName = name2.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name2] = true;
                return false;
              }
              if (name2 !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
                warnedProperties[name2] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name2, value, canUseEventSystem) {
            if (_hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
              return true;
            }
            var lowerCasedName = name2.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (canUseEventSystem) {
              if (registrationNameModules.hasOwnProperty(name2)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name2)) {
                error("Unknown event handler property `%s`. It will be ignored.", name2);
                warnedProperties$1[name2] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name2)) {
              if (INVALID_EVENT_NAME_REGEX.test(name2)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2);
              }
              warnedProperties$1[name2] = true;
              return true;
            }
            if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name2] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2);
              warnedProperties$1[name2] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name2);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name2) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
                warnedProperties$1[name2] = true;
                return true;
              }
            } else if (!isReserved && name2 !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName);
              warnedProperties$1[name2] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2);
              }
              warnedProperties$1[name2] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
              warnedProperties$1[name2] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value);
              warnedProperties$1[name2] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, canUseEventSystem) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, canUseEventSystem) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, canUseEventSystem);
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            time: true,
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, true);
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name2) {
              names.push(name2);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function ensureListeningTo(rootContainerElement, registrationName) {
          var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
          var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
          legacyListenToEvent(registrationName, doc);
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement2(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              props = rawProps;
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name2 = attributes[_i].name.toLowerCase();
              switch (name2) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : "");
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            activeElementDetached: null,
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start, end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var addendum = getCurrentFiberStackInDev();
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          setEnabled(false);
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement2(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function shouldDeprioritizeSubtree(type, props) {
          return !!props.hidden;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactInternalInstance$" + randomKey;
        var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
        var internalContainerInstanceKey = "__reactContainere$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode$1(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance$1(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode$1(node) {
          return node[internalEventHandlersKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalEventHandlersKey] = props;
        }
        function getParent(inst) {
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var depthA = 0;
          for (var tempA = instA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = instB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            instA = getParent(instA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            instB = getParent(instB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (instA === instB || instA === instB.alternate) {
              return instA;
            }
            instA = getParent(instA);
            instB = getParent(instB);
          }
          return null;
        }
        function traverseTwoPhase(inst, fn, arg) {
          var path = [];
          while (inst) {
            path.push(inst);
            inst = getParent(inst);
          }
          var i;
          for (i = path.length; i-- > 0; ) {
            fn(path[i], "captured", arg);
          }
          for (i = 0; i < path.length; i++) {
            fn(path[i], "bubbled", arg);
          }
        }
        function traverseEnterLeave(from, to, fn, argFrom, argTo) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          var pathFrom = [];
          while (true) {
            if (!from) {
              break;
            }
            if (from === common) {
              break;
            }
            var alternate = from.alternate;
            if (alternate !== null && alternate === common) {
              break;
            }
            pathFrom.push(from);
            from = getParent(from);
          }
          var pathTo = [];
          while (true) {
            if (!to) {
              break;
            }
            if (to === common) {
              break;
            }
            var _alternate = to.alternate;
            if (_alternate !== null && _alternate === common) {
              break;
            }
            pathTo.push(to);
            to = getParent(to);
          }
          for (var i = 0; i < pathFrom.length; i++) {
            fn(pathFrom[i], "bubbled", argFrom);
          }
          for (var _i = pathTo.length; _i-- > 0; ) {
            fn(pathTo[_i], "captured", argTo);
          }
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name2, type, props) {
          switch (name2) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var listener;
          var stateNode = inst.stateNode;
          if (!stateNode) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (!props) {
            return null;
          }
          listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        function listenerAtPhase(inst, event, propagationPhase) {
          var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
          return getListener(inst, registrationName);
        }
        function accumulateDirectionalDispatches(inst, phase, event) {
          {
            if (!inst) {
              error("Dispatching inst must not be null");
            }
          }
          var listener = listenerAtPhase(inst, event, phase);
          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
        function accumulateTwoPhaseDispatchesSingle(event) {
          if (event && event.dispatchConfig.phasedRegistrationNames) {
            traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
          }
        }
        function accumulateDispatches(inst, ignoredDirection, event) {
          if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
              event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
          }
        }
        function accumulateDirectDispatchesSingle(event) {
          if (event && event.dispatchConfig.registrationName) {
            accumulateDispatches(event._targetInst, null, event);
          }
        }
        function accumulateTwoPhaseDispatches(events) {
          forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
        }
        function accumulateEnterLeaveDispatches(leave, enter, from, to) {
          traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
        }
        function accumulateDirectDispatches(events) {
          forEachAccumulated(events, accumulateDirectDispatchesSingle);
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        var EVENT_POOL_SIZE = 10;
        var EventInterface = {
          type: null,
          target: null,
          currentTarget: function() {
            return null;
          },
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: null,
          isTrusted: null
        };
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
          {
            delete this.nativeEvent;
            delete this.preventDefault;
            delete this.stopPropagation;
            delete this.isDefaultPrevented;
            delete this.isPropagationStopped;
          }
          this.dispatchConfig = dispatchConfig;
          this._targetInst = targetInst;
          this.nativeEvent = nativeEvent;
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
              continue;
            }
            {
              delete this[propName];
            }
            var normalize = Interface[propName];
            if (normalize) {
              this[propName] = normalize(nativeEvent);
            } else {
              if (propName === "target") {
                this.target = nativeEventTarget;
              } else {
                this[propName] = nativeEvent[propName];
              }
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        _assign(SyntheticEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
            this.isPersistent = functionThatReturnsTrue;
          },
          isPersistent: functionThatReturnsFalse,
          destructor: function() {
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              {
                Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
              }
            }
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            {
              Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
              Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
              Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
              Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function() {
              }));
              Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function() {
              }));
            }
          }
        });
        SyntheticEvent.Interface = EventInterface;
        SyntheticEvent.extend = function(Interface) {
          var Super = this;
          var E = function() {
          };
          E.prototype = Super.prototype;
          var prototype = new E();
          function Class() {
            return Super.apply(this, arguments);
          }
          _assign(prototype, Class.prototype);
          Class.prototype = prototype;
          Class.prototype.constructor = Class;
          Class.Interface = _assign({}, Super.Interface, Interface);
          Class.extend = Super.extend;
          addEventPoolingTo(Class);
          return Class;
        };
        addEventPoolingTo(SyntheticEvent);
        function getPooledWarningPropertyDefinition(propName, getVal) {
          var isFunction = typeof getVal === "function";
          return {
            configurable: true,
            set: set2,
            get: get2
          };
          function set2(val) {
            var action = isFunction ? "setting the method" : "setting the property";
            warn2(action, "This is effectively a no-op");
            return val;
          }
          function get2() {
            var action = isFunction ? "accessing the method" : "accessing the property";
            var result = isFunction ? "This is a no-op function" : "This is set to null";
            warn2(action, result);
            return getVal;
          }
          function warn2(action, result) {
            {
              error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
            }
          }
        }
        function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
          var EventConstructor = this;
          if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
          }
          return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
        }
        function releasePooledEvent(event) {
          var EventConstructor = this;
          if (!(event instanceof EventConstructor)) {
            {
              throw Error("Trying to release an event instance into a pool of a different type.");
            }
          }
          event.destructor();
          if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
            EventConstructor.eventPool.push(event);
          }
        }
        function addEventPoolingTo(EventConstructor) {
          EventConstructor.eventPool = [];
          EventConstructor.getPooled = getPooledEvent;
          EventConstructor.release = releasePooledEvent;
        }
        var SyntheticCompositionEvent = SyntheticEvent.extend({
          data: null
        });
        var SyntheticInputEvent = SyntheticEvent.extend({
          data: null
        });
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        var eventTypes = {
          beforeInput: {
            phasedRegistrationNames: {
              bubbled: "onBeforeInput",
              captured: "onBeforeInputCapture"
            },
            dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
          },
          compositionEnd: {
            phasedRegistrationNames: {
              bubbled: "onCompositionEnd",
              captured: "onCompositionEndCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionStart: {
            phasedRegistrationNames: {
              bubbled: "onCompositionStart",
              captured: "onCompositionStartCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionUpdate: {
            phasedRegistrationNames: {
              bubbled: "onCompositionUpdate",
              captured: "onCompositionUpdateCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          }
        };
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(topLevelType) {
          switch (topLevelType) {
            case TOP_COMPOSITION_START:
              return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
              return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
              return eventTypes.compositionUpdate;
          }
        }
        function isFallbackCompositionStart(topLevelType, nativeEvent) {
          return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_KEY_UP:
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
              return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(topLevelType);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionStart;
            }
          } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
            eventType = eventTypes.compositionEnd;
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === eventTypes.compositionStart) {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === eventTypes.compositionEnd) {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        function getNativeBeforeInputChars(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_COMPOSITION_END:
              return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
          if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (topLevelType) {
            case TOP_PASTE:
              return null;
            case TOP_KEY_PRESS:
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case TOP_COMPOSITION_END:
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
          event.data = chars;
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var BeforeInputEventPlugin = {
          eventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) {
              return beforeInput;
            }
            if (beforeInput === null) {
              return composition;
            }
            return [composition, beforeInput];
          }
        };
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        var eventTypes$1 = {
          change: {
            phasedRegistrationNames: {
              bubbled: "onChange",
              captured: "onChangeCapture"
            },
            dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
          }
        };
        function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
          var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
          event.type = "change";
          enqueueStateRestore(target);
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, event);
        }
        function runEventInBatch(event) {
          runEventsInBatch(event);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance$1(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CHANGE) {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
          if (topLevelType === TOP_FOCUS) {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (topLevelType === TOP_BLUR) {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
          if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CLICK) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        var ChangeEventPlugin = {
          eventTypes: eventTypes$1,
          _isInputEventSupported: isInputEventSupported,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(topLevelType, targetInst);
              if (inst) {
                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                return event;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(topLevelType, targetNode, targetInst);
            }
            if (topLevelType === TOP_BLUR) {
              handleControlledInputBlur(targetNode);
            }
          }
        };
        var SyntheticUIEvent = SyntheticEvent.extend({
          view: null,
          detail: null
        });
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var previousScreenX = 0;
        var previousScreenY = 0;
        var isMovementXSet = false;
        var isMovementYSet = false;
        var SyntheticMouseEvent = SyntheticUIEvent.extend({
          screenX: null,
          screenY: null,
          clientX: null,
          clientY: null,
          pageX: null,
          pageY: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          getModifierState: getEventModifierState,
          button: null,
          buttons: null,
          relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
              isMovementXSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenX - screenX : 0;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
              isMovementYSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenY - screenY : 0;
          }
        });
        var SyntheticPointerEvent = SyntheticMouseEvent.extend({
          pointerId: null,
          width: null,
          height: null,
          pressure: null,
          tangentialPressure: null,
          tiltX: null,
          tiltY: null,
          twist: null,
          pointerType: null,
          isPrimary: null
        });
        var eventTypes$2 = {
          mouseEnter: {
            registrationName: "onMouseEnter",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          mouseLeave: {
            registrationName: "onMouseLeave",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          pointerEnter: {
            registrationName: "onPointerEnter",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          },
          pointerLeave: {
            registrationName: "onPointerLeave",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          }
        };
        var EnterLeaveEventPlugin = {
          eventTypes: eventTypes$2,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
              return null;
            }
            if (!isOutEvent && !isOverEvent) {
              return null;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              from = targetInst;
              var related = nativeEvent.relatedTarget || nativeEvent.toElement;
              to = related ? getClosestInstanceFromNode(related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return null;
            }
            var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
              eventInterface = SyntheticMouseEvent;
              leaveEventType = eventTypes$2.mouseLeave;
              enterEventType = eventTypes$2.mouseEnter;
              eventTypePrefix = "mouse";
            } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
              eventInterface = SyntheticPointerEvent;
              leaveEventType = eventTypes$2.pointerLeave;
              enterEventType = eventTypes$2.pointerEnter;
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance$1(from);
            var toNode = to == null ? win : getNodeFromInstance$1(to);
            var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + "leave";
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + "enter";
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from, to);
            if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
              return [leave];
            }
            return [leave, enter];
          }
        };
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        var eventTypes$3 = {
          select: {
            phasedRegistrationNames: {
              bubbled: "onSelect",
              captured: "onSelectCapture"
            },
            dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
          }
        };
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return null;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = "select";
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
          }
          return null;
        }
        var SelectEventPlugin = {
          eventTypes: eventTypes$3,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
            var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
            if (!containerOrDoc || !isListeningToAllDependencies("onSelect", containerOrDoc)) {
              return null;
            }
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch (topLevelType) {
              case TOP_FOCUS:
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case TOP_BLUR:
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case TOP_MOUSE_DOWN:
                mouseDown = true;
                break;
              case TOP_CONTEXT_MENU:
              case TOP_MOUSE_UP:
              case TOP_DRAG_END:
                mouseDown = false;
                return constructSelectEvent(nativeEvent, nativeEventTarget);
              case TOP_SELECTION_CHANGE:
                if (skipSelectionChangeEvent) {
                  break;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
          }
        };
        var SyntheticAnimationEvent = SyntheticEvent.extend({
          animationName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticClipboardEvent = SyntheticEvent.extend({
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticFocusEvent = SyntheticUIEvent.extend({
          relatedTarget: null
        });
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
          key: getEventKey,
          location: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          repeat: null,
          locale: null,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticDragEvent = SyntheticMouseEvent.extend({
          dataTransfer: null
        });
        var SyntheticTouchEvent = SyntheticUIEvent.extend({
          touches: null,
          targetTouches: null,
          changedTouches: null,
          altKey: null,
          metaKey: null,
          ctrlKey: null,
          shiftKey: null,
          getModifierState: getEventModifierState
        });
        var SyntheticTransitionEvent = SyntheticEvent.extend({
          propertyName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticWheelEvent = SyntheticMouseEvent.extend({
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: null,
          deltaMode: null
        });
        var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
        var SimpleEventPlugin = {
          eventTypes: simpleEventPluginEventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
            if (!dispatchConfig) {
              return null;
            }
            var EventConstructor;
            switch (topLevelType) {
              case TOP_KEY_PRESS:
                if (getEventCharCode(nativeEvent) === 0) {
                  return null;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                EventConstructor = SyntheticKeyboardEvent;
                break;
              case TOP_BLUR:
              case TOP_FOCUS:
                EventConstructor = SyntheticFocusEvent;
                break;
              case TOP_CLICK:
                if (nativeEvent.button === 2) {
                  return null;
                }
              case TOP_AUX_CLICK:
              case TOP_DOUBLE_CLICK:
              case TOP_MOUSE_DOWN:
              case TOP_MOUSE_MOVE:
              case TOP_MOUSE_UP:
              case TOP_MOUSE_OUT:
              case TOP_MOUSE_OVER:
              case TOP_CONTEXT_MENU:
                EventConstructor = SyntheticMouseEvent;
                break;
              case TOP_DRAG:
              case TOP_DRAG_END:
              case TOP_DRAG_ENTER:
              case TOP_DRAG_EXIT:
              case TOP_DRAG_LEAVE:
              case TOP_DRAG_OVER:
              case TOP_DRAG_START:
              case TOP_DROP:
                EventConstructor = SyntheticDragEvent;
                break;
              case TOP_TOUCH_CANCEL:
              case TOP_TOUCH_END:
              case TOP_TOUCH_MOVE:
              case TOP_TOUCH_START:
                EventConstructor = SyntheticTouchEvent;
                break;
              case TOP_ANIMATION_END:
              case TOP_ANIMATION_ITERATION:
              case TOP_ANIMATION_START:
                EventConstructor = SyntheticAnimationEvent;
                break;
              case TOP_TRANSITION_END:
                EventConstructor = SyntheticTransitionEvent;
                break;
              case TOP_SCROLL:
                EventConstructor = SyntheticUIEvent;
                break;
              case TOP_WHEEL:
                EventConstructor = SyntheticWheelEvent;
                break;
              case TOP_COPY:
              case TOP_CUT:
              case TOP_PASTE:
                EventConstructor = SyntheticClipboardEvent;
                break;
              case TOP_GOT_POINTER_CAPTURE:
              case TOP_LOST_POINTER_CAPTURE:
              case TOP_POINTER_CANCEL:
              case TOP_POINTER_DOWN:
              case TOP_POINTER_MOVE:
              case TOP_POINTER_OUT:
              case TOP_POINTER_OVER:
              case TOP_POINTER_UP:
                EventConstructor = SyntheticPointerEvent;
                break;
              default:
                {
                  if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                    error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                  }
                }
                EventConstructor = SyntheticEvent;
                break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
          }
        };
        var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
        injectEventPluginOrder(DOMEventPluginOrder);
        setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
        injectEventPluginsByName({
          SimpleEventPlugin,
          EnterLeaveEventPlugin,
          ChangeEventPlugin,
          SelectEventPlugin,
          BeforeInputEventPlugin
        });
        var reactEmoji = "⚛";
        var warningEmoji = "⛔";
        var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
        var currentFiber = null;
        var currentPhase = null;
        var currentPhaseFiber = null;
        var isCommitting = false;
        var hasScheduledUpdateInCurrentCommit = false;
        var hasScheduledUpdateInCurrentPhase = false;
        var commitCountInCurrentWorkLoop = 0;
        var effectCountInCurrentCommit = 0;
        var labelsInCurrentCommit = new Set();
        var formatMarkName = function(markName) {
          return reactEmoji + " " + markName;
        };
        var formatLabel = function(label, warning) {
          var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
          var suffix = warning ? " Warning: " + warning : "";
          return "" + prefix + label + suffix;
        };
        var beginMark = function(markName) {
          performance.mark(formatMarkName(markName));
        };
        var clearMark = function(markName) {
          performance.clearMarks(formatMarkName(markName));
        };
        var endMark = function(label, markName, warning) {
          var formattedMarkName = formatMarkName(markName);
          var formattedLabel = formatLabel(label, warning);
          try {
            performance.measure(formattedLabel, formattedMarkName);
          } catch (err) {
          }
          performance.clearMarks(formattedMarkName);
          performance.clearMeasures(formattedLabel);
        };
        var getFiberMarkName = function(label, debugID) {
          return label + " (#" + debugID + ")";
        };
        var getFiberLabel = function(componentName, isMounted2, phase) {
          if (phase === null) {
            return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
          } else {
            return componentName + "." + phase;
          }
        };
        var beginFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          if (isCommitting && labelsInCurrentCommit.has(label)) {
            return false;
          }
          labelsInCurrentCommit.add(label);
          var markName = getFiberMarkName(label, debugID);
          beginMark(markName);
          return true;
        };
        var clearFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          clearMark(markName);
        };
        var endFiberMark = function(fiber, phase, warning) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          endMark(label, markName, warning);
        };
        var shouldIgnoreFiber = function(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
              return true;
            default:
              return false;
          }
        };
        var clearPendingPhaseMeasurement = function() {
          if (currentPhase !== null && currentPhaseFiber !== null) {
            clearFiberMark(currentPhaseFiber, currentPhase);
          }
          currentPhaseFiber = null;
          currentPhase = null;
          hasScheduledUpdateInCurrentPhase = false;
        };
        var pauseTimers = function() {
          var fiber = currentFiber;
          while (fiber) {
            if (fiber._debugIsCurrentlyTiming) {
              endFiberMark(fiber, null, null);
            }
            fiber = fiber.return;
          }
        };
        var resumeTimersRecursively = function(fiber) {
          if (fiber.return !== null) {
            resumeTimersRecursively(fiber.return);
          }
          if (fiber._debugIsCurrentlyTiming) {
            beginFiberMark(fiber, null);
          }
        };
        var resumeTimers = function() {
          if (currentFiber !== null) {
            resumeTimersRecursively(currentFiber);
          }
        };
        function recordEffect() {
          {
            effectCountInCurrentCommit++;
          }
        }
        function recordScheduleUpdate() {
          {
            if (isCommitting) {
              hasScheduledUpdateInCurrentCommit = true;
            }
            if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
              hasScheduledUpdateInCurrentPhase = true;
            }
          }
        }
        function startWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = true;
          }
        }
        function cancelWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
          }
        }
        function stopWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
          }
        }
        function stopFailedWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            var warning = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
            endFiberMark(fiber, null, warning);
          }
        }
        function startPhaseTimer(fiber, phase) {
          {
            if (!supportsUserTiming) {
              return;
            }
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase)) {
              return;
            }
            currentPhaseFiber = fiber;
            currentPhase = phase;
          }
        }
        function stopPhaseTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            if (currentPhase !== null && currentPhaseFiber !== null) {
              var warning = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
              endFiberMark(currentPhaseFiber, currentPhase, warning);
            }
            currentPhase = null;
            currentPhaseFiber = null;
          }
        }
        function startWorkLoopTimer(nextUnitOfWork) {
          {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) {
              return;
            }
            commitCountInCurrentWorkLoop = 0;
            beginMark("(React Tree Reconciliation)");
            resumeTimers();
          }
        }
        function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning = null;
            if (interruptedBy2 !== null) {
              if (interruptedBy2.tag === HostRoot) {
                warning = "A top-level update interrupted the previous render";
              } else {
                var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                warning = "An update to " + componentName + " interrupted the previous render";
              }
            } else if (commitCountInCurrentWorkLoop > 1) {
              warning = "There were cascading updates";
            }
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
            pauseTimers();
            endMark(label, "(React Tree Reconciliation)", warning);
          }
        }
        function startCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark("(Committing Changes)");
          }
        }
        function stopCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning = null;
            if (hasScheduledUpdateInCurrentCommit) {
              warning = "Lifecycle hook scheduled a cascading update";
            } else if (commitCountInCurrentWorkLoop > 0) {
              warning = "Caused by a cascading update in earlier commit";
            }
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark("(Committing Changes)", "(Committing Changes)", warning);
          }
        }
        function startCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Snapshot Effects)");
          }
        }
        function stopCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
          }
        }
        function startCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Host Effects)");
          }
        }
        function stopCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
          }
        }
        function startCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Calling Lifecycle Methods)");
          }
        }
        function stopCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name2 = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name2, getCurrentFiberStackInDev);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext;
            startPhaseTimer(fiber, "getChildContext");
            childContext = instance.getChildContext();
            stopPhaseTimer();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name2 = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name2, getCurrentFiberStackInDev);
            }
            return _assign({}, parentContext, {}, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component2 = node.type;
                  if (isContextProvider(Component2)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority = 99;
        var UserBlockingPriority$1 = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs = Scheduler_now();
        var now = initialTimeMs < 1e4 ? Scheduler_now : function() {
          return Scheduler_now() - initialTimeMs;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$1;
            case Scheduler_NormalPriority:
              return NormalPriority;
            case Scheduler_LowPriority:
              return LowPriority;
            case Scheduler_IdlePriority:
              return IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$1:
              return Scheduler_UserBlockingPriority;
            case NormalPriority:
              return Scheduler_NormalPriority;
            case LowPriority:
              return Scheduler_LowPriority;
            case IdlePriority:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            try {
              var _isSync = true;
              var queue = syncQueue;
              runWithPriority$1(ImmediatePriority, function() {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(_isSync);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error2;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var NoWork = 0;
        var Never = 1;
        var Idle = 2;
        var ContinuousHydration = 3;
        var Sync = MAX_SIGNED_31_BIT_INT;
        var Batched = Sync - 1;
        var UNIT_SIZE = 10;
        var MAGIC_NUMBER_OFFSET = Batched - 1;
        function msToExpirationTime(ms) {
          return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
        }
        function expirationTimeToMs(expirationTime) {
          return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
        }
        function ceiling(num, precision) {
          return ((num / precision | 0) + 1) * precision;
        }
        function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
          return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
        }
        var LOW_PRIORITY_EXPIRATION = 5e3;
        var LOW_PRIORITY_BATCH_SIZE = 250;
        function computeAsyncExpiration(currentTime) {
          return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
        }
        function computeSuspenseExpiration(currentTime, timeoutMs) {
          return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
        }
        var HIGH_PRIORITY_EXPIRATION = 500;
        var HIGH_PRIORITY_BATCH_SIZE = 100;
        function computeInteractiveExpiration(currentTime) {
          return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
        }
        function inferPriorityFromExpirationTime(currentTime, expirationTime) {
          if (expirationTime === Sync) {
            return ImmediatePriority;
          }
          if (expirationTime === Never || expirationTime === Idle) {
            return IdlePriority;
          }
          var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
          if (msUntil <= 0) {
            return ImmediatePriority;
          }
          if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
            return UserBlockingPriority$1;
          }
          if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
            return NormalPriority;
          }
          return IdlePriority;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            syncUpdates(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleWork(fiber, Sync);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function readLazyComponentType(lazyComponent) {
          initializeLazyComponentType(lazyComponent);
          if (lazyComponent._status !== Resolved) {
            throw lazyComponent._result;
          }
          return lazyComponent._result;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          {
            context._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderExpirationTime2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime2) {
              node.childExpirationTime = renderExpirationTime2;
              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              }
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
              alternate.childExpirationTime = renderExpirationTime2;
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(renderExpirationTime2, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  if (fiber.expirationTime < renderExpirationTime2) {
                    fiber.expirationTime = renderExpirationTime2;
                  }
                  var alternate = fiber.alternate;
                  if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                    alternate.expirationTime = renderExpirationTime2;
                  }
                  scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                  if (list.expirationTime < renderExpirationTime2) {
                    list.expirationTime = renderExpirationTime2;
                  }
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderExpirationTime2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (dependencies.expirationTime >= renderExpirationTime2) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                expirationTime: NoWork,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            baseQueue: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              baseQueue: currentQueue.baseQueue,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(expirationTime, suspenseConfig) {
          var update = {
            expirationTime,
            suspenseConfig,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          update.next = update;
          {
            update.priority = getCurrentPriorityLevel();
          }
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, update) {
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            cloneUpdateQueue(current2, workInProgress2);
          }
          var queue = workInProgress2.updateQueue;
          var last = queue.baseQueue;
          if (last === null) {
            queue.baseQueue = update.next = update;
            update.next = update;
          } else {
            update.next = last.next;
            last.next = update;
          }
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    payload.call(instance, prevState, nextProps);
                  }
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    _payload.call(instance, prevState, nextProps);
                  }
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderExpirationTime2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var baseQueue = queue.baseQueue;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            baseQueue = pendingQueue;
            queue.shared.pending = null;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (currentQueue !== null) {
                currentQueue.baseQueue = pendingQueue;
              }
            }
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = queue.baseState;
            var newExpirationTime = NoWork;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            if (first !== null) {
              var update = first;
              do {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime < renderExpirationTime2) {
                  var clone = {
                    expirationTime: update.expirationTime,
                    suspenseConfig: update.suspenseConfig,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  if (updateExpirationTime > newExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                  }
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      expirationTime: Sync,
                      suspenseConfig: update.suspenseConfig,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.effectTag |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null || update === first) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    update = baseQueue.next = pendingQueue.next;
                    pendingQueue.next = first;
                    queue.baseQueue = baseQueue = pendingQueue;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
            }
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            queue.baseState = newBaseState;
            queue.baseQueue = newBaseQueueLast;
            markUnprocessedUpdateTime(newExpirationTime);
            workInProgress2.expirationTime = newExpirationTime;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        function requestCurrentSuspenseConfig() {
          return ReactCurrentBatchConfig.suspense;
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React2.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              getDerivedStateFromProps(nextProps, prevState);
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.expirationTime === NoWork) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              }
            }
            startPhaseTimer(workInProgress2, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name2 = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name2);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              new ctor(props, context);
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          startPhaseTimer(workInProgress2, "componentWillMount");
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          stopPhaseTimer();
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress2, "componentWillReceiveProps");
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          stopPhaseTimer();
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              startPhaseTimer(workInProgress2, "componentWillMount");
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var oldProps = workInProgress2.memoizedProps;
          instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              startPhaseTimer(workInProgress2, "componentWillUpdate");
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.effectTag |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            error('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            var addendum = "";
            {
              addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            }
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
              }
            }
          }
        }
        function warnOnFunctionType() {
          {
            var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
            if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.effectTag = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, expirationTime) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, expirationTime) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, expirationTime) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, expirationTime, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case FunctionComponent: {
                  var Component2 = returnFiber.type;
                  {
                    {
                      throw Error((Component2.displayName || Component2.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, renderExpirationTime2) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, renderExpirationTime2);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function createDeprecatedResponderListener(responder, props) {
          var eventResponderListener = {
            responder,
            props
          };
          {
            Object.freeze(eventResponderListener);
          }
          return eventResponderListener;
        }
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        {
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderExpirationTime = NoWork;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderExpirationTime) {
          renderExpirationTime = nextRenderExpirationTime;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.expirationTime = NoWork;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component2(props, secondArg);
          if (workInProgress2.expirationTime === renderExpirationTime) {
            var numberOfReRenders = 0;
            do {
              workInProgress2.expirationTime = NoWork;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
              children = Component2(props, secondArg);
            } while (workInProgress2.expirationTime === renderExpirationTime);
          }
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, expirationTime) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.effectTag &= ~(Passive | Update);
          if (current2.expirationTime <= expirationTime) {
            current2.expirationTime = NoWork;
          }
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
          }
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateExpirationTime = update.expirationTime;
              if (updateExpirationTime < renderExpirationTime) {
                var clone = {
                  expirationTime: update.expirationTime,
                  suspenseConfig: update.suspenseConfig,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                  currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                  markUnprocessedUpdateTime(updateExpirationTime);
                }
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    expirationTime: Sync,
                    suspenseConfig: update.suspenseConfig,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookEffectTag, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value, config) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config]);
          return prevValue;
        }
        function updateDeferredValue(value, config) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config]);
          return prevValue;
        }
        function rerenderDeferredValue(value, config) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value, config]);
          return prevValue;
        }
        function startTransition(setPending, config, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
            setPending(true);
          });
          runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }
        function mountTransition(config) {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
          return [start, isPending];
        }
        function updateTransition(config) {
          var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
          return [start, isPending];
        }
        function rerenderTransition(config) {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
          return [start, isPending];
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = {
            expirationTime,
            suspenseConfig,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          {
            update.priority = getCurrentPriorityLevel();
          }
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdate = true;
            update.expirationTime = renderExpirationTime;
            currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
          } else {
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher.current;
                  ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if ("undefined" !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleWork(fiber, expirationTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useResponder: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition(config);
            }
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition(config);
            }
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition(config);
            }
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition(config);
            }
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value, config) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value, config);
            },
            useTransition: function(config) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition(config);
            }
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.effectTag = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderExpirationTime2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderExpirationTime2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        }
        function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2), getCurrentFiberStackInDev);
              }
            }
          }
          var render3 = Component2.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component2, nextProps, updateExpirationTime, renderExpirationTime2) {
          if (current2 === null) {
            var type = Component2.type;
            if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
              }
            }
            var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component2.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
            }
          }
          var currentChild = current2.child;
          if (updateExpirationTime < renderExpirationTime2) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component2.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, updateExpirationTime, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                outerMemoType = refineResolvedLazyComponent(outerMemoType);
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (updateExpirationTime < renderExpirationTime2) {
                workInProgress2.expirationTime = current2.expirationTime;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderExpirationTime2);
        }
        function updateFragment(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderExpirationTime2) {
          {
            workInProgress2.effectTag |= Update;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.effectTag |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2), getCurrentFiberStackInDev);
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2), getCurrentFiberStackInDev);
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderExpirationTime2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderExpirationTime2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderExpirationTime2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderExpirationTime2);
          {
            var inst = workInProgress2.stateNode;
            if (inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderExpirationTime2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                instance.render();
              }
              setIsRendering(false);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderExpirationTime2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderExpirationTime2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var root2 = workInProgress2.stateNode;
          if (root2.hydrate && enterHydrationState(workInProgress2)) {
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.effectTag = node.effectTag & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.effectTag |= ContentReset;
          }
          markRef(current2, workInProgress2);
          if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
            {
              markSpawnedWork(Never);
            }
            workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
            return null;
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          cancelWorkTimer(workInProgress2);
          var Component2 = readLazyComponentType(elementType);
          workInProgress2.type = Component2;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
          startWorkTimer(workInProgress2);
          var resolvedProps = resolveDefaultProps(Component2, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
                workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
              }
              child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
              }
              child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
              }
              child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderExpirationTime2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component2), getCurrentFiberStackInDev);
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderExpirationTime2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderExpirationTime2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component2, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var value;
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component2, props, context, renderExpirationTime2);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component2.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component2, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component2, props, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderExpirationTime2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  value = renderWithHooks(null, workInProgress2, Component2, props, context, renderExpirationTime2);
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName2 = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName3 = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support contextType.", _componentName3);
                didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryTime: NoWork
        };
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2) {
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current2 === null || current2.memoizedState !== null);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2) {
          var mode = workInProgress2.mode;
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.effectTag |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var nextDidTimeout = false;
          var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            nextDidTimeout = true;
            workInProgress2.effectTag &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            if (nextDidTimeout) {
              var nextFallbackChildren = nextProps.fallback;
              var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
              primaryChildFragment.return = workInProgress2;
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var progressedState = workInProgress2.memoizedState;
                var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                primaryChildFragment.child = progressedPrimaryChild;
                var progressedChild = progressedPrimaryChild;
                while (progressedChild !== null) {
                  progressedChild.return = primaryChildFragment;
                  progressedChild = progressedChild.sibling;
                }
              }
              var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
              fallbackChildFragment.return = workInProgress2;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = primaryChildFragment;
              return fallbackChildFragment;
            } else {
              var nextPrimaryChildren = nextProps.children;
              workInProgress2.memoizedState = null;
              return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var currentPrimaryChildFragment = current2.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              if (nextDidTimeout) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                _primaryChildFragment2.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState = workInProgress2.memoizedState;
                  var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                    _primaryChildFragment2.child = _progressedPrimaryChild;
                    var _progressedChild2 = _progressedPrimaryChild;
                    while (_progressedChild2 !== null) {
                      _progressedChild2.return = _primaryChildFragment2;
                      _progressedChild2 = _progressedChild2.sibling;
                    }
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration = 0;
                  var _hiddenChild = _primaryChildFragment2.child;
                  while (_hiddenChild !== null) {
                    _treeBaseDuration += _hiddenChild.treeBaseDuration;
                    _hiddenChild = _hiddenChild.sibling;
                  }
                  _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                }
                var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                _fallbackChildFragment2.return = workInProgress2;
                _primaryChildFragment2.sibling = _fallbackChildFragment2;
                _primaryChildFragment2.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment2;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren = nextProps.children;
                var currentPrimaryChild = currentPrimaryChildFragment.child;
                var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                workInProgress2.memoizedState = null;
                return workInProgress2.child = primaryChild;
              }
            } else {
              var _currentPrimaryChild = current2.child;
              if (nextDidTimeout) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                _primaryChildFragment3.return = workInProgress2;
                _primaryChildFragment3.child = _currentPrimaryChild;
                if (_currentPrimaryChild !== null) {
                  _currentPrimaryChild.return = _primaryChildFragment3;
                }
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState2 = workInProgress2.memoizedState;
                  var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                  _primaryChildFragment3.child = _progressedPrimaryChild2;
                  var _progressedChild3 = _progressedPrimaryChild2;
                  while (_progressedChild3 !== null) {
                    _progressedChild3.return = _primaryChildFragment3;
                    _progressedChild3 = _progressedChild3.sibling;
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration2 = 0;
                  var _hiddenChild2 = _primaryChildFragment3.child;
                  while (_hiddenChild2 !== null) {
                    _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                    _hiddenChild2 = _hiddenChild2.sibling;
                  }
                  _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                }
                var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                _fallbackChildFragment3.return = workInProgress2;
                _primaryChildFragment3.sibling = _fallbackChildFragment3;
                _fallbackChildFragment3.effectTag |= Placement;
                _primaryChildFragment3.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment3;
                return _fallbackChildFragment3;
              } else {
                workInProgress2.memoizedState = null;
                var _nextPrimaryChildren2 = nextProps.children;
                return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
              }
            }
          }
        }
        function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
          if (fiber.expirationTime < renderExpirationTime2) {
            fiber.expirationTime = renderExpirationTime2;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
            alternate.expirationTime = renderExpirationTime2;
          }
          scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderExpirationTime2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailExpiration: 0,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailExpiration = 0;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.effectTag |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.effectTag & DidCapture) !== NoEffect;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          return workInProgress2.child;
        }
        function updateContextProvider(current2, workInProgress2, renderExpirationTime2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            } else {
              propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderExpirationTime2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render3 = newProps.children;
          {
            if (typeof render3 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var newValue = readContext(context, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render3(newValue);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2) {
          cancelWorkTimer(workInProgress2);
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          var updateExpirationTime = workInProgress2.expirationTime;
          if (updateExpirationTime !== NoWork) {
            markUnprocessedUpdateTime(updateExpirationTime);
          }
          var childExpirationTime = workInProgress2.childExpirationTime;
          if (childExpirationTime < renderExpirationTime2) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.effectTag = Deletion;
            newWorkInProgress.effectTag |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderExpirationTime2) {
          var updateExpirationTime = workInProgress2.expirationTime;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (updateExpirationTime < renderExpirationTime2) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                    {
                      markSpawnedWork(Never);
                    }
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                    return null;
                  }
                  break;
                case ClassComponent: {
                  var Component2 = workInProgress2.type;
                  if (isContextProvider(Component2)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (hasChildWork) {
                      workInProgress2.effectTag |= Update;
                    }
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                      return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.effectTag & DidCapture) !== NoEffect;
                  var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
                    }
                    workInProgress2.effectTag |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            } else {
              didReceiveUpdate = false;
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.expirationTime = NoWork;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderExpirationTime2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderExpirationTime2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderExpirationTime2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderExpirationTime2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderExpirationTime2);
            case Mode:
              return updateMode(current2, workInProgress2, renderExpirationTime2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderExpirationTime2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderExpirationTime2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderExpirationTime2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.effectTag |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.effectTag |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderExpirationTime2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                workInProgress2.expirationTime = renderExpirationTime2;
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current2.child.sibling;
                  if (currentFallbackChild !== null) {
                    var first = workInProgress2.firstEffect;
                    if (first !== null) {
                      workInProgress2.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }
                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.effectTag |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.effectTag |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderExpirationTime2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.effectTag |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime2 > Never) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime2 - 1;
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                    {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                }
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderExpirationTime2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              var effectTag = workInProgress2.effectTag;
              if (effectTag & ShouldCapture) {
                workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var _effectTag = workInProgress2.effectTag;
              if (!((_effectTag & DidCapture) === NoEffect)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _effectTag2 = workInProgress2.effectTag;
              if (_effectTag2 & ShouldCapture) {
                workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function logCapturedError(capturedError) {
          var error2 = capturedError.error;
          {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            if (error2 != null && error2._suppressLogging) {
              if (errorBoundaryFound && willRetry) {
                return;
              }
              console["error"](error2);
            }
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (errorBoundaryFound && errorBoundaryName) {
              if (willRetry) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
              }
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        function logError(boundary, errorInfo) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          if (stack === null && source !== null) {
            stack = getStackByFiberInDevAndProd(source);
          }
          var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : "",
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
          };
          if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
          }
          try {
            logCapturedError(capturedError);
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          startPhaseTimer(current2, "componentWillUnmount");
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.effectTag & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  stopPhaseTimer();
                }
              }
              return;
            }
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveHookEffects(finishedWork) {
          if ((finishedWork.effectTag & Passive) !== NoEffect) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
              }
            }
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedExpirationTime) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.effectTag & Update) {
                if (current2 === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidMount();
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  stopPhaseTimer();
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var onRender = finishedWork.memoizedProps.onRender;
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                var fallbackChildFragment = node.child.sibling;
                fallbackChildFragment.return = node;
                node = fallbackChildFragment;
                continue;
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  {
                    var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                    runWithPriority$1(priorityLevel, function() {
                      var effect = firstEffect;
                      do {
                        var _destroy = effect.destroy;
                        if (_destroy !== void 0) {
                          safelyCallDestroy(current2, _destroy);
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    });
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
          var node = root2;
          while (true) {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiber(current2) {
          var alternate = current2.alternate;
          current2.return = null;
          current2.child = null;
          current2.memoizedState = null;
          current2.updateQueue = null;
          current2.dependencies = null;
          current2.alternate = null;
          current2.firstEffect = null;
          current2.lastEffect = null;
          current2.pendingProps = null;
          current2.memoizedProps = null;
          current2.stateNode = null;
          if (alternate !== null) {
            detachFiber(alternate);
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.effectTag & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.effectTag & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent);
            parentFiber.effectTag &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
          }
          detachFiber(current2);
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          var newDidTimeout;
          var primaryChildParent = finishedWork;
          if (newState === null) {
            newDidTimeout = false;
          } else {
            newDidTimeout = true;
            primaryChildParent = finishedWork.child;
            markCommitTimeOfFallback();
          }
          if (primaryChildParent !== null) {
            hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var thenables = finishedWork.updateQueue;
          if (thenables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            thenables.forEach(function(thenable) {
              var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
              if (!retryCache.has(thenable)) {
                {
                  if (thenable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(thenable);
                thenable.then(retry, retry);
              }
            });
          }
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (fiber.expirationTime !== Sync) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root2, renderExpirationTime2, thenable) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(thenable, threadIDs);
          } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(thenable, threadIDs);
            }
          }
          if (!threadIDs.has(renderExpirationTime2)) {
            threadIDs.add(renderExpirationTime2);
            var ping = pingSuspendedRoot.bind(null, root2, thenable, renderExpirationTime2);
            thenable.then(ping, ping);
          }
        }
        function throwException(root2, returnFiber, sourceFiber, value, renderExpirationTime2) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var thenable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.expirationTime = currentSource.expirationTime;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var thenables = _workInProgress.updateQueue;
                if (thenables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  thenables.add(thenable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.effectTag |= DidCapture;
                  sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(Sync, null);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.expirationTime = Sync;
                  return;
                }
                attachPingListener(root2, renderExpirationTime2, thenable);
                _workInProgress.effectTag |= ShouldCapture;
                _workInProgress.expirationTime = renderExpirationTime2;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.effectTag |= ShouldCapture;
                workInProgress2.expirationTime = renderExpirationTime2;
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var renderExpirationTime$1 = NoWork;
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootLatestProcessedExpirationTime = Sync;
        var workInProgressRootLatestSuspenseTimeout = Sync;
        var workInProgressRootCanSuspendUsingConfig = null;
        var workInProgressRootNextUnprocessedUpdateTime = NoWork;
        var workInProgressRootHasPendingPing = false;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority;
        var pendingPassiveEffectsExpirationTime = NoWork;
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var interruptedBy = null;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoWork;
        function requestCurrentTimeForUpdate() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return msToExpirationTime(now());
          }
          if (currentEventTime !== NoWork) {
            return currentEventTime;
          }
          currentEventTime = msToExpirationTime(now());
          return currentEventTime;
        }
        function getCurrentTime() {
          return msToExpirationTime(now());
        }
        function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return Sync;
          }
          var priorityLevel = getCurrentPriorityLevel();
          if ((mode & ConcurrentMode) === NoMode) {
            return priorityLevel === ImmediatePriority ? Sync : Batched;
          }
          if ((executionContext & RenderContext) !== NoContext) {
            return renderExpirationTime$1;
          }
          var expirationTime;
          if (suspenseConfig !== null) {
            expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          } else {
            switch (priorityLevel) {
              case ImmediatePriority:
                expirationTime = Sync;
                break;
              case UserBlockingPriority$1:
                expirationTime = computeInteractiveExpiration(currentTime);
                break;
              case NormalPriority:
              case LowPriority:
                expirationTime = computeAsyncExpiration(currentTime);
                break;
              case IdlePriority:
                expirationTime = Idle;
                break;
              default: {
                {
                  throw Error("Expected a valid priority level");
                }
              }
            }
          }
          if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
            expirationTime -= 1;
          }
          return expirationTime;
        }
        function scheduleUpdateOnFiber(fiber, expirationTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root2 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
          if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return;
          }
          checkForInterruption(fiber, expirationTime);
          recordScheduleUpdate();
          var priorityLevel = getCurrentPriorityLevel();
          if (expirationTime === Sync) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root2, expirationTime);
              performSyncWorkOnRoot(root2);
            } else {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, expirationTime);
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          } else {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, expirationTime);
          }
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Map([[root2, expirationTime]]);
            } else {
              var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root2);
              if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                rootsWithPendingDiscreteUpdates.set(root2, expirationTime);
              }
            }
          }
        }
        var scheduleWork = scheduleUpdateOnFiber;
        function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
          if (fiber.expirationTime < expirationTime) {
            fiber.expirationTime = expirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < expirationTime) {
            alternate.expirationTime = expirationTime;
          }
          var node = fiber.return;
          var root2 = null;
          if (node === null && fiber.tag === HostRoot) {
            root2 = fiber.stateNode;
          } else {
            while (node !== null) {
              alternate = node.alternate;
              if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
              } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
              if (node.return === null && node.tag === HostRoot) {
                root2 = node.stateNode;
                break;
              }
              node = node.return;
            }
          }
          if (root2 !== null) {
            if (workInProgressRoot === root2) {
              markUnprocessedUpdateTime(expirationTime);
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspendedAtTime(root2, renderExpirationTime$1);
              }
            }
            markRootUpdatedAtTime(root2, expirationTime);
          }
          return root2;
        }
        function getNextRootExpirationTimeToWorkOn(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            return lastExpiredTime;
          }
          var firstPendingTime = root2.firstPendingTime;
          if (!isRootSuspendedAtTime(root2, firstPendingTime)) {
            return firstPendingTime;
          }
          var lastPingedTime = root2.lastPingedTime;
          var nextKnownPendingLevel = root2.nextKnownPendingLevel;
          var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
          if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
            return NoWork;
          }
          return nextLevel;
        }
        function ensureRootIsScheduled(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            root2.callbackExpirationTime = Sync;
            root2.callbackPriority = ImmediatePriority;
            root2.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            return;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          var existingCallbackNode = root2.callbackNode;
          if (expirationTime === NoWork) {
            if (existingCallbackNode !== null) {
              root2.callbackNode = null;
              root2.callbackExpirationTime = NoWork;
              root2.callbackPriority = NoPriority;
            }
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root2.callbackPriority;
            var existingCallbackExpirationTime = root2.callbackExpirationTime;
            if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          root2.callbackExpirationTime = expirationTime;
          root2.callbackPriority = priorityLevel;
          var callbackNode;
          if (expirationTime === Sync) {
            callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root2), {
              timeout: expirationTimeToMs(expirationTime) - now()
            });
          }
          root2.callbackNode = callbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          currentEventTime = NoWork;
          if (didTimeout) {
            var currentTime = requestCurrentTimeForUpdate();
            markRootExpiredAtTime(root2, currentTime);
            ensureRootIsScheduled(root2);
            return null;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
          if (expirationTime !== NoWork) {
            var originalCallbackNode = root2.callbackNode;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
              prepareFreshStack(root2, expirationTime);
              startWorkOnPendingInteractions(root2, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher();
              var prevInteractions = pushInteractions(root2);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopConcurrent();
                  break;
                } catch (thrownValue) {
                  handleError(root2, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root2, expirationTime);
                markRootSuspendedAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
                throw fatalError;
              }
              if (workInProgress !== null) {
                stopInterruptedWorkLoopTimer();
              } else {
                stopFinishedWorkLoopTimer();
                var finishedWork = root2.finishedWork = root2.current.alternate;
                root2.finishedExpirationTime = expirationTime;
                finishConcurrentRender(root2, finishedWork, workInProgressRootExitStatus, expirationTime);
              }
              ensureRootIsScheduled(root2);
              if (root2.callbackNode === originalCallbackNode) {
                return performConcurrentWorkOnRoot.bind(null, root2);
              }
            }
          }
          return null;
        }
        function finishConcurrentRender(root2, finishedWork, exitStatus, expirationTime) {
          workInProgressRoot = null;
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              markRootExpiredAtTime(root2, expirationTime > Idle ? Idle : expirationTime);
              break;
            }
            case RootSuspended: {
              markRootSuspendedAtTime(root2, expirationTime);
              var lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
              if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root2.lastPingedTime;
                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root2.lastPingedTime = expirationTime;
                      prepareFreshStack(root2, expirationTime);
                      break;
                    }
                  }
                  var nextTime = getNextRootExpirationTimeToWorkOn(root2);
                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }
                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root2.lastPingedTime = lastSuspendedTime;
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspendedAtTime(root2, expirationTime);
              var _lastSuspendedTime = root2.lastSuspendedTime;
              if (expirationTime === _lastSuspendedTime) {
                root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              if (!IsThisRendererActing.current) {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root2.lastPingedTime;
                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root2.lastPingedTime = expirationTime;
                    prepareFreshStack(root2, expirationTime);
                    break;
                  }
                }
                var _nextTime = getNextRootExpirationTimeToWorkOn(root2);
                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }
                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root2.lastPingedTime = _lastSuspendedTime;
                  break;
                }
                var _msUntilTimeout;
                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;
                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }
                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootCompleted: {
              if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root2, expirationTime);
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout2);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function performSyncWorkOnRoot(root2) {
          var lastExpiredTime = root2.lastExpiredTime;
          var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
            prepareFreshStack(root2, expirationTime);
            startWorkOnPendingInteractions(root2, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root2);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root2, expirationTime);
              markRootSuspendedAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
              throw fatalError;
            }
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            } else {
              stopFinishedWorkLoopTimer();
              root2.finishedWork = root2.current.alternate;
              root2.finishedExpirationTime = expirationTime;
              finishSyncRender(root2);
            }
            ensureRootIsScheduled(root2);
          }
          return null;
        }
        function finishSyncRender(root2) {
          workInProgressRoot = null;
          commitRoot(root2);
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function syncUpdates(fn, a, b, c) {
          return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(expirationTime, root2) {
              markRootExpiredAtTime(root2, expirationTime);
              ensureRootIsScheduled(root2);
            });
            flushSyncCallbackQueue();
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          try {
            return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function unbatchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              {
                throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
              }
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
        function prepareFreshStack(root2, expirationTime) {
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          workInProgress = createWorkInProgress(root2.current, null);
          renderExpirationTime$1 = expirationTime;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootLatestProcessedExpirationTime = Sync;
          workInProgressRootLatestSuspenseTimeout = Sync;
          workInProgressRootCanSuspendUsingConfig = null;
          workInProgressRootNextUnprocessedUpdateTime = NoWork;
          workInProgressRootHasPendingPing = false;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root2, thrownValue) {
          do {
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              if (workInProgress === null || workInProgress.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return null;
              }
              if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
              }
              throwException(root2, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
              workInProgress = completeUnitOfWork(workInProgress);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher(root2) {
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
        function pushInteractions(root2) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
          if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
            workInProgressRootLatestProcessedExpirationTime = expirationTime;
          }
          if (suspenseConfig !== null) {
            if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
              workInProgressRootLatestSuspenseTimeout = expirationTime;
              workInProgressRootCanSuspendUsingConfig = suspenseConfig;
            }
          }
        }
        function markUnprocessedUpdateTime(expirationTime) {
          if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
            workInProgressRootNextUnprocessedUpdateTime = expirationTime;
          }
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
            markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
            markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function inferTimeFromExpirationTime(expirationTime) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
        }
        function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          startWorkTimer(unitOfWork);
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            next = completeUnitOfWork(unitOfWork);
          }
          ReactCurrentOwner$2.current = null;
          return next;
        }
        function completeUnitOfWork(unitOfWork) {
          workInProgress = unitOfWork;
          do {
            var current2 = workInProgress.alternate;
            var returnFiber = workInProgress.return;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              setCurrentFiber(workInProgress);
              var next = void 0;
              if ((workInProgress.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
              } else {
                startProfilerTimer(workInProgress);
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              }
              stopWorkTimer(workInProgress);
              resetCurrentFiber();
              resetChildExpirationTime(workInProgress);
              if (next !== null) {
                return next;
              }
              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }
                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }
                  returnFiber.lastEffect = workInProgress.lastEffect;
                }
                var effectTag = workInProgress.effectTag;
                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }
                  returnFiber.lastEffect = workInProgress;
                }
              }
            } else {
              var _next = unwindWork(workInProgress);
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                var actualDuration = workInProgress.actualDuration;
                var child = workInProgress.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                workInProgress.actualDuration = actualDuration;
              }
              if (_next !== null) {
                stopFailedWorkTimer(workInProgress);
                _next.effectTag &= HostEffectMask;
                return _next;
              }
              stopWorkTimer(workInProgress);
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }
            }
            var siblingFiber = workInProgress.sibling;
            if (siblingFiber !== null) {
              return siblingFiber;
            }
            workInProgress = returnFiber;
          } while (workInProgress !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
          return null;
        }
        function getRemainingExpirationTime(fiber) {
          var updateExpirationTime = fiber.expirationTime;
          var childExpirationTime = fiber.childExpirationTime;
          return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
        }
        function resetChildExpirationTime(completedWork) {
          if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
            return;
          }
          var newChildExpirationTime = NoWork;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              var childUpdateExpirationTime = child.expirationTime;
              var childChildExpirationTime = child.childExpirationTime;
              if (childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childUpdateExpirationTime;
              }
              if (childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childChildExpirationTime;
              }
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              var _childUpdateExpirationTime = _child.expirationTime;
              var _childChildExpirationTime = _child.childExpirationTime;
              if (_childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childUpdateExpirationTime;
              }
              if (_childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childChildExpirationTime;
              }
              _child = _child.sibling;
            }
          }
          completedWork.childExpirationTime = newChildExpirationTime;
        }
        function commitRoot(root2) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root2, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root2, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root2.finishedWork;
          var expirationTime = root2.finishedExpirationTime;
          if (finishedWork === null) {
            return null;
          }
          root2.finishedWork = null;
          root2.finishedExpirationTime = NoWork;
          if (!(finishedWork !== root2.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root2.callbackNode = null;
          root2.callbackExpirationTime = NoWork;
          root2.callbackPriority = NoPriority;
          root2.nextKnownPendingLevel = NoWork;
          startCommitTimer();
          var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
          markRootFinishedAtTime(root2, expirationTime, remainingExpirationTimeBeforeCommit);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            renderExpirationTime$1 = NoWork;
          }
          var firstEffect;
          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            ReactCurrentOwner$2.current = null;
            startCommitSnapshotEffectsTimer();
            prepareForCommit(root2.containerInfo);
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitHostEffectsTimer();
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            startCommitLifeCyclesTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root2, expirationTime);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitLifeCyclesTimer();
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root2.current = finishedWork;
            startCommitSnapshotEffectsTimer();
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            stopCommitHostEffectsTimer();
            startCommitLifeCyclesTimer();
            stopCommitLifeCyclesTimer();
          }
          stopCommitTimer();
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsExpirationTime = expirationTime;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              nextEffect = nextNextEffect;
            }
          }
          var remainingExpirationTime = root2.firstPendingTime;
          if (remainingExpirationTime !== NoWork) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root2, remainingExpirationTime);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root2, expirationTime);
            }
          }
          if (remainingExpirationTime === Sync) {
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, expirationTime);
          ensureRootIsScheduled(root2);
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;
            if ((effectTag & Snapshot) !== NoEffect) {
              setCurrentFiber(nextEffect);
              recordEffect();
              var current2 = nextEffect.alternate;
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((effectTag & Passive) !== NoEffect) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root2, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (effectTag & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
            switch (primaryEffectTag) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root2, nextEffect, renderPriorityLevel);
                break;
              }
            }
            recordEffect();
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root2, committedExpirationTime) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current2 = nextEffect.alternate;
              commitLifeCycles(root2, current2, nextEffect);
            }
            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root2 = rootWithPendingPassiveEffects;
          var expirationTime = pendingPassiveEffectsExpirationTime;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsExpirationTime = NoWork;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          {
            var _effect2 = root2.current.firstEffect;
            while (_effect2 !== null) {
              {
                setCurrentFiber(_effect2);
                invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                if (hasCaughtError()) {
                  if (!(_effect2 !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error5 = clearCaughtError();
                  captureCommitPhaseError(_effect2, _error5);
                }
                resetCurrentFiber();
              }
              var nextNextEffect = _effect2.nextEffect;
              _effect2.nextEffect = null;
              _effect2 = nextNextEffect;
            }
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root2, expirationTime);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
          enqueueUpdate(rootFiber, update);
          var root2 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, Sync);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, Sync);
                enqueueUpdate(fiber, update);
                var root2 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                if (root2 !== null) {
                  ensureRootIsScheduled(root2);
                  schedulePendingInteractions(root2, Sync);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root2, thenable, suspendedTime) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(thenable);
          }
          if (workInProgressRoot === root2 && renderExpirationTime$1 === suspendedTime) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, renderExpirationTime$1);
            } else {
              workInProgressRootHasPendingPing = true;
            }
            return;
          }
          if (!isRootSuspendedAtTime(root2, suspendedTime)) {
            return;
          }
          var lastPingedTime = root2.lastPingedTime;
          if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
            return;
          }
          root2.lastPingedTime = suspendedTime;
          ensureRootIsScheduled(root2);
          schedulePendingInteractions(root2, suspendedTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryTime) {
          if (retryTime === NoWork) {
            var suspenseConfig = null;
            var currentTime = requestCurrentTimeForUpdate();
            retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
          }
          var root2 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
          if (root2 !== null) {
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, retryTime);
          }
        }
        function resolveRetryThenable(boundaryFiber, thenable) {
          var retryTime = NoWork;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(thenable);
          }
          retryTimedOutBoundary(boundaryFiber, retryTime);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
          var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
          if (busyMinDurationMs <= 0) {
            return 0;
          }
          var busyDelayMs = suspenseConfig.busyDelayMs | 0;
          var currentTimeMs = now();
          var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
          var timeElapsed = currentTimeMs - eventTimeMs;
          if (timeElapsed <= busyDelayMs) {
            return 0;
          }
          var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
          return msUntilTimeout;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function stopFinishedWorkLoopTimer() {
          var didCompleteRoot = true;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function stopInterruptedWorkLoopTimer() {
          var didCompleteRoot = false;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
          if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
            interruptedBy = fiberThatReceivedUpdate;
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, expirationTime) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, expirationTime);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, expirationTime);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root2, expirationTime) {
          return expirationTime * 1e3 + root2.interactionThreadID;
        }
        function markSpawnedWork(expirationTime) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [expirationTime];
          } else {
            spawnedWorkDuringRender.push(expirationTime);
          }
        }
        function scheduleInteractions(root2, expirationTime, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root2, expirationTime) {
          scheduleInteractions(root2, expirationTime, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root2, expirationTime) {
          var interactions = new Set();
          root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root2.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, expirationTime);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root2, committedExpirationTime) {
          var earliestRemainingTimeAfterCommit = root2.firstPendingTime;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root2, committedExpirationTime);
              subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                pendingInteractionMap.delete(scheduledExpirationTime);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        var onScheduleFiberRoot = null;
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            }
            return true;
          }
          try {
            var rendererID = hook.inject(internals);
            if (true) {
              if (typeof hook.onScheduleFiberRoot === "function") {
                onScheduleFiberRoot = function(root2, children) {
                  try {
                    hook.onScheduleFiberRoot(rendererID, root2, children);
                  } catch (err) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                };
              }
            }
            onCommitFiberRoot = function(root2, expirationTime) {
              try {
                var didError = (root2.current.effectTag & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var currentTime = getCurrentTime();
                  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                  hook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  hook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
            onCommitFiberUnmount = function(fiber) {
              try {
                hook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root2, children) {
          if (typeof onScheduleFiberRoot === "function") {
            onScheduleFiberRoot(root2, children);
          }
        }
        function onCommitRoot(root2, expirationTime) {
          if (typeof onCommitFiberRoot === "function") {
            onCommitFiberRoot(root2, expirationTime);
          }
        }
        function onCommitUnmount(fiber) {
          if (typeof onCommitFiberUnmount === "function") {
            onCommitFiberUnmount(fiber);
          }
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            var testMap = new Map([[nonExtensibleObject, null]]);
            var testSet = new Set([nonExtensibleObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.effectTag = NoEffect;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.expirationTime = NoWork;
          this.childExpirationTime = NoWork;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugIsCurrentlyTiming = false;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component2) {
          if (typeof Component2 === "function") {
            return shouldConstruct(Component2) ? ClassComponent : FunctionComponent;
          } else if (Component2 !== void 0 && Component2 !== null) {
            var $$typeof = Component2.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              {
                workInProgress2._debugID = current2._debugID;
              }
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.effectTag = NoEffect;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childExpirationTime = current2.childExpirationTime;
          workInProgress2.expirationTime = current2.expirationTime;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
          workInProgress2.effectTag &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childExpirationTime = NoWork;
            workInProgress2.expirationTime = renderExpirationTime2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
          var fiber;
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                case REACT_CONCURRENT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= ConcurrentMode | BlockingMode | StrictMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromElement(element, mode, expirationTime) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, expirationTime, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
          {
            if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
              error('Profiler must specify an "id" string and "onRender" function as props');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromText(content, mode, expirationTime) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, expirationTime) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.expirationTime = expirationTime;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.effectTag = source.effectTag;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.expirationTime = source.expirationTime;
          target.childExpirationTime = source.childExpirationTime;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          {
            target._debugID = source._debugID;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.current = null;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.pingCache = null;
          this.finishedExpirationTime = NoWork;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoPriority;
          this.firstPendingTime = NoWork;
          this.firstSuspendedTime = NoWork;
          this.lastSuspendedTime = NoWork;
          this.nextKnownPendingLevel = NoWork;
          this.lastPingedTime = NoWork;
          this.lastExpiredTime = NoWork;
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        function isRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
        }
        function markRootSuspendedAtTime(root2, expirationTime) {
          var firstSuspendedTime = root2.firstSuspendedTime;
          var lastSuspendedTime = root2.lastSuspendedTime;
          if (firstSuspendedTime < expirationTime) {
            root2.firstSuspendedTime = expirationTime;
          }
          if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
            root2.lastSuspendedTime = expirationTime;
          }
          if (expirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (expirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootUpdatedAtTime(root2, expirationTime) {
          var firstPendingTime = root2.firstPendingTime;
          if (expirationTime > firstPendingTime) {
            root2.firstPendingTime = expirationTime;
          }
          var firstSuspendedTime = root2.firstSuspendedTime;
          if (firstSuspendedTime !== NoWork) {
            if (expirationTime >= firstSuspendedTime) {
              root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
            } else if (expirationTime >= root2.lastSuspendedTime) {
              root2.lastSuspendedTime = expirationTime + 1;
            }
            if (expirationTime > root2.nextKnownPendingLevel) {
              root2.nextKnownPendingLevel = expirationTime;
            }
          }
        }
        function markRootFinishedAtTime(root2, finishedExpirationTime, remainingExpirationTime) {
          root2.firstPendingTime = remainingExpirationTime;
          if (finishedExpirationTime <= root2.lastSuspendedTime) {
            root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
          } else if (finishedExpirationTime <= root2.firstSuspendedTime) {
            root2.firstSuspendedTime = finishedExpirationTime - 1;
          }
          if (finishedExpirationTime <= root2.lastPingedTime) {
            root2.lastPingedTime = NoWork;
          }
          if (finishedExpirationTime <= root2.lastExpiredTime) {
            root2.lastExpiredTime = NoWork;
          }
        }
        function markRootExpiredAtTime(root2, expirationTime) {
          var lastExpiredTime = root2.lastExpiredTime;
          if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
            root2.lastExpiredTime = expirationTime;
          }
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component2 = fiber.type;
            if (isContextProvider(Component2)) {
              return processChildContext(fiber, Component2, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var currentTime = requestCurrentTimeForUpdate();
          {
            if ("undefined" !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleWork(current$1, expirationTime);
          return expirationTime;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryTimeImpl(fiber, retryTime) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (suspenseState.retryTime < retryTime) {
              suspenseState.retryTime = retryTime;
            }
          }
        }
        function markRetryTimeIfNotHydrated(fiber, retryTime) {
          markRetryTimeImpl(fiber, retryTime);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryTimeImpl(alternate, retryTime);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          scheduleWork(fiber, ContinuousHydration);
          markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var expTime = computeExpirationForFiber(currentTime, fiber, null);
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideProps = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithSetImpl = function(obj, path, idx, value) {
            if (idx >= path.length) {
              return value;
            }
            var key = path[idx];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          overrideHookState = function(fiber, id, path, value) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            if (currentHook2 !== null) {
              var newState = copyWithSet(currentHook2.memoizedState, path, value);
              currentHook2.memoizedState = newState;
              currentHook2.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleWork(fiber, Sync);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleWork(fiber, Sync);
          };
          scheduleUpdate = function(fiber) {
            scheduleWork(fiber, Sync);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals(_assign({}, devToolsConfig, {
            overrideHookState,
            overrideProps,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber: function(fiber) {
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
              if (!findFiberByHostInstance) {
                return null;
              }
              return findFiberByHostInstance(instance);
            },
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: function() {
              return current;
            }
          }));
        }
        var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
        function ReactDOMRoot(container, options) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
        }
        function ReactDOMBlockingRoot(container, tag, options) {
          this._internalRoot = createRootImpl(container, tag, options);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          var container = root2.containerInfo;
          updateContainer(null, root2, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options) {
          var hydrate2 = options != null && options.hydrate === true;
          var hydrationCallbacks = options != null && options.hydrationOptions || null;
          var root2 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root2.current, container);
          if (hydrate2 && tag !== LegacyRoot) {
            var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
            eagerlyTrapReplayableEvents(container, doc);
          }
          return root2;
        }
        function createLegacyRoot(container, options) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root2 = container._reactRootContainer;
          var fiberRoot;
          if (!root2) {
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render2(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var ReactVersion = "16.13.1";
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }
        var Internals = {
          Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render2;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  });

  // node_modules/ethers/dist/ethers.umd.js
  var require_ethers_umd = __commonJS((exports, module) => {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2.ethers = {}));
    })(exports, function(exports2) {
      "use strict";
      var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function commonjsRequire() {
        throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs");
      }
      function unwrapExports(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
      }
      function createCommonjsModule(fn, module2) {
        return module2 = {exports: {}}, fn(module2, module2.exports), module2.exports;
      }
      function getCjsExportFromNamespace(n) {
        return n && n["default"] || n;
      }
      var _nodeResolve_empty = {};
      var _nodeResolve_empty$1 = Object.freeze({
        default: _nodeResolve_empty
      });
      var require$$0 = getCjsExportFromNamespace(_nodeResolve_empty$1);
      var bn = createCommonjsModule(function(module2) {
        (function(module3, exports3) {
          "use strict";
          function assert2(val, msg) {
            if (!val)
              throw new Error(msg || "Assertion failed");
          }
          function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
          function BN(number2, base2, endian) {
            if (BN.isBN(number2)) {
              return number2;
            }
            this.negative = 0;
            this.words = null;
            this.length = 0;
            this.red = null;
            if (number2 !== null) {
              if (base2 === "le" || base2 === "be") {
                endian = base2;
                base2 = 10;
              }
              this._init(number2 || 0, base2 || 10, endian || "be");
            }
          }
          if (typeof module3 === "object") {
            module3.exports = BN;
          } else {
            exports3.BN = BN;
          }
          BN.BN = BN;
          BN.wordSize = 26;
          var Buffer;
          try {
            Buffer = require$$0.Buffer;
          } catch (e) {
          }
          BN.isBN = function isBN(num) {
            if (num instanceof BN) {
              return true;
            }
            return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };
          BN.max = function max(left, right) {
            if (left.cmp(right) > 0)
              return left;
            return right;
          };
          BN.min = function min(left, right) {
            if (left.cmp(right) < 0)
              return left;
            return right;
          };
          BN.prototype._init = function init(number2, base2, endian) {
            if (typeof number2 === "number") {
              return this._initNumber(number2, base2, endian);
            }
            if (typeof number2 === "object") {
              return this._initArray(number2, base2, endian);
            }
            if (base2 === "hex") {
              base2 = 16;
            }
            assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
            number2 = number2.toString().replace(/\s+/g, "");
            var start = 0;
            if (number2[0] === "-") {
              start++;
            }
            if (base2 === 16) {
              this._parseHex(number2, start);
            } else {
              this._parseBase(number2, base2, start);
            }
            if (number2[0] === "-") {
              this.negative = 1;
            }
            this.strip();
            if (endian !== "le")
              return;
            this._initArray(this.toArray(), base2, endian);
          };
          BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
            if (number2 < 0) {
              this.negative = 1;
              number2 = -number2;
            }
            if (number2 < 67108864) {
              this.words = [number2 & 67108863];
              this.length = 1;
            } else if (number2 < 4503599627370496) {
              this.words = [
                number2 & 67108863,
                number2 / 67108864 & 67108863
              ];
              this.length = 2;
            } else {
              assert2(number2 < 9007199254740992);
              this.words = [
                number2 & 67108863,
                number2 / 67108864 & 67108863,
                1
              ];
              this.length = 3;
            }
            if (endian !== "le")
              return;
            this._initArray(this.toArray(), base2, endian);
          };
          BN.prototype._initArray = function _initArray(number2, base2, endian) {
            assert2(typeof number2.length === "number");
            if (number2.length <= 0) {
              this.words = [0];
              this.length = 1;
              return this;
            }
            this.length = Math.ceil(number2.length / 3);
            this.words = new Array(this.length);
            for (var i2 = 0; i2 < this.length; i2++) {
              this.words[i2] = 0;
            }
            var j, w;
            var off = 0;
            if (endian === "be") {
              for (i2 = number2.length - 1, j = 0; i2 >= 0; i2 -= 3) {
                w = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
                this.words[j] |= w << off & 67108863;
                this.words[j + 1] = w >>> 26 - off & 67108863;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === "le") {
              for (i2 = 0, j = 0; i2 < number2.length; i2 += 3) {
                w = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
                this.words[j] |= w << off & 67108863;
                this.words[j + 1] = w >>> 26 - off & 67108863;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };
          function parseHex(str, start, end) {
            var r2 = 0;
            var len = Math.min(str.length, end);
            for (var i2 = start; i2 < len; i2++) {
              var c = str.charCodeAt(i2) - 48;
              r2 <<= 4;
              if (c >= 49 && c <= 54) {
                r2 |= c - 49 + 10;
              } else if (c >= 17 && c <= 22) {
                r2 |= c - 17 + 10;
              } else {
                r2 |= c & 15;
              }
            }
            return r2;
          }
          BN.prototype._parseHex = function _parseHex(number2, start) {
            this.length = Math.ceil((number2.length - start) / 6);
            this.words = new Array(this.length);
            for (var i2 = 0; i2 < this.length; i2++) {
              this.words[i2] = 0;
            }
            var j, w;
            var off = 0;
            for (i2 = number2.length - 6, j = 0; i2 >= start; i2 -= 6) {
              w = parseHex(number2, i2, i2 + 6);
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] |= w >>> 26 - off & 4194303;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
            if (i2 + 6 !== start) {
              w = parseHex(number2, start, i2 + 6);
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] |= w >>> 26 - off & 4194303;
            }
            this.strip();
          };
          function parseBase(str, start, end, mul) {
            var r2 = 0;
            var len = Math.min(str.length, end);
            for (var i2 = start; i2 < len; i2++) {
              var c = str.charCodeAt(i2) - 48;
              r2 *= mul;
              if (c >= 49) {
                r2 += c - 49 + 10;
              } else if (c >= 17) {
                r2 += c - 17 + 10;
              } else {
                r2 += c;
              }
            }
            return r2;
          }
          BN.prototype._parseBase = function _parseBase(number2, base2, start) {
            this.words = [0];
            this.length = 1;
            for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
              limbLen++;
            }
            limbLen--;
            limbPow = limbPow / base2 | 0;
            var total = number2.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;
            var word = 0;
            for (var i2 = start; i2 < end; i2 += limbLen) {
              word = parseBase(number2, i2, i2 + limbLen, base2);
              this.imuln(limbPow);
              if (this.words[0] + word < 67108864) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number2, i2, number2.length, base2);
              for (i2 = 0; i2 < mod; i2++) {
                pow *= base2;
              }
              this.imuln(pow);
              if (this.words[0] + word < 67108864) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }
          };
          BN.prototype.copy = function copy(dest) {
            dest.words = new Array(this.length);
            for (var i2 = 0; i2 < this.length; i2++) {
              dest.words[i2] = this.words[i2];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };
          BN.prototype.clone = function clone() {
            var r2 = new BN(null);
            this.copy(r2);
            return r2;
          };
          BN.prototype._expand = function _expand(size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };
          BN.prototype.strip = function strip() {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };
          BN.prototype._normSign = function _normSign() {
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };
          BN.prototype.inspect = function inspect2() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
          };
          var zeros = [
            "",
            "0",
            "00",
            "000",
            "0000",
            "00000",
            "000000",
            "0000000",
            "00000000",
            "000000000",
            "0000000000",
            "00000000000",
            "000000000000",
            "0000000000000",
            "00000000000000",
            "000000000000000",
            "0000000000000000",
            "00000000000000000",
            "000000000000000000",
            "0000000000000000000",
            "00000000000000000000",
            "000000000000000000000",
            "0000000000000000000000",
            "00000000000000000000000",
            "000000000000000000000000",
            "0000000000000000000000000"
          ];
          var groupSizes = [
            0,
            0,
            25,
            16,
            12,
            11,
            10,
            9,
            8,
            8,
            7,
            7,
            7,
            7,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ];
          var groupBases = [
            0,
            0,
            33554432,
            43046721,
            16777216,
            48828125,
            60466176,
            40353607,
            16777216,
            43046721,
            1e7,
            19487171,
            35831808,
            62748517,
            7529536,
            11390625,
            16777216,
            24137569,
            34012224,
            47045881,
            64e6,
            4084101,
            5153632,
            6436343,
            7962624,
            9765625,
            11881376,
            14348907,
            17210368,
            20511149,
            243e5,
            28629151,
            33554432,
            39135393,
            45435424,
            52521875,
            60466176
          ];
          BN.prototype.toString = function toString(base2, padding) {
            base2 = base2 || 10;
            padding = padding | 0 || 1;
            var out;
            if (base2 === 16 || base2 === "hex") {
              out = "";
              var off = 0;
              var carry = 0;
              for (var i2 = 0; i2 < this.length; i2++) {
                var w = this.words[i2];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i2 !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i2--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = "0" + out;
              }
              if (this.negative !== 0) {
                out = "-" + out;
              }
              return out;
            }
            if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
              var groupSize = groupSizes[base2];
              var groupBase = groupBases[base2];
              out = "";
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r2 = c.modn(groupBase).toString(base2);
                c = c.idivn(groupBase);
                if (!c.isZero()) {
                  out = zeros[groupSize - r2.length] + r2 + out;
                } else {
                  out = r2 + out;
                }
              }
              if (this.isZero()) {
                out = "0" + out;
              }
              while (out.length % padding !== 0) {
                out = "0" + out;
              }
              if (this.negative !== 0) {
                out = "-" + out;
              }
              return out;
            }
            assert2(false, "Base should be between 2 and 36");
          };
          BN.prototype.toNumber = function toNumber() {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 67108864;
            } else if (this.length === 3 && this.words[2] === 1) {
              ret += 4503599627370496 + this.words[1] * 67108864;
            } else if (this.length > 2) {
              assert2(false, "Number can only safely store up to 53 bits");
            }
            return this.negative !== 0 ? -ret : ret;
          };
          BN.prototype.toJSON = function toJSON() {
            return this.toString(16);
          };
          BN.prototype.toBuffer = function toBuffer(endian, length) {
            assert2(typeof Buffer !== "undefined");
            return this.toArrayLike(Buffer, endian, length);
          };
          BN.prototype.toArray = function toArray2(endian, length) {
            return this.toArrayLike(Array, endian, length);
          };
          BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert2(byteLength <= reqLength, "byte array longer than desired length");
            assert2(reqLength > 0, "Requested array length <= 0");
            this.strip();
            var littleEndian = endian === "le";
            var res = new ArrayType(reqLength);
            var b, i2;
            var q = this.clone();
            if (!littleEndian) {
              for (i2 = 0; i2 < reqLength - byteLength; i2++) {
                res[i2] = 0;
              }
              for (i2 = 0; !q.isZero(); i2++) {
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i2 - 1] = b;
              }
            } else {
              for (i2 = 0; !q.isZero(); i2++) {
                b = q.andln(255);
                q.iushrn(8);
                res[i2] = b;
              }
              for (; i2 < reqLength; i2++) {
                res[i2] = 0;
              }
            }
            return res;
          };
          if (Math.clz32) {
            BN.prototype._countBits = function _countBits(w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits(w) {
              var t = w;
              var r2 = 0;
              if (t >= 4096) {
                r2 += 13;
                t >>>= 13;
              }
              if (t >= 64) {
                r2 += 7;
                t >>>= 7;
              }
              if (t >= 8) {
                r2 += 4;
                t >>>= 4;
              }
              if (t >= 2) {
                r2 += 2;
                t >>>= 2;
              }
              return r2 + t;
            };
          }
          BN.prototype._zeroBits = function _zeroBits(w) {
            if (w === 0)
              return 26;
            var t = w;
            var r2 = 0;
            if ((t & 8191) === 0) {
              r2 += 13;
              t >>>= 13;
            }
            if ((t & 127) === 0) {
              r2 += 7;
              t >>>= 7;
            }
            if ((t & 15) === 0) {
              r2 += 4;
              t >>>= 4;
            }
            if ((t & 3) === 0) {
              r2 += 2;
              t >>>= 2;
            }
            if ((t & 1) === 0) {
              r2++;
            }
            return r2;
          };
          BN.prototype.bitLength = function bitLength() {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };
          function toBitArray(num) {
            var w = new Array(num.bitLength());
            for (var bit = 0; bit < w.length; bit++) {
              var off = bit / 26 | 0;
              var wbit = bit % 26;
              w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
            }
            return w;
          }
          BN.prototype.zeroBits = function zeroBits() {
            if (this.isZero())
              return 0;
            var r2 = 0;
            for (var i2 = 0; i2 < this.length; i2++) {
              var b = this._zeroBits(this.words[i2]);
              r2 += b;
              if (b !== 26)
                break;
            }
            return r2;
          };
          BN.prototype.byteLength = function byteLength() {
            return Math.ceil(this.bitLength() / 8);
          };
          BN.prototype.toTwos = function toTwos(width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };
          BN.prototype.fromTwos = function fromTwos(width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };
          BN.prototype.isNeg = function isNeg() {
            return this.negative !== 0;
          };
          BN.prototype.neg = function neg() {
            return this.clone().ineg();
          };
          BN.prototype.ineg = function ineg() {
            if (!this.isZero()) {
              this.negative ^= 1;
            }
            return this;
          };
          BN.prototype.iuor = function iuor(num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }
            for (var i2 = 0; i2 < num.length; i2++) {
              this.words[i2] = this.words[i2] | num.words[i2];
            }
            return this.strip();
          };
          BN.prototype.ior = function ior(num) {
            assert2((this.negative | num.negative) === 0);
            return this.iuor(num);
          };
          BN.prototype.or = function or(num) {
            if (this.length > num.length)
              return this.clone().ior(num);
            return num.clone().ior(this);
          };
          BN.prototype.uor = function uor(num) {
            if (this.length > num.length)
              return this.clone().iuor(num);
            return num.clone().iuor(this);
          };
          BN.prototype.iuand = function iuand(num) {
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }
            for (var i2 = 0; i2 < b.length; i2++) {
              this.words[i2] = this.words[i2] & num.words[i2];
            }
            this.length = b.length;
            return this.strip();
          };
          BN.prototype.iand = function iand(num) {
            assert2((this.negative | num.negative) === 0);
            return this.iuand(num);
          };
          BN.prototype.and = function and(num) {
            if (this.length > num.length)
              return this.clone().iand(num);
            return num.clone().iand(this);
          };
          BN.prototype.uand = function uand(num) {
            if (this.length > num.length)
              return this.clone().iuand(num);
            return num.clone().iuand(this);
          };
          BN.prototype.iuxor = function iuxor(num) {
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            for (var i2 = 0; i2 < b.length; i2++) {
              this.words[i2] = a.words[i2] ^ b.words[i2];
            }
            if (this !== a) {
              for (; i2 < a.length; i2++) {
                this.words[i2] = a.words[i2];
              }
            }
            this.length = a.length;
            return this.strip();
          };
          BN.prototype.ixor = function ixor(num) {
            assert2((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };
          BN.prototype.xor = function xor(num) {
            if (this.length > num.length)
              return this.clone().ixor(num);
            return num.clone().ixor(this);
          };
          BN.prototype.uxor = function uxor(num) {
            if (this.length > num.length)
              return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };
          BN.prototype.inotn = function inotn(width) {
            assert2(typeof width === "number" && width >= 0);
            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;
            this._expand(bytesNeeded);
            if (bitsLeft > 0) {
              bytesNeeded--;
            }
            for (var i2 = 0; i2 < bytesNeeded; i2++) {
              this.words[i2] = ~this.words[i2] & 67108863;
            }
            if (bitsLeft > 0) {
              this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
            }
            return this.strip();
          };
          BN.prototype.notn = function notn(width) {
            return this.clone().inotn(width);
          };
          BN.prototype.setn = function setn(bit, val) {
            assert2(typeof bit === "number" && bit >= 0);
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            this._expand(off + 1);
            if (val) {
              this.words[off] = this.words[off] | 1 << wbit;
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }
            return this.strip();
          };
          BN.prototype.iadd = function iadd(num) {
            var r2;
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r2 = this.isub(num);
              this.negative ^= 1;
              return this._normSign();
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r2 = this.isub(num);
              num.negative = 1;
              return r2._normSign();
            }
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i2 = 0; i2 < b.length; i2++) {
              r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
              this.words[i2] = r2 & 67108863;
              carry = r2 >>> 26;
            }
            for (; carry !== 0 && i2 < a.length; i2++) {
              r2 = (a.words[i2] | 0) + carry;
              this.words[i2] = r2 & 67108863;
              carry = r2 >>> 26;
            }
            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
            } else if (a !== this) {
              for (; i2 < a.length; i2++) {
                this.words[i2] = a.words[i2];
              }
            }
            return this;
          };
          BN.prototype.add = function add(num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }
            if (this.length > num.length)
              return this.clone().iadd(num);
            return num.clone().iadd(this);
          };
          BN.prototype.isub = function isub(num) {
            if (num.negative !== 0) {
              num.negative = 0;
              var r2 = this.iadd(num);
              num.negative = 1;
              return r2._normSign();
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }
            var cmp = this.cmp(num);
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }
            var carry = 0;
            for (var i2 = 0; i2 < b.length; i2++) {
              r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
              carry = r2 >> 26;
              this.words[i2] = r2 & 67108863;
            }
            for (; carry !== 0 && i2 < a.length; i2++) {
              r2 = (a.words[i2] | 0) + carry;
              carry = r2 >> 26;
              this.words[i2] = r2 & 67108863;
            }
            if (carry === 0 && i2 < a.length && a !== this) {
              for (; i2 < a.length; i2++) {
                this.words[i2] = a.words[i2];
              }
            }
            this.length = Math.max(this.length, i2);
            if (a !== this) {
              this.negative = 1;
            }
            return this.strip();
          };
          BN.prototype.sub = function sub(num) {
            return this.clone().isub(num);
          };
          function smallMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            var len = self2.length + num.length | 0;
            out.length = len;
            len = len - 1 | 0;
            var a = self2.words[0] | 0;
            var b = num.words[0] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            var carry = r2 / 67108864 | 0;
            out.words[0] = lo;
            for (var k = 1; k < len; k++) {
              var ncarry = carry >>> 26;
              var rword = carry & 67108863;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                var i2 = k - j | 0;
                a = self2.words[i2] | 0;
                b = num.words[j] | 0;
                r2 = a * b + rword;
                ncarry += r2 / 67108864 | 0;
                rword = r2 & 67108863;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }
            return out.strip();
          }
          var comb10MulTo = function comb10MulTo2(self2, num, out) {
            var a = self2.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 8191;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 8191;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 8191;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 8191;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 8191;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 8191;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 8191;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 8191;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 8191;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 8191;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 8191;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 8191;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 8191;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 8191;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 8191;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 8191;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 8191;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 8191;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 8191;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 8191;
            var bh9 = b9 >>> 13;
            out.negative = self2.negative ^ num.negative;
            out.length = 19;
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = mid + Math.imul(ah0, bl0) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
            w0 &= 67108863;
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = mid + Math.imul(ah1, bl0) | 0;
            hi = Math.imul(ah1, bh0);
            lo = lo + Math.imul(al0, bl1) | 0;
            mid = mid + Math.imul(al0, bh1) | 0;
            mid = mid + Math.imul(ah0, bl1) | 0;
            hi = hi + Math.imul(ah0, bh1) | 0;
            var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
            w1 &= 67108863;
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = mid + Math.imul(ah2, bl0) | 0;
            hi = Math.imul(ah2, bh0);
            lo = lo + Math.imul(al1, bl1) | 0;
            mid = mid + Math.imul(al1, bh1) | 0;
            mid = mid + Math.imul(ah1, bl1) | 0;
            hi = hi + Math.imul(ah1, bh1) | 0;
            lo = lo + Math.imul(al0, bl2) | 0;
            mid = mid + Math.imul(al0, bh2) | 0;
            mid = mid + Math.imul(ah0, bl2) | 0;
            hi = hi + Math.imul(ah0, bh2) | 0;
            var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
            w2 &= 67108863;
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = mid + Math.imul(ah3, bl0) | 0;
            hi = Math.imul(ah3, bh0);
            lo = lo + Math.imul(al2, bl1) | 0;
            mid = mid + Math.imul(al2, bh1) | 0;
            mid = mid + Math.imul(ah2, bl1) | 0;
            hi = hi + Math.imul(ah2, bh1) | 0;
            lo = lo + Math.imul(al1, bl2) | 0;
            mid = mid + Math.imul(al1, bh2) | 0;
            mid = mid + Math.imul(ah1, bl2) | 0;
            hi = hi + Math.imul(ah1, bh2) | 0;
            lo = lo + Math.imul(al0, bl3) | 0;
            mid = mid + Math.imul(al0, bh3) | 0;
            mid = mid + Math.imul(ah0, bl3) | 0;
            hi = hi + Math.imul(ah0, bh3) | 0;
            var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
            w3 &= 67108863;
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = mid + Math.imul(ah4, bl0) | 0;
            hi = Math.imul(ah4, bh0);
            lo = lo + Math.imul(al3, bl1) | 0;
            mid = mid + Math.imul(al3, bh1) | 0;
            mid = mid + Math.imul(ah3, bl1) | 0;
            hi = hi + Math.imul(ah3, bh1) | 0;
            lo = lo + Math.imul(al2, bl2) | 0;
            mid = mid + Math.imul(al2, bh2) | 0;
            mid = mid + Math.imul(ah2, bl2) | 0;
            hi = hi + Math.imul(ah2, bh2) | 0;
            lo = lo + Math.imul(al1, bl3) | 0;
            mid = mid + Math.imul(al1, bh3) | 0;
            mid = mid + Math.imul(ah1, bl3) | 0;
            hi = hi + Math.imul(ah1, bh3) | 0;
            lo = lo + Math.imul(al0, bl4) | 0;
            mid = mid + Math.imul(al0, bh4) | 0;
            mid = mid + Math.imul(ah0, bl4) | 0;
            hi = hi + Math.imul(ah0, bh4) | 0;
            var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
            w4 &= 67108863;
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = mid + Math.imul(ah5, bl0) | 0;
            hi = Math.imul(ah5, bh0);
            lo = lo + Math.imul(al4, bl1) | 0;
            mid = mid + Math.imul(al4, bh1) | 0;
            mid = mid + Math.imul(ah4, bl1) | 0;
            hi = hi + Math.imul(ah4, bh1) | 0;
            lo = lo + Math.imul(al3, bl2) | 0;
            mid = mid + Math.imul(al3, bh2) | 0;
            mid = mid + Math.imul(ah3, bl2) | 0;
            hi = hi + Math.imul(ah3, bh2) | 0;
            lo = lo + Math.imul(al2, bl3) | 0;
            mid = mid + Math.imul(al2, bh3) | 0;
            mid = mid + Math.imul(ah2, bl3) | 0;
            hi = hi + Math.imul(ah2, bh3) | 0;
            lo = lo + Math.imul(al1, bl4) | 0;
            mid = mid + Math.imul(al1, bh4) | 0;
            mid = mid + Math.imul(ah1, bl4) | 0;
            hi = hi + Math.imul(ah1, bh4) | 0;
            lo = lo + Math.imul(al0, bl5) | 0;
            mid = mid + Math.imul(al0, bh5) | 0;
            mid = mid + Math.imul(ah0, bl5) | 0;
            hi = hi + Math.imul(ah0, bh5) | 0;
            var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
            w5 &= 67108863;
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = mid + Math.imul(ah6, bl0) | 0;
            hi = Math.imul(ah6, bh0);
            lo = lo + Math.imul(al5, bl1) | 0;
            mid = mid + Math.imul(al5, bh1) | 0;
            mid = mid + Math.imul(ah5, bl1) | 0;
            hi = hi + Math.imul(ah5, bh1) | 0;
            lo = lo + Math.imul(al4, bl2) | 0;
            mid = mid + Math.imul(al4, bh2) | 0;
            mid = mid + Math.imul(ah4, bl2) | 0;
            hi = hi + Math.imul(ah4, bh2) | 0;
            lo = lo + Math.imul(al3, bl3) | 0;
            mid = mid + Math.imul(al3, bh3) | 0;
            mid = mid + Math.imul(ah3, bl3) | 0;
            hi = hi + Math.imul(ah3, bh3) | 0;
            lo = lo + Math.imul(al2, bl4) | 0;
            mid = mid + Math.imul(al2, bh4) | 0;
            mid = mid + Math.imul(ah2, bl4) | 0;
            hi = hi + Math.imul(ah2, bh4) | 0;
            lo = lo + Math.imul(al1, bl5) | 0;
            mid = mid + Math.imul(al1, bh5) | 0;
            mid = mid + Math.imul(ah1, bl5) | 0;
            hi = hi + Math.imul(ah1, bh5) | 0;
            lo = lo + Math.imul(al0, bl6) | 0;
            mid = mid + Math.imul(al0, bh6) | 0;
            mid = mid + Math.imul(ah0, bl6) | 0;
            hi = hi + Math.imul(ah0, bh6) | 0;
            var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
            w6 &= 67108863;
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = mid + Math.imul(ah7, bl0) | 0;
            hi = Math.imul(ah7, bh0);
            lo = lo + Math.imul(al6, bl1) | 0;
            mid = mid + Math.imul(al6, bh1) | 0;
            mid = mid + Math.imul(ah6, bl1) | 0;
            hi = hi + Math.imul(ah6, bh1) | 0;
            lo = lo + Math.imul(al5, bl2) | 0;
            mid = mid + Math.imul(al5, bh2) | 0;
            mid = mid + Math.imul(ah5, bl2) | 0;
            hi = hi + Math.imul(ah5, bh2) | 0;
            lo = lo + Math.imul(al4, bl3) | 0;
            mid = mid + Math.imul(al4, bh3) | 0;
            mid = mid + Math.imul(ah4, bl3) | 0;
            hi = hi + Math.imul(ah4, bh3) | 0;
            lo = lo + Math.imul(al3, bl4) | 0;
            mid = mid + Math.imul(al3, bh4) | 0;
            mid = mid + Math.imul(ah3, bl4) | 0;
            hi = hi + Math.imul(ah3, bh4) | 0;
            lo = lo + Math.imul(al2, bl5) | 0;
            mid = mid + Math.imul(al2, bh5) | 0;
            mid = mid + Math.imul(ah2, bl5) | 0;
            hi = hi + Math.imul(ah2, bh5) | 0;
            lo = lo + Math.imul(al1, bl6) | 0;
            mid = mid + Math.imul(al1, bh6) | 0;
            mid = mid + Math.imul(ah1, bl6) | 0;
            hi = hi + Math.imul(ah1, bh6) | 0;
            lo = lo + Math.imul(al0, bl7) | 0;
            mid = mid + Math.imul(al0, bh7) | 0;
            mid = mid + Math.imul(ah0, bl7) | 0;
            hi = hi + Math.imul(ah0, bh7) | 0;
            var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
            w7 &= 67108863;
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = mid + Math.imul(ah8, bl0) | 0;
            hi = Math.imul(ah8, bh0);
            lo = lo + Math.imul(al7, bl1) | 0;
            mid = mid + Math.imul(al7, bh1) | 0;
            mid = mid + Math.imul(ah7, bl1) | 0;
            hi = hi + Math.imul(ah7, bh1) | 0;
            lo = lo + Math.imul(al6, bl2) | 0;
            mid = mid + Math.imul(al6, bh2) | 0;
            mid = mid + Math.imul(ah6, bl2) | 0;
            hi = hi + Math.imul(ah6, bh2) | 0;
            lo = lo + Math.imul(al5, bl3) | 0;
            mid = mid + Math.imul(al5, bh3) | 0;
            mid = mid + Math.imul(ah5, bl3) | 0;
            hi = hi + Math.imul(ah5, bh3) | 0;
            lo = lo + Math.imul(al4, bl4) | 0;
            mid = mid + Math.imul(al4, bh4) | 0;
            mid = mid + Math.imul(ah4, bl4) | 0;
            hi = hi + Math.imul(ah4, bh4) | 0;
            lo = lo + Math.imul(al3, bl5) | 0;
            mid = mid + Math.imul(al3, bh5) | 0;
            mid = mid + Math.imul(ah3, bl5) | 0;
            hi = hi + Math.imul(ah3, bh5) | 0;
            lo = lo + Math.imul(al2, bl6) | 0;
            mid = mid + Math.imul(al2, bh6) | 0;
            mid = mid + Math.imul(ah2, bl6) | 0;
            hi = hi + Math.imul(ah2, bh6) | 0;
            lo = lo + Math.imul(al1, bl7) | 0;
            mid = mid + Math.imul(al1, bh7) | 0;
            mid = mid + Math.imul(ah1, bl7) | 0;
            hi = hi + Math.imul(ah1, bh7) | 0;
            lo = lo + Math.imul(al0, bl8) | 0;
            mid = mid + Math.imul(al0, bh8) | 0;
            mid = mid + Math.imul(ah0, bl8) | 0;
            hi = hi + Math.imul(ah0, bh8) | 0;
            var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
            w8 &= 67108863;
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = mid + Math.imul(ah9, bl0) | 0;
            hi = Math.imul(ah9, bh0);
            lo = lo + Math.imul(al8, bl1) | 0;
            mid = mid + Math.imul(al8, bh1) | 0;
            mid = mid + Math.imul(ah8, bl1) | 0;
            hi = hi + Math.imul(ah8, bh1) | 0;
            lo = lo + Math.imul(al7, bl2) | 0;
            mid = mid + Math.imul(al7, bh2) | 0;
            mid = mid + Math.imul(ah7, bl2) | 0;
            hi = hi + Math.imul(ah7, bh2) | 0;
            lo = lo + Math.imul(al6, bl3) | 0;
            mid = mid + Math.imul(al6, bh3) | 0;
            mid = mid + Math.imul(ah6, bl3) | 0;
            hi = hi + Math.imul(ah6, bh3) | 0;
            lo = lo + Math.imul(al5, bl4) | 0;
            mid = mid + Math.imul(al5, bh4) | 0;
            mid = mid + Math.imul(ah5, bl4) | 0;
            hi = hi + Math.imul(ah5, bh4) | 0;
            lo = lo + Math.imul(al4, bl5) | 0;
            mid = mid + Math.imul(al4, bh5) | 0;
            mid = mid + Math.imul(ah4, bl5) | 0;
            hi = hi + Math.imul(ah4, bh5) | 0;
            lo = lo + Math.imul(al3, bl6) | 0;
            mid = mid + Math.imul(al3, bh6) | 0;
            mid = mid + Math.imul(ah3, bl6) | 0;
            hi = hi + Math.imul(ah3, bh6) | 0;
            lo = lo + Math.imul(al2, bl7) | 0;
            mid = mid + Math.imul(al2, bh7) | 0;
            mid = mid + Math.imul(ah2, bl7) | 0;
            hi = hi + Math.imul(ah2, bh7) | 0;
            lo = lo + Math.imul(al1, bl8) | 0;
            mid = mid + Math.imul(al1, bh8) | 0;
            mid = mid + Math.imul(ah1, bl8) | 0;
            hi = hi + Math.imul(ah1, bh8) | 0;
            lo = lo + Math.imul(al0, bl9) | 0;
            mid = mid + Math.imul(al0, bh9) | 0;
            mid = mid + Math.imul(ah0, bl9) | 0;
            hi = hi + Math.imul(ah0, bh9) | 0;
            var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
            w9 &= 67108863;
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = mid + Math.imul(ah9, bl1) | 0;
            hi = Math.imul(ah9, bh1);
            lo = lo + Math.imul(al8, bl2) | 0;
            mid = mid + Math.imul(al8, bh2) | 0;
            mid = mid + Math.imul(ah8, bl2) | 0;
            hi = hi + Math.imul(ah8, bh2) | 0;
            lo = lo + Math.imul(al7, bl3) | 0;
            mid = mid + Math.imul(al7, bh3) | 0;
            mid = mid + Math.imul(ah7, bl3) | 0;
            hi = hi + Math.imul(ah7, bh3) | 0;
            lo = lo + Math.imul(al6, bl4) | 0;
            mid = mid + Math.imul(al6, bh4) | 0;
            mid = mid + Math.imul(ah6, bl4) | 0;
            hi = hi + Math.imul(ah6, bh4) | 0;
            lo = lo + Math.imul(al5, bl5) | 0;
            mid = mid + Math.imul(al5, bh5) | 0;
            mid = mid + Math.imul(ah5, bl5) | 0;
            hi = hi + Math.imul(ah5, bh5) | 0;
            lo = lo + Math.imul(al4, bl6) | 0;
            mid = mid + Math.imul(al4, bh6) | 0;
            mid = mid + Math.imul(ah4, bl6) | 0;
            hi = hi + Math.imul(ah4, bh6) | 0;
            lo = lo + Math.imul(al3, bl7) | 0;
            mid = mid + Math.imul(al3, bh7) | 0;
            mid = mid + Math.imul(ah3, bl7) | 0;
            hi = hi + Math.imul(ah3, bh7) | 0;
            lo = lo + Math.imul(al2, bl8) | 0;
            mid = mid + Math.imul(al2, bh8) | 0;
            mid = mid + Math.imul(ah2, bl8) | 0;
            hi = hi + Math.imul(ah2, bh8) | 0;
            lo = lo + Math.imul(al1, bl9) | 0;
            mid = mid + Math.imul(al1, bh9) | 0;
            mid = mid + Math.imul(ah1, bl9) | 0;
            hi = hi + Math.imul(ah1, bh9) | 0;
            var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
            w10 &= 67108863;
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = mid + Math.imul(ah9, bl2) | 0;
            hi = Math.imul(ah9, bh2);
            lo = lo + Math.imul(al8, bl3) | 0;
            mid = mid + Math.imul(al8, bh3) | 0;
            mid = mid + Math.imul(ah8, bl3) | 0;
            hi = hi + Math.imul(ah8, bh3) | 0;
            lo = lo + Math.imul(al7, bl4) | 0;
            mid = mid + Math.imul(al7, bh4) | 0;
            mid = mid + Math.imul(ah7, bl4) | 0;
            hi = hi + Math.imul(ah7, bh4) | 0;
            lo = lo + Math.imul(al6, bl5) | 0;
            mid = mid + Math.imul(al6, bh5) | 0;
            mid = mid + Math.imul(ah6, bl5) | 0;
            hi = hi + Math.imul(ah6, bh5) | 0;
            lo = lo + Math.imul(al5, bl6) | 0;
            mid = mid + Math.imul(al5, bh6) | 0;
            mid = mid + Math.imul(ah5, bl6) | 0;
            hi = hi + Math.imul(ah5, bh6) | 0;
            lo = lo + Math.imul(al4, bl7) | 0;
            mid = mid + Math.imul(al4, bh7) | 0;
            mid = mid + Math.imul(ah4, bl7) | 0;
            hi = hi + Math.imul(ah4, bh7) | 0;
            lo = lo + Math.imul(al3, bl8) | 0;
            mid = mid + Math.imul(al3, bh8) | 0;
            mid = mid + Math.imul(ah3, bl8) | 0;
            hi = hi + Math.imul(ah3, bh8) | 0;
            lo = lo + Math.imul(al2, bl9) | 0;
            mid = mid + Math.imul(al2, bh9) | 0;
            mid = mid + Math.imul(ah2, bl9) | 0;
            hi = hi + Math.imul(ah2, bh9) | 0;
            var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
            w11 &= 67108863;
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = mid + Math.imul(ah9, bl3) | 0;
            hi = Math.imul(ah9, bh3);
            lo = lo + Math.imul(al8, bl4) | 0;
            mid = mid + Math.imul(al8, bh4) | 0;
            mid = mid + Math.imul(ah8, bl4) | 0;
            hi = hi + Math.imul(ah8, bh4) | 0;
            lo = lo + Math.imul(al7, bl5) | 0;
            mid = mid + Math.imul(al7, bh5) | 0;
            mid = mid + Math.imul(ah7, bl5) | 0;
            hi = hi + Math.imul(ah7, bh5) | 0;
            lo = lo + Math.imul(al6, bl6) | 0;
            mid = mid + Math.imul(al6, bh6) | 0;
            mid = mid + Math.imul(ah6, bl6) | 0;
            hi = hi + Math.imul(ah6, bh6) | 0;
            lo = lo + Math.imul(al5, bl7) | 0;
            mid = mid + Math.imul(al5, bh7) | 0;
            mid = mid + Math.imul(ah5, bl7) | 0;
            hi = hi + Math.imul(ah5, bh7) | 0;
            lo = lo + Math.imul(al4, bl8) | 0;
            mid = mid + Math.imul(al4, bh8) | 0;
            mid = mid + Math.imul(ah4, bl8) | 0;
            hi = hi + Math.imul(ah4, bh8) | 0;
            lo = lo + Math.imul(al3, bl9) | 0;
            mid = mid + Math.imul(al3, bh9) | 0;
            mid = mid + Math.imul(ah3, bl9) | 0;
            hi = hi + Math.imul(ah3, bh9) | 0;
            var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
            w12 &= 67108863;
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = mid + Math.imul(ah9, bl4) | 0;
            hi = Math.imul(ah9, bh4);
            lo = lo + Math.imul(al8, bl5) | 0;
            mid = mid + Math.imul(al8, bh5) | 0;
            mid = mid + Math.imul(ah8, bl5) | 0;
            hi = hi + Math.imul(ah8, bh5) | 0;
            lo = lo + Math.imul(al7, bl6) | 0;
            mid = mid + Math.imul(al7, bh6) | 0;
            mid = mid + Math.imul(ah7, bl6) | 0;
            hi = hi + Math.imul(ah7, bh6) | 0;
            lo = lo + Math.imul(al6, bl7) | 0;
            mid = mid + Math.imul(al6, bh7) | 0;
            mid = mid + Math.imul(ah6, bl7) | 0;
            hi = hi + Math.imul(ah6, bh7) | 0;
            lo = lo + Math.imul(al5, bl8) | 0;
            mid = mid + Math.imul(al5, bh8) | 0;
            mid = mid + Math.imul(ah5, bl8) | 0;
            hi = hi + Math.imul(ah5, bh8) | 0;
            lo = lo + Math.imul(al4, bl9) | 0;
            mid = mid + Math.imul(al4, bh9) | 0;
            mid = mid + Math.imul(ah4, bl9) | 0;
            hi = hi + Math.imul(ah4, bh9) | 0;
            var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
            w13 &= 67108863;
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = mid + Math.imul(ah9, bl5) | 0;
            hi = Math.imul(ah9, bh5);
            lo = lo + Math.imul(al8, bl6) | 0;
            mid = mid + Math.imul(al8, bh6) | 0;
            mid = mid + Math.imul(ah8, bl6) | 0;
            hi = hi + Math.imul(ah8, bh6) | 0;
            lo = lo + Math.imul(al7, bl7) | 0;
            mid = mid + Math.imul(al7, bh7) | 0;
            mid = mid + Math.imul(ah7, bl7) | 0;
            hi = hi + Math.imul(ah7, bh7) | 0;
            lo = lo + Math.imul(al6, bl8) | 0;
            mid = mid + Math.imul(al6, bh8) | 0;
            mid = mid + Math.imul(ah6, bl8) | 0;
            hi = hi + Math.imul(ah6, bh8) | 0;
            lo = lo + Math.imul(al5, bl9) | 0;
            mid = mid + Math.imul(al5, bh9) | 0;
            mid = mid + Math.imul(ah5, bl9) | 0;
            hi = hi + Math.imul(ah5, bh9) | 0;
            var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
            w14 &= 67108863;
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = mid + Math.imul(ah9, bl6) | 0;
            hi = Math.imul(ah9, bh6);
            lo = lo + Math.imul(al8, bl7) | 0;
            mid = mid + Math.imul(al8, bh7) | 0;
            mid = mid + Math.imul(ah8, bl7) | 0;
            hi = hi + Math.imul(ah8, bh7) | 0;
            lo = lo + Math.imul(al7, bl8) | 0;
            mid = mid + Math.imul(al7, bh8) | 0;
            mid = mid + Math.imul(ah7, bl8) | 0;
            hi = hi + Math.imul(ah7, bh8) | 0;
            lo = lo + Math.imul(al6, bl9) | 0;
            mid = mid + Math.imul(al6, bh9) | 0;
            mid = mid + Math.imul(ah6, bl9) | 0;
            hi = hi + Math.imul(ah6, bh9) | 0;
            var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
            w15 &= 67108863;
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = mid + Math.imul(ah9, bl7) | 0;
            hi = Math.imul(ah9, bh7);
            lo = lo + Math.imul(al8, bl8) | 0;
            mid = mid + Math.imul(al8, bh8) | 0;
            mid = mid + Math.imul(ah8, bl8) | 0;
            hi = hi + Math.imul(ah8, bh8) | 0;
            lo = lo + Math.imul(al7, bl9) | 0;
            mid = mid + Math.imul(al7, bh9) | 0;
            mid = mid + Math.imul(ah7, bl9) | 0;
            hi = hi + Math.imul(ah7, bh9) | 0;
            var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
            w16 &= 67108863;
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = mid + Math.imul(ah9, bl8) | 0;
            hi = Math.imul(ah9, bh8);
            lo = lo + Math.imul(al8, bl9) | 0;
            mid = mid + Math.imul(al8, bh9) | 0;
            mid = mid + Math.imul(ah8, bl9) | 0;
            hi = hi + Math.imul(ah8, bh9) | 0;
            var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
            w17 &= 67108863;
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = mid + Math.imul(ah9, bl9) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
            c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
            w18 &= 67108863;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }
          function bigMulTo(self2, num, out) {
            out.negative = num.negative ^ self2.negative;
            out.length = self2.length + num.length;
            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 67108863;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                var i2 = k - j;
                var a = self2.words[i2] | 0;
                var b = num.words[j] | 0;
                var r2 = a * b;
                var lo = r2 & 67108863;
                ncarry = ncarry + (r2 / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }
            return out.strip();
          }
          function jumboMulTo(self2, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self2, num, out);
          }
          BN.prototype.mulTo = function mulTo(num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }
            return res;
          };
          function FFTM(x, y) {
            this.x = x;
            this.y = y;
          }
          FFTM.prototype.makeRBT = function makeRBT(N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i2 = 0; i2 < N; i2++) {
              t[i2] = this.revBin(i2, l, N);
            }
            return t;
          };
          FFTM.prototype.revBin = function revBin(x, l, N) {
            if (x === 0 || x === N - 1)
              return x;
            var rb = 0;
            for (var i2 = 0; i2 < l; i2++) {
              rb |= (x & 1) << l - i2 - 1;
              x >>= 1;
            }
            return rb;
          };
          FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
            for (var i2 = 0; i2 < N; i2++) {
              rtws[i2] = rws[rbt[i2]];
              itws[i2] = iws[rbt[i2]];
            }
          };
          FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);
            for (var s2 = 1; s2 < N; s2 <<= 1) {
              var l = s2 << 1;
              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);
              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for (var j = 0; j < s2; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];
                  var ro = rtws[p + j + s2];
                  var io = itws[p + j + s2];
                  var rx = rtwdf_ * ro - itwdf_ * io;
                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;
                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;
                  rtws[p + j + s2] = re - ro;
                  itws[p + j + s2] = ie - io;
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };
          FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i2 = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i2++;
            }
            return 1 << i2 + 1 + odd;
          };
          FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
            if (N <= 1)
              return;
            for (var i2 = 0; i2 < N / 2; i2++) {
              var t = rws[i2];
              rws[i2] = rws[N - i2 - 1];
              rws[N - i2 - 1] = t;
              t = iws[i2];
              iws[i2] = -iws[N - i2 - 1];
              iws[N - i2 - 1] = -t;
            }
          };
          FFTM.prototype.normalize13b = function normalize13b(ws, N) {
            var carry = 0;
            for (var i2 = 0; i2 < N / 2; i2++) {
              var w = Math.round(ws[2 * i2 + 1] / N) * 8192 + Math.round(ws[2 * i2] / N) + carry;
              ws[i2] = w & 67108863;
              if (w < 67108864) {
                carry = 0;
              } else {
                carry = w / 67108864 | 0;
              }
            }
            return ws;
          };
          FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
            var carry = 0;
            for (var i2 = 0; i2 < len; i2++) {
              carry = carry + (ws[i2] | 0);
              rws[2 * i2] = carry & 8191;
              carry = carry >>> 13;
              rws[2 * i2 + 1] = carry & 8191;
              carry = carry >>> 13;
            }
            for (i2 = 2 * len; i2 < N; ++i2) {
              rws[i2] = 0;
            }
            assert2(carry === 0);
            assert2((carry & ~8191) === 0);
          };
          FFTM.prototype.stub = function stub(N) {
            var ph = new Array(N);
            for (var i2 = 0; i2 < N; i2++) {
              ph[i2] = 0;
            }
            return ph;
          };
          FFTM.prototype.mulp = function mulp(x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);
            var rbt = this.makeRBT(N);
            var _ = this.stub(N);
            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);
            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);
            var rmws = out.words;
            rmws.length = N;
            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);
            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);
            for (var i2 = 0; i2 < N; i2++) {
              var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
              iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
              rwst[i2] = rx;
            }
            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);
            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };
          BN.prototype.mul = function mul(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };
          BN.prototype.mulf = function mulf(num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };
          BN.prototype.imul = function imul(num) {
            return this.clone().mulTo(num, this);
          };
          BN.prototype.imuln = function imuln(num) {
            assert2(typeof num === "number");
            assert2(num < 67108864);
            var carry = 0;
            for (var i2 = 0; i2 < this.length; i2++) {
              var w = (this.words[i2] | 0) * num;
              var lo = (w & 67108863) + (carry & 67108863);
              carry >>= 26;
              carry += w / 67108864 | 0;
              carry += lo >>> 26;
              this.words[i2] = lo & 67108863;
            }
            if (carry !== 0) {
              this.words[i2] = carry;
              this.length++;
            }
            return this;
          };
          BN.prototype.muln = function muln(num) {
            return this.clone().imuln(num);
          };
          BN.prototype.sqr = function sqr() {
            return this.mul(this);
          };
          BN.prototype.isqr = function isqr() {
            return this.imul(this.clone());
          };
          BN.prototype.pow = function pow(num) {
            var w = toBitArray(num);
            if (w.length === 0)
              return new BN(1);
            var res = this;
            for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
              if (w[i2] !== 0)
                break;
            }
            if (++i2 < w.length) {
              for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
                if (w[i2] === 0)
                  continue;
                res = res.mul(q);
              }
            }
            return res;
          };
          BN.prototype.iushln = function iushln(bits) {
            assert2(typeof bits === "number" && bits >= 0);
            var r2 = bits % 26;
            var s2 = (bits - r2) / 26;
            var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
            var i2;
            if (r2 !== 0) {
              var carry = 0;
              for (i2 = 0; i2 < this.length; i2++) {
                var newCarry = this.words[i2] & carryMask;
                var c = (this.words[i2] | 0) - newCarry << r2;
                this.words[i2] = c | carry;
                carry = newCarry >>> 26 - r2;
              }
              if (carry) {
                this.words[i2] = carry;
                this.length++;
              }
            }
            if (s2 !== 0) {
              for (i2 = this.length - 1; i2 >= 0; i2--) {
                this.words[i2 + s2] = this.words[i2];
              }
              for (i2 = 0; i2 < s2; i2++) {
                this.words[i2] = 0;
              }
              this.length += s2;
            }
            return this.strip();
          };
          BN.prototype.ishln = function ishln(bits) {
            assert2(this.negative === 0);
            return this.iushln(bits);
          };
          BN.prototype.iushrn = function iushrn(bits, hint, extended) {
            assert2(typeof bits === "number" && bits >= 0);
            var h;
            if (hint) {
              h = (hint - hint % 26) / 26;
            } else {
              h = 0;
            }
            var r2 = bits % 26;
            var s2 = Math.min((bits - r2) / 26, this.length);
            var mask = 67108863 ^ 67108863 >>> r2 << r2;
            var maskedWords = extended;
            h -= s2;
            h = Math.max(0, h);
            if (maskedWords) {
              for (var i2 = 0; i2 < s2; i2++) {
                maskedWords.words[i2] = this.words[i2];
              }
              maskedWords.length = s2;
            }
            if (s2 === 0) {
            } else if (this.length > s2) {
              this.length -= s2;
              for (i2 = 0; i2 < this.length; i2++) {
                this.words[i2] = this.words[i2 + s2];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }
            var carry = 0;
            for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
              var word = this.words[i2] | 0;
              this.words[i2] = carry << 26 - r2 | word >>> r2;
              carry = word & mask;
            }
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }
            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }
            return this.strip();
          };
          BN.prototype.ishrn = function ishrn(bits, hint, extended) {
            assert2(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };
          BN.prototype.shln = function shln(bits) {
            return this.clone().ishln(bits);
          };
          BN.prototype.ushln = function ushln(bits) {
            return this.clone().iushln(bits);
          };
          BN.prototype.shrn = function shrn(bits) {
            return this.clone().ishrn(bits);
          };
          BN.prototype.ushrn = function ushrn(bits) {
            return this.clone().iushrn(bits);
          };
          BN.prototype.testn = function testn(bit) {
            assert2(typeof bit === "number" && bit >= 0);
            var r2 = bit % 26;
            var s2 = (bit - r2) / 26;
            var q = 1 << r2;
            if (this.length <= s2)
              return false;
            var w = this.words[s2];
            return !!(w & q);
          };
          BN.prototype.imaskn = function imaskn(bits) {
            assert2(typeof bits === "number" && bits >= 0);
            var r2 = bits % 26;
            var s2 = (bits - r2) / 26;
            assert2(this.negative === 0, "imaskn works only with positive numbers");
            if (this.length <= s2) {
              return this;
            }
            if (r2 !== 0) {
              s2++;
            }
            this.length = Math.min(s2, this.length);
            if (r2 !== 0) {
              var mask = 67108863 ^ 67108863 >>> r2 << r2;
              this.words[this.length - 1] &= mask;
            }
            return this.strip();
          };
          BN.prototype.maskn = function maskn(bits) {
            return this.clone().imaskn(bits);
          };
          BN.prototype.iaddn = function iaddn(num) {
            assert2(typeof num === "number");
            assert2(num < 67108864);
            if (num < 0)
              return this.isubn(-num);
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }
              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }
            return this._iaddn(num);
          };
          BN.prototype._iaddn = function _iaddn(num) {
            this.words[0] += num;
            for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
              this.words[i2] -= 67108864;
              if (i2 === this.length - 1) {
                this.words[i2 + 1] = 1;
              } else {
                this.words[i2 + 1]++;
              }
            }
            this.length = Math.max(this.length, i2 + 1);
            return this;
          };
          BN.prototype.isubn = function isubn(num) {
            assert2(typeof num === "number");
            assert2(num < 67108864);
            if (num < 0)
              return this.iaddn(-num);
            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }
            this.words[0] -= num;
            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
                this.words[i2] += 67108864;
                this.words[i2 + 1] -= 1;
              }
            }
            return this.strip();
          };
          BN.prototype.addn = function addn(num) {
            return this.clone().iaddn(num);
          };
          BN.prototype.subn = function subn(num) {
            return this.clone().isubn(num);
          };
          BN.prototype.iabs = function iabs() {
            this.negative = 0;
            return this;
          };
          BN.prototype.abs = function abs() {
            return this.clone().iabs();
          };
          BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
            var len = num.length + shift;
            var i2;
            this._expand(len);
            var w;
            var carry = 0;
            for (i2 = 0; i2 < num.length; i2++) {
              w = (this.words[i2 + shift] | 0) + carry;
              var right = (num.words[i2] | 0) * mul;
              w -= right & 67108863;
              carry = (w >> 26) - (right / 67108864 | 0);
              this.words[i2 + shift] = w & 67108863;
            }
            for (; i2 < this.length - shift; i2++) {
              w = (this.words[i2 + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i2 + shift] = w & 67108863;
            }
            if (carry === 0)
              return this.strip();
            assert2(carry === -1);
            carry = 0;
            for (i2 = 0; i2 < this.length; i2++) {
              w = -(this.words[i2] | 0) + carry;
              carry = w >> 26;
              this.words[i2] = w & 67108863;
            }
            this.negative = 1;
            return this.strip();
          };
          BN.prototype._wordDiv = function _wordDiv(num, mode) {
            var shift = this.length - num.length;
            var a = this.clone();
            var b = num;
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }
            var m = a.length - b.length;
            var q;
            if (mode !== "mod") {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i2 = 0; i2 < q.length; i2++) {
                q.words[i2] = 0;
              }
            }
            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }
            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
              qj = Math.min(qj / bhi | 0, 67108863);
              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();
            if (mode !== "div" && shift !== 0) {
              a.iushrn(shift);
            }
            return {
              div: q || null,
              mod: a
            };
          };
          BN.prototype.divmod = function divmod(num, mode, positive) {
            assert2(!num.isZero());
            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }
            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);
              if (mode !== "mod") {
                div = res.div.neg();
              }
              if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }
              return {
                div,
                mod
              };
            }
            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);
              if (mode !== "mod") {
                div = res.div.neg();
              }
              return {
                div,
                mod: res.mod
              };
            }
            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);
              if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }
              return {
                div: res.div,
                mod
              };
            }
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }
            if (num.length === 1) {
              if (mode === "div") {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }
              if (mode === "mod") {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }
              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }
            return this._wordDiv(num, mode);
          };
          BN.prototype.div = function div(num) {
            return this.divmod(num, "div", false).div;
          };
          BN.prototype.mod = function mod(num) {
            return this.divmod(num, "mod", false).mod;
          };
          BN.prototype.umod = function umod(num) {
            return this.divmod(num, "mod", true).mod;
          };
          BN.prototype.divRound = function divRound(num) {
            var dm = this.divmod(num);
            if (dm.mod.isZero())
              return dm.div;
            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);
            if (cmp < 0 || r2 === 1 && cmp === 0)
              return dm.div;
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };
          BN.prototype.modn = function modn(num) {
            assert2(num <= 67108863);
            var p = (1 << 26) % num;
            var acc = 0;
            for (var i2 = this.length - 1; i2 >= 0; i2--) {
              acc = (p * acc + (this.words[i2] | 0)) % num;
            }
            return acc;
          };
          BN.prototype.idivn = function idivn(num) {
            assert2(num <= 67108863);
            var carry = 0;
            for (var i2 = this.length - 1; i2 >= 0; i2--) {
              var w = (this.words[i2] | 0) + carry * 67108864;
              this.words[i2] = w / num | 0;
              carry = w % num;
            }
            return this.strip();
          };
          BN.prototype.divn = function divn(num) {
            return this.clone().idivn(num);
          };
          BN.prototype.egcd = function egcd(p) {
            assert2(p.negative === 0);
            assert2(!p.isZero());
            var x = this;
            var y = p.clone();
            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }
            var A = new BN(1);
            var B = new BN(0);
            var C = new BN(0);
            var D = new BN(1);
            var g = 0;
            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }
            var yp = y.clone();
            var xp = x.clone();
            while (!x.isZero()) {
              for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
                ;
              if (i2 > 0) {
                x.iushrn(i2);
                while (i2-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }
                  A.iushrn(1);
                  B.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }
                  C.iushrn(1);
                  D.iushrn(1);
                }
              }
              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }
            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };
          BN.prototype._invmp = function _invmp(p) {
            assert2(p.negative === 0);
            assert2(!p.isZero());
            var a = this;
            var b = p.clone();
            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }
            var x1 = new BN(1);
            var x2 = new BN(0);
            var delta = b.clone();
            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1)
                ;
              if (i2 > 0) {
                a.iushrn(i2);
                while (i2-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }
                  x1.iushrn(1);
                }
              }
              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                ;
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }
                  x2.iushrn(1);
                }
              }
              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }
            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }
            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }
            return res;
          };
          BN.prototype.gcd = function gcd(num) {
            if (this.isZero())
              return num.abs();
            if (num.isZero())
              return this.abs();
            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }
            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }
              var r2 = a.cmp(b);
              if (r2 < 0) {
                var t = a;
                a = b;
                b = t;
              } else if (r2 === 0 || b.cmpn(1) === 0) {
                break;
              }
              a.isub(b);
            } while (true);
            return b.iushln(shift);
          };
          BN.prototype.invm = function invm(num) {
            return this.egcd(num).a.umod(num);
          };
          BN.prototype.isEven = function isEven() {
            return (this.words[0] & 1) === 0;
          };
          BN.prototype.isOdd = function isOdd() {
            return (this.words[0] & 1) === 1;
          };
          BN.prototype.andln = function andln(num) {
            return this.words[0] & num;
          };
          BN.prototype.bincn = function bincn(bit) {
            assert2(typeof bit === "number");
            var r2 = bit % 26;
            var s2 = (bit - r2) / 26;
            var q = 1 << r2;
            if (this.length <= s2) {
              this._expand(s2 + 1);
              this.words[s2] |= q;
              return this;
            }
            var carry = q;
            for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
              var w = this.words[i2] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 67108863;
              this.words[i2] = w;
            }
            if (carry !== 0) {
              this.words[i2] = carry;
              this.length++;
            }
            return this;
          };
          BN.prototype.isZero = function isZero() {
            return this.length === 1 && this.words[0] === 0;
          };
          BN.prototype.cmpn = function cmpn(num) {
            var negative = num < 0;
            if (this.negative !== 0 && !negative)
              return -1;
            if (this.negative === 0 && negative)
              return 1;
            this.strip();
            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }
              assert2(num <= 67108863, "Number is too big");
              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0)
              return -res | 0;
            return res;
          };
          BN.prototype.cmp = function cmp(num) {
            if (this.negative !== 0 && num.negative === 0)
              return -1;
            if (this.negative === 0 && num.negative !== 0)
              return 1;
            var res = this.ucmp(num);
            if (this.negative !== 0)
              return -res | 0;
            return res;
          };
          BN.prototype.ucmp = function ucmp(num) {
            if (this.length > num.length)
              return 1;
            if (this.length < num.length)
              return -1;
            var res = 0;
            for (var i2 = this.length - 1; i2 >= 0; i2--) {
              var a = this.words[i2] | 0;
              var b = num.words[i2] | 0;
              if (a === b)
                continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };
          BN.prototype.gtn = function gtn(num) {
            return this.cmpn(num) === 1;
          };
          BN.prototype.gt = function gt(num) {
            return this.cmp(num) === 1;
          };
          BN.prototype.gten = function gten(num) {
            return this.cmpn(num) >= 0;
          };
          BN.prototype.gte = function gte(num) {
            return this.cmp(num) >= 0;
          };
          BN.prototype.ltn = function ltn(num) {
            return this.cmpn(num) === -1;
          };
          BN.prototype.lt = function lt(num) {
            return this.cmp(num) === -1;
          };
          BN.prototype.lten = function lten(num) {
            return this.cmpn(num) <= 0;
          };
          BN.prototype.lte = function lte(num) {
            return this.cmp(num) <= 0;
          };
          BN.prototype.eqn = function eqn(num) {
            return this.cmpn(num) === 0;
          };
          BN.prototype.eq = function eq(num) {
            return this.cmp(num) === 0;
          };
          BN.red = function red(num) {
            return new Red(num);
          };
          BN.prototype.toRed = function toRed(ctx) {
            assert2(!this.red, "Already a number in reduction context");
            assert2(this.negative === 0, "red works only with positives");
            return ctx.convertTo(this)._forceRed(ctx);
          };
          BN.prototype.fromRed = function fromRed() {
            assert2(this.red, "fromRed works only with numbers in reduction context");
            return this.red.convertFrom(this);
          };
          BN.prototype._forceRed = function _forceRed(ctx) {
            this.red = ctx;
            return this;
          };
          BN.prototype.forceRed = function forceRed(ctx) {
            assert2(!this.red, "Already a number in reduction context");
            return this._forceRed(ctx);
          };
          BN.prototype.redAdd = function redAdd(num) {
            assert2(this.red, "redAdd works only with red numbers");
            return this.red.add(this, num);
          };
          BN.prototype.redIAdd = function redIAdd(num) {
            assert2(this.red, "redIAdd works only with red numbers");
            return this.red.iadd(this, num);
          };
          BN.prototype.redSub = function redSub(num) {
            assert2(this.red, "redSub works only with red numbers");
            return this.red.sub(this, num);
          };
          BN.prototype.redISub = function redISub(num) {
            assert2(this.red, "redISub works only with red numbers");
            return this.red.isub(this, num);
          };
          BN.prototype.redShl = function redShl(num) {
            assert2(this.red, "redShl works only with red numbers");
            return this.red.shl(this, num);
          };
          BN.prototype.redMul = function redMul(num) {
            assert2(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };
          BN.prototype.redIMul = function redIMul(num) {
            assert2(this.red, "redMul works only with red numbers");
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };
          BN.prototype.redSqr = function redSqr() {
            assert2(this.red, "redSqr works only with red numbers");
            this.red._verify1(this);
            return this.red.sqr(this);
          };
          BN.prototype.redISqr = function redISqr() {
            assert2(this.red, "redISqr works only with red numbers");
            this.red._verify1(this);
            return this.red.isqr(this);
          };
          BN.prototype.redSqrt = function redSqrt() {
            assert2(this.red, "redSqrt works only with red numbers");
            this.red._verify1(this);
            return this.red.sqrt(this);
          };
          BN.prototype.redInvm = function redInvm() {
            assert2(this.red, "redInvm works only with red numbers");
            this.red._verify1(this);
            return this.red.invm(this);
          };
          BN.prototype.redNeg = function redNeg() {
            assert2(this.red, "redNeg works only with red numbers");
            this.red._verify1(this);
            return this.red.neg(this);
          };
          BN.prototype.redPow = function redPow(num) {
            assert2(this.red && !num.red, "redPow(normalNum)");
            this.red._verify1(this);
            return this.red.pow(this, num);
          };
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };
          function MPrime(name2, p) {
            this.name = name2;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);
            this.tmp = this._tmp();
          }
          MPrime.prototype._tmp = function _tmp() {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };
          MPrime.prototype.ireduce = function ireduce(num) {
            var r2 = num;
            var rlen;
            do {
              this.split(r2, this.tmp);
              r2 = this.imulK(r2);
              r2 = r2.iadd(this.tmp);
              rlen = r2.bitLength();
            } while (rlen > this.n);
            var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
            if (cmp === 0) {
              r2.words[0] = 0;
              r2.length = 1;
            } else if (cmp > 0) {
              r2.isub(this.p);
            } else {
              if (r2.strip !== void 0) {
                r2.strip();
              } else {
                r2._strip();
              }
            }
            return r2;
          };
          MPrime.prototype.split = function split(input, out) {
            input.iushrn(this.n, 0, out);
          };
          MPrime.prototype.imulK = function imulK(num) {
            return num.imul(this.k);
          };
          function K256() {
            MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
          }
          inherits(K256, MPrime);
          K256.prototype.split = function split(input, output) {
            var mask = 4194303;
            var outLen = Math.min(input.length, 9);
            for (var i2 = 0; i2 < outLen; i2++) {
              output.words[i2] = input.words[i2];
            }
            output.length = outLen;
            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;
            for (i2 = 10; i2 < input.length; i2++) {
              var next = input.words[i2] | 0;
              input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
              prev = next;
            }
            prev >>>= 22;
            input.words[i2 - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };
          K256.prototype.imulK = function imulK(num) {
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;
            var lo = 0;
            for (var i2 = 0; i2 < num.length; i2++) {
              var w = num.words[i2] | 0;
              lo += w * 977;
              num.words[i2] = lo & 67108863;
              lo = w * 64 + (lo / 67108864 | 0);
            }
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };
          function P224() {
            MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
          }
          inherits(P224, MPrime);
          function P192() {
            MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
          }
          inherits(P192, MPrime);
          function P25519() {
            MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
          }
          inherits(P25519, MPrime);
          P25519.prototype.imulK = function imulK(num) {
            var carry = 0;
            for (var i2 = 0; i2 < num.length; i2++) {
              var hi = (num.words[i2] | 0) * 19 + carry;
              var lo = hi & 67108863;
              hi >>>= 26;
              num.words[i2] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };
          BN._prime = function prime(name2) {
            if (primes[name2])
              return primes[name2];
            var prime2;
            if (name2 === "k256") {
              prime2 = new K256();
            } else if (name2 === "p224") {
              prime2 = new P224();
            } else if (name2 === "p192") {
              prime2 = new P192();
            } else if (name2 === "p25519") {
              prime2 = new P25519();
            } else {
              throw new Error("Unknown prime " + name2);
            }
            primes[name2] = prime2;
            return prime2;
          };
          function Red(m) {
            if (typeof m === "string") {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert2(m.gtn(1), "modulus must be greater than 1");
              this.m = m;
              this.prime = null;
            }
          }
          Red.prototype._verify1 = function _verify1(a) {
            assert2(a.negative === 0, "red works only with positives");
            assert2(a.red, "red works only with red numbers");
          };
          Red.prototype._verify2 = function _verify2(a, b) {
            assert2((a.negative | b.negative) === 0, "red works only with positives");
            assert2(a.red && a.red === b.red, "red works only with red numbers");
          };
          Red.prototype.imod = function imod(a) {
            if (this.prime)
              return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };
          Red.prototype.neg = function neg(a) {
            if (a.isZero()) {
              return a.clone();
            }
            return this.m.sub(a)._forceRed(this);
          };
          Red.prototype.add = function add(a, b) {
            this._verify2(a, b);
            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.iadd = function iadd(a, b) {
            this._verify2(a, b);
            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };
          Red.prototype.sub = function sub(a, b) {
            this._verify2(a, b);
            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Red.prototype.isub = function isub(a, b) {
            this._verify2(a, b);
            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };
          Red.prototype.shl = function shl(a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };
          Red.prototype.imul = function imul(a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };
          Red.prototype.mul = function mul(a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };
          Red.prototype.isqr = function isqr(a) {
            return this.imul(a, a.clone());
          };
          Red.prototype.sqr = function sqr(a) {
            return this.mul(a, a);
          };
          Red.prototype.sqrt = function sqrt(a) {
            if (a.isZero())
              return a.clone();
            var mod3 = this.m.andln(3);
            assert2(mod3 % 2 === 1);
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }
            var q = this.m.subn(1);
            var s2 = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s2++;
              q.iushrn(1);
            }
            assert2(!q.isZero());
            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);
            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }
            var c = this.pow(z, q);
            var r2 = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s2;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
                tmp = tmp.redSqr();
              }
              assert2(i2 < m);
              var b = this.pow(c, new BN(1).iushln(m - i2 - 1));
              r2 = r2.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i2;
            }
            return r2;
          };
          Red.prototype.invm = function invm(a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };
          Red.prototype.pow = function pow(a, num) {
            if (num.isZero())
              return new BN(1).toRed(this);
            if (num.cmpn(1) === 0)
              return a.clone();
            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i2 = 2; i2 < wnd.length; i2++) {
              wnd[i2] = this.mul(wnd[i2 - 1], a);
            }
            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }
            for (i2 = num.length - 1; i2 >= 0; i2--) {
              var word = num.words[i2];
              for (var j = start - 1; j >= 0; j--) {
                var bit = word >> j & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }
                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i2 !== 0 || j !== 0))
                  continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }
            return res;
          };
          Red.prototype.convertTo = function convertTo(num) {
            var r2 = num.umod(this.m);
            return r2 === num ? r2.clone() : r2;
          };
          Red.prototype.convertFrom = function convertFrom(num) {
            var res = num.clone();
            res.red = null;
            return res;
          };
          BN.mont = function mont2(num) {
            return new Mont(num);
          };
          function Mont(m) {
            Red.call(this, m);
            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - this.shift % 26;
            }
            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);
            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);
          Mont.prototype.convertTo = function convertTo(num) {
            return this.imod(num.ushln(this.shift));
          };
          Mont.prototype.convertFrom = function convertFrom(num) {
            var r2 = this.imod(num.mul(this.rinv));
            r2.red = null;
            return r2;
          };
          Mont.prototype.imul = function imul(a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }
            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.mul = function mul(a, b) {
            if (a.isZero() || b.isZero())
              return new BN(0)._forceRed(this);
            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }
            return res._forceRed(this);
          };
          Mont.prototype.invm = function invm(a) {
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })(module2, commonjsGlobal);
      });
      var bn_1 = bn.BN;
      var _version = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "logger/5.0.2";
      });
      var _version$1 = unwrapExports(_version);
      var _version_1 = _version.version;
      var lib = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var _permanentCensorErrors = false;
        var _censorErrors = false;
        var LogLevels = {debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5};
        var _logLevel = LogLevels["default"];
        var _globalLogger = null;
        function _checkNormalize() {
          try {
            var missing_1 = [];
            ["NFD", "NFC", "NFKD", "NFKC"].forEach(function(form) {
              try {
                if ("test".normalize(form) !== "test") {
                  throw new Error("bad normalize");
                }
                ;
              } catch (error) {
                missing_1.push(form);
              }
            });
            if (missing_1.length) {
              throw new Error("missing " + missing_1.join(", "));
            }
            if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
              throw new Error("broken implementation");
            }
          } catch (error) {
            return error.message;
          }
          return null;
        }
        var _normalizeError = _checkNormalize();
        var LogLevel;
        (function(LogLevel2) {
          LogLevel2["DEBUG"] = "DEBUG";
          LogLevel2["INFO"] = "INFO";
          LogLevel2["WARNING"] = "WARNING";
          LogLevel2["ERROR"] = "ERROR";
          LogLevel2["OFF"] = "OFF";
        })(LogLevel = exports3.LogLevel || (exports3.LogLevel = {}));
        var ErrorCode;
        (function(ErrorCode2) {
          ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
          ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
          ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
          ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
          ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
          ErrorCode2["TIMEOUT"] = "TIMEOUT";
          ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
          ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
          ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
          ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
          ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
          ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
          ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
          ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
          ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
          ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
          ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        })(ErrorCode = exports3.ErrorCode || (exports3.ErrorCode = {}));
        ;
        var Logger = function() {
          function Logger2(version2) {
            Object.defineProperty(this, "version", {
              enumerable: true,
              value: version2,
              writable: false
            });
          }
          Logger2.prototype._log = function(logLevel, args) {
            var level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
              this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
              return;
            }
            console.log.apply(console, args);
          };
          Logger2.prototype.debug = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            this._log(Logger2.levels.DEBUG, args);
          };
          Logger2.prototype.info = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            this._log(Logger2.levels.INFO, args);
          };
          Logger2.prototype.warn = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            this._log(Logger2.levels.WARNING, args);
          };
          Logger2.prototype.makeError = function(message, code, params) {
            if (_censorErrors) {
              return this.makeError("censored error", code, {});
            }
            if (!code) {
              code = Logger2.errors.UNKNOWN_ERROR;
            }
            if (!params) {
              params = {};
            }
            var messageDetails = [];
            Object.keys(params).forEach(function(key2) {
              try {
                messageDetails.push(key2 + "=" + JSON.stringify(params[key2]));
              } catch (error2) {
                messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
              }
            });
            messageDetails.push("code=" + code);
            messageDetails.push("version=" + this.version);
            var reason = message;
            if (messageDetails.length) {
              message += " (" + messageDetails.join(", ") + ")";
            }
            var error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function(key2) {
              error[key2] = params[key2];
            });
            return error;
          };
          Logger2.prototype.throwError = function(message, code, params) {
            throw this.makeError(message, code, params);
          };
          Logger2.prototype.throwArgumentError = function(message, name2, value) {
            return this.throwError(message, Logger2.errors.INVALID_ARGUMENT, {
              argument: name2,
              value
            });
          };
          Logger2.prototype.checkNormalize = function(message) {
            if (message == null) {
              message = "platform missing String.prototype.normalize";
            }
            if (_normalizeError) {
              this.throwError("platform missing String.prototype.normalize", Logger2.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize",
                form: _normalizeError
              });
            }
          };
          Logger2.prototype.checkSafeUint53 = function(value, message) {
            if (typeof value !== "number") {
              return;
            }
            if (message == null) {
              message = "value not safe";
            }
            if (value < 0 || value >= 9007199254740991) {
              this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "out-of-safe-range",
                value
              });
            }
            if (value % 1) {
              this.throwError(message, Logger2.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "non-integer",
                value
              });
            }
          };
          Logger2.prototype.checkArgumentCount = function(count, expectedCount, message) {
            if (message) {
              message = ": " + message;
            } else {
              message = "";
            }
            if (count < expectedCount) {
              this.throwError("missing argument" + message, Logger2.errors.MISSING_ARGUMENT, {
                count,
                expectedCount
              });
            }
            if (count > expectedCount) {
              this.throwError("too many arguments" + message, Logger2.errors.UNEXPECTED_ARGUMENT, {
                count,
                expectedCount
              });
            }
          };
          Logger2.prototype.checkNew = function(target, kind) {
            if (target === Object || target == null) {
              this.throwError("missing new", Logger2.errors.MISSING_NEW, {name: kind.name});
            }
          };
          Logger2.prototype.checkAbstract = function(target, kind) {
            if (target === kind) {
              this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger2.errors.UNSUPPORTED_OPERATION, {name: target.name, operation: "new"});
            } else if (target === Object || target == null) {
              this.throwError("missing new", Logger2.errors.MISSING_NEW, {name: kind.name});
            }
          };
          Logger2.globalLogger = function() {
            if (!_globalLogger) {
              _globalLogger = new Logger2(_version.version);
            }
            return _globalLogger;
          };
          Logger2.setCensorship = function(censorship, permanent) {
            if (!censorship && permanent) {
              this.globalLogger().throwError("cannot permanently disable censorship", Logger2.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              });
            }
            if (_permanentCensorErrors) {
              if (!censorship) {
                return;
              }
              this.globalLogger().throwError("error censorship permanent", Logger2.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
          };
          Logger2.setLogLevel = function(logLevel) {
            var level = LogLevels[logLevel];
            if (level == null) {
              Logger2.globalLogger().warn("invalid log level - " + logLevel);
              return;
            }
            _logLevel = level;
          };
          Logger2.errors = ErrorCode;
          Logger2.levels = LogLevel;
          return Logger2;
        }();
        exports3.Logger = Logger;
      });
      var index = unwrapExports(lib);
      var lib_1 = lib.LogLevel;
      var lib_2 = lib.ErrorCode;
      var lib_3 = lib.Logger;
      var _version$2 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "bytes/5.0.2";
      });
      var _version$3 = unwrapExports(_version$2);
      var _version_1$1 = _version$2.version;
      var lib$1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$2.version);
        function isHexable(value) {
          return !!value.toHexString;
        }
        function addSlice(array2) {
          if (array2.slice) {
            return array2;
          }
          array2.slice = function() {
            var args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array2, args)));
          };
          return array2;
        }
        function isBytesLike(value) {
          return isHexString(value) && !(value.length % 2) || isBytes(value);
        }
        exports3.isBytesLike = isBytesLike;
        function isBytes(value) {
          if (value == null) {
            return false;
          }
          if (value.constructor === Uint8Array) {
            return true;
          }
          if (typeof value === "string") {
            return false;
          }
          if (value.length == null) {
            return false;
          }
          for (var i2 = 0; i2 < value.length; i2++) {
            var v = value[i2];
            if (v < 0 || v >= 256 || v % 1) {
              return false;
            }
          }
          return true;
        }
        exports3.isBytes = isBytes;
        function arrayify(value, options) {
          if (!options) {
            options = {};
          }
          if (typeof value === "number") {
            logger.checkSafeUint53(value, "invalid arrayify value");
            var result = [];
            while (value) {
              result.unshift(value & 255);
              value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
              result.push(0);
            }
            return addSlice(new Uint8Array(result));
          }
          if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (isHexable(value)) {
            value = value.toHexString();
          }
          if (isHexString(value)) {
            var hex = value.substring(2);
            if (hex.length % 2) {
              if (options.hexPad === "left") {
                hex = "0x0" + hex.substring(2);
              } else if (options.hexPad === "right") {
                hex += "0";
              } else {
                logger.throwArgumentError("hex data is odd-length", "value", value);
              }
            }
            var result = [];
            for (var i2 = 0; i2 < hex.length; i2 += 2) {
              result.push(parseInt(hex.substring(i2, i2 + 2), 16));
            }
            return addSlice(new Uint8Array(result));
          }
          if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
          }
          return logger.throwArgumentError("invalid arrayify value", "value", value);
        }
        exports3.arrayify = arrayify;
        function concat(items) {
          var objects = items.map(function(item) {
            return arrayify(item);
          });
          var length = objects.reduce(function(accum, item) {
            return accum + item.length;
          }, 0);
          var result = new Uint8Array(length);
          objects.reduce(function(offset, object) {
            result.set(object, offset);
            return offset + object.length;
          }, 0);
          return addSlice(result);
        }
        exports3.concat = concat;
        function stripZeros(value) {
          var result = arrayify(value);
          if (result.length === 0) {
            return result;
          }
          var start = 0;
          while (start < result.length && result[start] === 0) {
            start++;
          }
          if (start) {
            result = result.slice(start);
          }
          return result;
        }
        exports3.stripZeros = stripZeros;
        function zeroPad(value, length) {
          value = arrayify(value);
          if (value.length > length) {
            logger.throwArgumentError("value out of range", "value", arguments[0]);
          }
          var result = new Uint8Array(length);
          result.set(value, length - value.length);
          return addSlice(result);
        }
        exports3.zeroPad = zeroPad;
        function isHexString(value, length) {
          if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
          }
          if (length && value.length !== 2 + 2 * length) {
            return false;
          }
          return true;
        }
        exports3.isHexString = isHexString;
        var HexCharacters = "0123456789abcdef";
        function hexlify(value, options) {
          if (!options) {
            options = {};
          }
          if (typeof value === "number") {
            logger.checkSafeUint53(value, "invalid hexlify value");
            var hex = "";
            while (value) {
              hex = HexCharacters[value & 15] + hex;
              value = Math.floor(value / 16);
            }
            if (hex.length) {
              if (hex.length % 2) {
                hex = "0" + hex;
              }
              return "0x" + hex;
            }
            return "0x00";
          }
          if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (isHexable(value)) {
            return value.toHexString();
          }
          if (isHexString(value)) {
            if (value.length % 2) {
              if (options.hexPad === "left") {
                value = "0x0" + value.substring(2);
              } else if (options.hexPad === "right") {
                value += "0";
              } else {
                logger.throwArgumentError("hex data is odd-length", "value", value);
              }
            }
            return value.toLowerCase();
          }
          if (isBytes(value)) {
            var result = "0x";
            for (var i2 = 0; i2 < value.length; i2++) {
              var v = value[i2];
              result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
            }
            return result;
          }
          return logger.throwArgumentError("invalid hexlify value", "value", value);
        }
        exports3.hexlify = hexlify;
        function hexDataLength(data) {
          if (typeof data !== "string") {
            data = hexlify(data);
          } else if (!isHexString(data) || data.length % 2) {
            return null;
          }
          return (data.length - 2) / 2;
        }
        exports3.hexDataLength = hexDataLength;
        function hexDataSlice(data, offset, endOffset) {
          if (typeof data !== "string") {
            data = hexlify(data);
          } else if (!isHexString(data) || data.length % 2) {
            logger.throwArgumentError("invalid hexData", "value", data);
          }
          offset = 2 + 2 * offset;
          if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
          }
          return "0x" + data.substring(offset);
        }
        exports3.hexDataSlice = hexDataSlice;
        function hexConcat(items) {
          var result = "0x";
          items.forEach(function(item) {
            result += hexlify(item).substring(2);
          });
          return result;
        }
        exports3.hexConcat = hexConcat;
        function hexValue(value) {
          var trimmed = hexStripZeros(hexlify(value, {hexPad: "left"}));
          if (trimmed === "0x") {
            return "0x0";
          }
          return trimmed;
        }
        exports3.hexValue = hexValue;
        function hexStripZeros(value) {
          if (typeof value !== "string") {
            value = hexlify(value);
          }
          if (!isHexString(value)) {
            logger.throwArgumentError("invalid hex string", "value", value);
          }
          value = value.substring(2);
          var offset = 0;
          while (offset < value.length && value[offset] === "0") {
            offset++;
          }
          return "0x" + value.substring(offset);
        }
        exports3.hexStripZeros = hexStripZeros;
        function hexZeroPad(value, length) {
          if (typeof value !== "string") {
            value = hexlify(value);
          } else if (!isHexString(value)) {
            logger.throwArgumentError("invalid hex string", "value", value);
          }
          if (value.length > 2 * length + 2) {
            logger.throwArgumentError("value out of range", "value", arguments[1]);
          }
          while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
          }
          return value;
        }
        exports3.hexZeroPad = hexZeroPad;
        function splitSignature(signature2) {
          var result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0
          };
          if (isBytesLike(signature2)) {
            var bytes2 = arrayify(signature2);
            if (bytes2.length !== 65) {
              logger.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature2);
            }
            result.r = hexlify(bytes2.slice(0, 32));
            result.s = hexlify(bytes2.slice(32, 64));
            result.v = bytes2[64];
            if (result.v < 27) {
              if (result.v === 0 || result.v === 1) {
                result.v += 27;
              } else {
                logger.throwArgumentError("signature invalid v byte", "signature", signature2);
              }
            }
            result.recoveryParam = 1 - result.v % 2;
            if (result.recoveryParam) {
              bytes2[32] |= 128;
            }
            result._vs = hexlify(bytes2.slice(32, 64));
          } else {
            result.r = signature2.r;
            result.s = signature2.s;
            result.v = signature2.v;
            result.recoveryParam = signature2.recoveryParam;
            result._vs = signature2._vs;
            if (result._vs != null) {
              var vs_1 = zeroPad(arrayify(result._vs), 32);
              result._vs = hexlify(vs_1);
              var recoveryParam = vs_1[0] >= 128 ? 1 : 0;
              if (result.recoveryParam == null) {
                result.recoveryParam = recoveryParam;
              } else if (result.recoveryParam !== recoveryParam) {
                logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
              }
              vs_1[0] &= 127;
              var s2 = hexlify(vs_1);
              if (result.s == null) {
                result.s = s2;
              } else if (result.s !== s2) {
                logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
              }
            }
            if (result.recoveryParam == null) {
              if (result.v == null) {
                logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
              } else {
                result.recoveryParam = 1 - result.v % 2;
              }
            } else {
              if (result.v == null) {
                result.v = 27 + result.recoveryParam;
              } else if (result.recoveryParam !== 1 - result.v % 2) {
                logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
              }
            }
            if (result.r == null || !isHexString(result.r)) {
              logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
            } else {
              result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
              logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
            } else {
              result.s = hexZeroPad(result.s, 32);
            }
            var vs = arrayify(result.s);
            if (vs[0] >= 128) {
              logger.throwArgumentError("signature s out of range", "signature", signature2);
            }
            if (result.recoveryParam) {
              vs[0] |= 128;
            }
            var _vs = hexlify(vs);
            if (result._vs) {
              if (!isHexString(result._vs)) {
                logger.throwArgumentError("signature invalid _vs", "signature", signature2);
              }
              result._vs = hexZeroPad(result._vs, 32);
            }
            if (result._vs == null) {
              result._vs = _vs;
            } else if (result._vs !== _vs) {
              logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
            }
          }
          return result;
        }
        exports3.splitSignature = splitSignature;
        function joinSignature(signature2) {
          signature2 = splitSignature(signature2);
          return hexlify(concat([
            signature2.r,
            signature2.s,
            signature2.recoveryParam ? "0x1c" : "0x1b"
          ]));
        }
        exports3.joinSignature = joinSignature;
      });
      var index$1 = unwrapExports(lib$1);
      var lib_1$1 = lib$1.isBytesLike;
      var lib_2$1 = lib$1.isBytes;
      var lib_3$1 = lib$1.arrayify;
      var lib_4 = lib$1.concat;
      var lib_5 = lib$1.stripZeros;
      var lib_6 = lib$1.zeroPad;
      var lib_7 = lib$1.isHexString;
      var lib_8 = lib$1.hexlify;
      var lib_9 = lib$1.hexDataLength;
      var lib_10 = lib$1.hexDataSlice;
      var lib_11 = lib$1.hexConcat;
      var lib_12 = lib$1.hexValue;
      var lib_13 = lib$1.hexStripZeros;
      var lib_14 = lib$1.hexZeroPad;
      var lib_15 = lib$1.splitSignature;
      var lib_16 = lib$1.joinSignature;
      var _version$4 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "bignumber/5.0.4";
      });
      var _version$5 = unwrapExports(_version$4);
      var _version_1$2 = _version$4.version;
      var bignumber = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$4.version);
        var _constructorGuard = {};
        var MAX_SAFE = 9007199254740991;
        function isBigNumberish(value) {
          return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || lib$1.isHexString(value) || typeof value === "bigint" || lib$1.isBytes(value));
        }
        exports3.isBigNumberish = isBigNumberish;
        var BigNumber = function() {
          function BigNumber2(constructorGuard, hex) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, BigNumber2);
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("cannot call constructor directly; use BigNumber.from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new (BigNumber)"
              });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
          }
          BigNumber2.prototype.fromTwos = function(value) {
            return toBigNumber(toBN(this).fromTwos(value));
          };
          BigNumber2.prototype.toTwos = function(value) {
            return toBigNumber(toBN(this).toTwos(value));
          };
          BigNumber2.prototype.abs = function() {
            if (this._hex[0] === "-") {
              return BigNumber2.from(this._hex.substring(1));
            }
            return this;
          };
          BigNumber2.prototype.add = function(other) {
            return toBigNumber(toBN(this).add(toBN(other)));
          };
          BigNumber2.prototype.sub = function(other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
          };
          BigNumber2.prototype.div = function(other) {
            var o = BigNumber2.from(other);
            if (o.isZero()) {
              throwFault("division by zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
          };
          BigNumber2.prototype.mul = function(other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
          };
          BigNumber2.prototype.mod = function(other) {
            var value = toBN(other);
            if (value.isNeg()) {
              throwFault("cannot modulo negative values", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
          };
          BigNumber2.prototype.pow = function(other) {
            var value = toBN(other);
            if (value.isNeg()) {
              throwFault("cannot raise to negative values", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
          };
          BigNumber2.prototype.and = function(other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'and' negative values", "and");
            }
            return toBigNumber(toBN(this).and(value));
          };
          BigNumber2.prototype.or = function(other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'or' negative values", "or");
            }
            return toBigNumber(toBN(this).or(value));
          };
          BigNumber2.prototype.xor = function(other) {
            var value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'xor' negative values", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
          };
          BigNumber2.prototype.mask = function(value) {
            if (this.isNegative() || value < 0) {
              throwFault("cannot mask negative values", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
          };
          BigNumber2.prototype.shl = function(value) {
            if (this.isNegative() || value < 0) {
              throwFault("cannot shift negative values", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
          };
          BigNumber2.prototype.shr = function(value) {
            if (this.isNegative() || value < 0) {
              throwFault("cannot shift negative values", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
          };
          BigNumber2.prototype.eq = function(other) {
            return toBN(this).eq(toBN(other));
          };
          BigNumber2.prototype.lt = function(other) {
            return toBN(this).lt(toBN(other));
          };
          BigNumber2.prototype.lte = function(other) {
            return toBN(this).lte(toBN(other));
          };
          BigNumber2.prototype.gt = function(other) {
            return toBN(this).gt(toBN(other));
          };
          BigNumber2.prototype.gte = function(other) {
            return toBN(this).gte(toBN(other));
          };
          BigNumber2.prototype.isNegative = function() {
            return this._hex[0] === "-";
          };
          BigNumber2.prototype.isZero = function() {
            return toBN(this).isZero();
          };
          BigNumber2.prototype.toNumber = function() {
            try {
              return toBN(this).toNumber();
            } catch (error) {
              throwFault("overflow", "toNumber", this.toString());
            }
            return null;
          };
          BigNumber2.prototype.toString = function() {
            if (arguments.length !== 0) {
              logger.throwError("bigNumber.toString does not accept parameters", lib.Logger.errors.UNEXPECTED_ARGUMENT, {});
            }
            return toBN(this).toString(10);
          };
          BigNumber2.prototype.toHexString = function() {
            return this._hex;
          };
          BigNumber2.from = function(value) {
            if (value instanceof BigNumber2) {
              return value;
            }
            if (typeof value === "string") {
              if (value.match(/^-?0x[0-9a-f]+$/i)) {
                return new BigNumber2(_constructorGuard, toHex2(value));
              }
              if (value.match(/^-?[0-9]+$/)) {
                return new BigNumber2(_constructorGuard, toHex2(new bn.BN(value)));
              }
              return logger.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof value === "number") {
              if (value % 1) {
                throwFault("underflow", "BigNumber.from", value);
              }
              if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                throwFault("overflow", "BigNumber.from", value);
              }
              return BigNumber2.from(String(value));
            }
            if (typeof value === "bigint") {
              return BigNumber2.from(value.toString());
            }
            if (lib$1.isBytes(value)) {
              return BigNumber2.from(lib$1.hexlify(value));
            }
            if (value._hex && lib$1.isHexString(value._hex)) {
              return BigNumber2.from(value._hex);
            }
            if (value.toHexString) {
              value = value.toHexString();
              if (typeof value === "string") {
                return BigNumber2.from(value);
              }
            }
            return logger.throwArgumentError("invalid BigNumber value", "value", value);
          };
          BigNumber2.isBigNumber = function(value) {
            return !!(value && value._isBigNumber);
          };
          return BigNumber2;
        }();
        exports3.BigNumber = BigNumber;
        function toHex2(value) {
          if (typeof value !== "string") {
            return toHex2(value.toString(16));
          }
          if (value[0] === "-") {
            value = value.substring(1);
            if (value[0] === "-") {
              logger.throwArgumentError("invalid hex", "value", value);
            }
            value = toHex2(value);
            if (value === "0x00") {
              return value;
            }
            return "-" + value;
          }
          if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (value === "0x") {
            return "0x00";
          }
          if (value.length % 2) {
            value = "0x0" + value.substring(2);
          }
          while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
          }
          return value;
        }
        function toBigNumber(value) {
          return BigNumber.from(toHex2(value));
        }
        function toBN(value) {
          var hex = BigNumber.from(value).toHexString();
          if (hex[0] === "-") {
            return new bn.BN("-" + hex.substring(3), 16);
          }
          return new bn.BN(hex.substring(2), 16);
        }
        function throwFault(fault, operation, value) {
          var params = {fault, operation};
          if (value != null) {
            params.value = value;
          }
          return logger.throwError(fault, lib.Logger.errors.NUMERIC_FAULT, params);
        }
      });
      var bignumber$1 = unwrapExports(bignumber);
      var bignumber_1 = bignumber.isBigNumberish;
      var bignumber_2 = bignumber.BigNumber;
      var fixednumber = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$4.version);
        var _constructorGuard = {};
        var Zero = bignumber.BigNumber.from(0);
        var NegativeOne = bignumber.BigNumber.from(-1);
        function throwFault(message, fault, operation, value) {
          var params = {fault, operation};
          if (value !== void 0) {
            params.value = value;
          }
          return logger.throwError(message, lib.Logger.errors.NUMERIC_FAULT, params);
        }
        var zeros = "0";
        while (zeros.length < 256) {
          zeros += zeros;
        }
        function getMultiplier(decimals) {
          if (typeof decimals !== "number") {
            try {
              decimals = bignumber.BigNumber.from(decimals).toNumber();
            } catch (e) {
            }
          }
          if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return "1" + zeros.substring(0, decimals);
          }
          return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
        }
        function formatFixed(value, decimals) {
          if (decimals == null) {
            decimals = 0;
          }
          var multiplier = getMultiplier(decimals);
          value = bignumber.BigNumber.from(value);
          var negative = value.lt(Zero);
          if (negative) {
            value = value.mul(NegativeOne);
          }
          var fraction = value.mod(multiplier).toString();
          while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
          }
          fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
          var whole = value.div(multiplier).toString();
          value = whole + "." + fraction;
          if (negative) {
            value = "-" + value;
          }
          return value;
        }
        exports3.formatFixed = formatFixed;
        function parseFixed(value, decimals) {
          if (decimals == null) {
            decimals = 0;
          }
          var multiplier = getMultiplier(decimals);
          if (typeof value !== "string" || !value.match(/^-?[0-9.,]+$/)) {
            logger.throwArgumentError("invalid decimal value", "value", value);
          }
          if (multiplier.length - 1 === 0) {
            return bignumber.BigNumber.from(value);
          }
          var negative = value.substring(0, 1) === "-";
          if (negative) {
            value = value.substring(1);
          }
          if (value === ".") {
            logger.throwArgumentError("missing value", "value", value);
          }
          var comps = value.split(".");
          if (comps.length > 2) {
            logger.throwArgumentError("too many decimal points", "value", value);
          }
          var whole = comps[0], fraction = comps[1];
          if (!whole) {
            whole = "0";
          }
          if (!fraction) {
            fraction = "0";
          }
          if (fraction.length > multiplier.length - 1) {
            throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
          }
          while (fraction.length < multiplier.length - 1) {
            fraction += "0";
          }
          var wholeValue = bignumber.BigNumber.from(whole);
          var fractionValue = bignumber.BigNumber.from(fraction);
          var wei = wholeValue.mul(multiplier).add(fractionValue);
          if (negative) {
            wei = wei.mul(NegativeOne);
          }
          return wei;
        }
        exports3.parseFixed = parseFixed;
        var FixedFormat = function() {
          function FixedFormat2(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
          }
          FixedFormat2.from = function(value) {
            if (value instanceof FixedFormat2) {
              return value;
            }
            var signed = true;
            var width = 128;
            var decimals = 18;
            if (typeof value === "string") {
              if (value === "fixed") {
              } else if (value === "ufixed") {
                signed = false;
              } else if (value != null) {
                var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                if (!match) {
                  logger.throwArgumentError("invalid fixed format", "format", value);
                }
                signed = match[1] !== "u";
                width = parseInt(match[2]);
                decimals = parseInt(match[3]);
              }
            } else if (value) {
              var check = function(key2, type, defaultValue) {
                if (value[key2] == null) {
                  return defaultValue;
                }
                if (typeof value[key2] !== type) {
                  logger.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
                }
                return value[key2];
              };
              signed = check("signed", "boolean", signed);
              width = check("width", "number", width);
              decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
              logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
              logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat2(_constructorGuard, signed, width, decimals);
          };
          return FixedFormat2;
        }();
        exports3.FixedFormat = FixedFormat;
        var FixedNumber = function() {
          function FixedNumber2(constructorGuard, hex, value, format) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, FixedNumber2);
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
          }
          FixedNumber2.prototype._checkFormat = function(other) {
            if (this.format.name !== other.format.name) {
              logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
          };
          FixedNumber2.prototype.addUnsafe = function(other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a.add(b), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.subUnsafe = function(other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a.sub(b), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.mulUnsafe = function(other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.divUnsafe = function(other) {
            this._checkFormat(other);
            var a = parseFixed(this._value, this.format.decimals);
            var b = parseFixed(other._value, other.format.decimals);
            return FixedNumber2.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
          };
          FixedNumber2.prototype.round = function(decimals) {
            if (decimals == null) {
              decimals = 0;
            }
            if (decimals < 0 || decimals > 80 || decimals % 1) {
              logger.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            var comps = this.toString().split(".");
            if (comps[1].length <= decimals) {
              return this;
            }
            var bump = "0." + zeros.substring(0, decimals) + "5";
            comps = this.addUnsafe(FixedNumber2.fromString(bump, this.format))._value.split(".");
            return FixedNumber2.fromString(comps[0] + "." + comps[1].substring(0, decimals));
          };
          FixedNumber2.prototype.isZero = function() {
            return this._value === "0.0";
          };
          FixedNumber2.prototype.toString = function() {
            return this._value;
          };
          FixedNumber2.prototype.toHexString = function(width) {
            if (width == null) {
              return this._hex;
            }
            if (width % 8) {
              logger.throwArgumentError("invalid byte width", "width", width);
            }
            var hex = bignumber.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return lib$1.hexZeroPad(hex, width / 8);
          };
          FixedNumber2.prototype.toUnsafeFloat = function() {
            return parseFloat(this.toString());
          };
          FixedNumber2.prototype.toFormat = function(format) {
            return FixedNumber2.fromString(this._value, format);
          };
          FixedNumber2.fromValue = function(value, decimals, format) {
            if (format == null && decimals != null && !bignumber.isBigNumberish(decimals)) {
              format = decimals;
              decimals = null;
            }
            if (decimals == null) {
              decimals = 0;
            }
            if (format == null) {
              format = "fixed";
            }
            return FixedNumber2.fromString(formatFixed(value, decimals), FixedFormat.from(format));
          };
          FixedNumber2.fromString = function(value, format) {
            if (format == null) {
              format = "fixed";
            }
            var fixedFormat = FixedFormat.from(format);
            var numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero)) {
              throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            var hex = null;
            if (fixedFormat.signed) {
              hex = numeric.toTwos(fixedFormat.width).toHexString();
            } else {
              hex = numeric.toHexString();
              hex = lib$1.hexZeroPad(hex, fixedFormat.width / 8);
            }
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber2(_constructorGuard, hex, decimal, fixedFormat);
          };
          FixedNumber2.fromBytes = function(value, format) {
            if (format == null) {
              format = "fixed";
            }
            var fixedFormat = FixedFormat.from(format);
            if (lib$1.arrayify(value).length > fixedFormat.width / 8) {
              throw new Error("overflow");
            }
            var numeric = bignumber.BigNumber.from(value);
            if (fixedFormat.signed) {
              numeric = numeric.fromTwos(fixedFormat.width);
            }
            var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            var decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber2(_constructorGuard, hex, decimal, fixedFormat);
          };
          FixedNumber2.from = function(value, format) {
            if (typeof value === "string") {
              return FixedNumber2.fromString(value, format);
            }
            if (lib$1.isBytes(value)) {
              return FixedNumber2.fromBytes(value, format);
            }
            try {
              return FixedNumber2.fromValue(value, 0, format);
            } catch (error) {
              if (error.code !== lib.Logger.errors.INVALID_ARGUMENT) {
                throw error;
              }
            }
            return logger.throwArgumentError("invalid FixedNumber value", "value", value);
          };
          FixedNumber2.isFixedNumber = function(value) {
            return !!(value && value._isFixedNumber);
          };
          return FixedNumber2;
        }();
        exports3.FixedNumber = FixedNumber;
      });
      var fixednumber$1 = unwrapExports(fixednumber);
      var fixednumber_1 = fixednumber.formatFixed;
      var fixednumber_2 = fixednumber.parseFixed;
      var fixednumber_3 = fixednumber.FixedFormat;
      var fixednumber_4 = fixednumber.FixedNumber;
      var lib$2 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.BigNumber = bignumber.BigNumber;
        exports3.formatFixed = fixednumber.formatFixed;
        exports3.FixedFormat = fixednumber.FixedFormat;
        exports3.FixedNumber = fixednumber.FixedNumber;
        exports3.parseFixed = fixednumber.parseFixed;
      });
      var index$2 = unwrapExports(lib$2);
      var lib_1$2 = lib$2.BigNumber;
      var lib_2$2 = lib$2.formatFixed;
      var lib_3$2 = lib$2.FixedFormat;
      var lib_4$1 = lib$2.FixedNumber;
      var lib_5$1 = lib$2.parseFixed;
      var _version$6 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "properties/5.0.1";
      });
      var _version$7 = unwrapExports(_version$6);
      var _version_1$3 = _version$6.version;
      var lib$3 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$6.version);
        function defineReadOnly(object, name2, value) {
          Object.defineProperty(object, name2, {
            enumerable: true,
            value,
            writable: false
          });
        }
        exports3.defineReadOnly = defineReadOnly;
        function getStatic(ctor, key2) {
          for (var i2 = 0; i2 < 32; i2++) {
            if (ctor[key2]) {
              return ctor[key2];
            }
            if (!ctor.prototype || typeof ctor.prototype !== "object") {
              break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
          }
          return null;
        }
        exports3.getStatic = getStatic;
        function resolveProperties(object) {
          return __awaiter(this, void 0, void 0, function() {
            var promises, results;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  promises = Object.keys(object).map(function(key2) {
                    var value = object[key2];
                    return Promise.resolve(value).then(function(v) {
                      return {key: key2, value: v};
                    });
                  });
                  return [4, Promise.all(promises)];
                case 1:
                  results = _a.sent();
                  return [2, results.reduce(function(accum, result) {
                    accum[result.key] = result.value;
                    return accum;
                  }, {})];
              }
            });
          });
        }
        exports3.resolveProperties = resolveProperties;
        function checkProperties(object, properties) {
          if (!object || typeof object !== "object") {
            logger.throwArgumentError("invalid object", "object", object);
          }
          Object.keys(object).forEach(function(key2) {
            if (!properties[key2]) {
              logger.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object);
            }
          });
        }
        exports3.checkProperties = checkProperties;
        function shallowCopy(object) {
          var result = {};
          for (var key2 in object) {
            result[key2] = object[key2];
          }
          return result;
        }
        exports3.shallowCopy = shallowCopy;
        var opaque = {bigint: true, boolean: true, function: true, number: true, string: true};
        function _isFrozen(object) {
          if (object === void 0 || object === null || opaque[typeof object]) {
            return true;
          }
          if (Array.isArray(object) || typeof object === "object") {
            if (!Object.isFrozen(object)) {
              return false;
            }
            var keys = Object.keys(object);
            for (var i2 = 0; i2 < keys.length; i2++) {
              if (!_isFrozen(object[keys[i2]])) {
                return false;
              }
            }
            return true;
          }
          return logger.throwArgumentError("Cannot deepCopy " + typeof object, "object", object);
        }
        function _deepCopy(object) {
          if (_isFrozen(object)) {
            return object;
          }
          if (Array.isArray(object)) {
            return Object.freeze(object.map(function(item) {
              return deepCopy(item);
            }));
          }
          if (typeof object === "object") {
            var result = {};
            for (var key2 in object) {
              var value = object[key2];
              if (value === void 0) {
                continue;
              }
              defineReadOnly(result, key2, deepCopy(value));
            }
            return result;
          }
          return logger.throwArgumentError("Cannot deepCopy " + typeof object, "object", object);
        }
        function deepCopy(object) {
          return _deepCopy(object);
        }
        exports3.deepCopy = deepCopy;
        var Description = function() {
          function Description2(info) {
            for (var key2 in info) {
              this[key2] = deepCopy(info[key2]);
            }
          }
          return Description2;
        }();
        exports3.Description = Description;
      });
      var index$3 = unwrapExports(lib$3);
      var lib_1$3 = lib$3.defineReadOnly;
      var lib_2$3 = lib$3.getStatic;
      var lib_3$3 = lib$3.resolveProperties;
      var lib_4$2 = lib$3.checkProperties;
      var lib_5$2 = lib$3.shallowCopy;
      var lib_6$1 = lib$3.deepCopy;
      var lib_7$1 = lib$3.Description;
      var _version$8 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "abi/5.0.1";
      });
      var _version$9 = unwrapExports(_version$8);
      var _version_1$4 = _version$8.version;
      var fragments = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$8.version);
        ;
        var _constructorGuard = {};
        var ModifiersBytes = {calldata: true, memory: true, storage: true};
        var ModifiersNest = {calldata: true, memory: true};
        function checkModifier(type, name2) {
          if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name2]) {
              return true;
            }
          } else if (type === "address") {
            if (name2 === "payable") {
              return true;
            }
          } else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name2]) {
              return true;
            }
          }
          if (ModifiersBytes[name2] || name2 === "payable") {
            logger.throwArgumentError("invalid modifier", "name", name2);
          }
          return false;
        }
        function parseParamType(param, allowIndexed) {
          var originalParam = param;
          function throwError(i3) {
            logger.throwArgumentError("unexpected character at position " + i3, "param", param);
          }
          param = param.replace(/\s/g, " ");
          function newNode(parent2) {
            var node2 = {type: "", name: "", parent: parent2, state: {allowType: true}};
            if (allowIndexed) {
              node2.indexed = false;
            }
            return node2;
          }
          var parent = {type: "", name: "", state: {allowType: true}};
          var node = parent;
          for (var i2 = 0; i2 < param.length; i2++) {
            var c = param[i2];
            switch (c) {
              case "(":
                if (node.state.allowType && node.type === "") {
                  node.type = "tuple";
                } else if (!node.state.allowParams) {
                  throwError(i2);
                }
                node.state.allowType = false;
                node.type = verifyType(node.type);
                node.components = [newNode(node)];
                node = node.components[0];
                break;
              case ")":
                delete node.state;
                if (node.name === "indexed") {
                  if (!allowIndexed) {
                    throwError(i2);
                  }
                  node.indexed = true;
                  node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                  node.name = "";
                }
                node.type = verifyType(node.type);
                var child = node;
                node = node.parent;
                if (!node) {
                  throwError(i2);
                }
                delete child.parent;
                node.state.allowParams = false;
                node.state.allowName = true;
                node.state.allowArray = true;
                break;
              case ",":
                delete node.state;
                if (node.name === "indexed") {
                  if (!allowIndexed) {
                    throwError(i2);
                  }
                  node.indexed = true;
                  node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                  node.name = "";
                }
                node.type = verifyType(node.type);
                var sibling = newNode(node.parent);
                node.parent.components.push(sibling);
                delete node.parent;
                node = sibling;
                break;
              case " ":
                if (node.state.allowType) {
                  if (node.type !== "") {
                    node.type = verifyType(node.type);
                    delete node.state.allowType;
                    node.state.allowName = true;
                    node.state.allowParams = true;
                  }
                }
                if (node.state.allowName) {
                  if (node.name !== "") {
                    if (node.name === "indexed") {
                      if (!allowIndexed) {
                        throwError(i2);
                      }
                      if (node.indexed) {
                        throwError(i2);
                      }
                      node.indexed = true;
                      node.name = "";
                    } else if (checkModifier(node.type, node.name)) {
                      node.name = "";
                    } else {
                      node.state.allowName = false;
                    }
                  }
                }
                break;
              case "[":
                if (!node.state.allowArray) {
                  throwError(i2);
                }
                node.type += c;
                node.state.allowArray = false;
                node.state.allowName = false;
                node.state.readArray = true;
                break;
              case "]":
                if (!node.state.readArray) {
                  throwError(i2);
                }
                node.type += c;
                node.state.readArray = false;
                node.state.allowArray = true;
                node.state.allowName = true;
                break;
              default:
                if (node.state.allowType) {
                  node.type += c;
                  node.state.allowParams = true;
                  node.state.allowArray = true;
                } else if (node.state.allowName) {
                  node.name += c;
                  delete node.state.allowArray;
                } else if (node.state.readArray) {
                  node.type += c;
                } else {
                  throwError(i2);
                }
            }
          }
          if (node.parent) {
            logger.throwArgumentError("unexpected eof", "param", param);
          }
          delete parent.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(originalParam.length - 7);
            }
            if (node.indexed) {
              throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
          } else if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          parent.type = verifyType(parent.type);
          return parent;
        }
        function populate(object, params) {
          for (var key2 in params) {
            lib$3.defineReadOnly(object, key2, params[key2]);
          }
        }
        exports3.FormatTypes = Object.freeze({
          sighash: "sighash",
          minimal: "minimal",
          full: "full",
          json: "json"
        });
        var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
        var ParamType = function() {
          function ParamType2(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("use fromString", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new ParamType()"
              });
            }
            populate(this, params);
            var match = this.type.match(paramTypeArray);
            if (match) {
              populate(this, {
                arrayLength: parseInt(match[2] || "-1"),
                arrayChildren: ParamType2.fromObject({
                  type: match[1],
                  components: this.components
                }),
                baseType: "array"
              });
            } else {
              populate(this, {
                arrayLength: null,
                arrayChildren: null,
                baseType: this.components != null ? "tuple" : this.type
              });
            }
            this._isParamType = true;
            Object.freeze(this);
          }
          ParamType2.prototype.format = function(format) {
            if (!format) {
              format = exports3.FormatTypes.sighash;
            }
            if (!exports3.FormatTypes[format]) {
              logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports3.FormatTypes.json) {
              var result_1 = {
                type: this.baseType === "tuple" ? "tuple" : this.type,
                name: this.name || void 0
              };
              if (typeof this.indexed === "boolean") {
                result_1.indexed = this.indexed;
              }
              if (this.components) {
                result_1.components = this.components.map(function(comp) {
                  return JSON.parse(comp.format(format));
                });
              }
              return JSON.stringify(result_1);
            }
            var result = "";
            if (this.baseType === "array") {
              result += this.arrayChildren.format(format);
              result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            } else {
              if (this.baseType === "tuple") {
                if (format !== exports3.FormatTypes.sighash) {
                  result += this.type;
                }
                result += "(" + this.components.map(function(comp) {
                  return comp.format(format);
                }).join(format === exports3.FormatTypes.full ? ", " : ",") + ")";
              } else {
                result += this.type;
              }
            }
            if (format !== exports3.FormatTypes.sighash) {
              if (this.indexed === true) {
                result += " indexed";
              }
              if (format === exports3.FormatTypes.full && this.name) {
                result += " " + this.name;
              }
            }
            return result;
          };
          ParamType2.from = function(value, allowIndexed) {
            if (typeof value === "string") {
              return ParamType2.fromString(value, allowIndexed);
            }
            return ParamType2.fromObject(value);
          };
          ParamType2.fromObject = function(value) {
            if (ParamType2.isParamType(value)) {
              return value;
            }
            return new ParamType2(_constructorGuard, {
              name: value.name || null,
              type: verifyType(value.type),
              indexed: value.indexed == null ? null : !!value.indexed,
              components: value.components ? value.components.map(ParamType2.fromObject) : null
            });
          };
          ParamType2.fromString = function(value, allowIndexed) {
            function ParamTypify(node) {
              return ParamType2.fromObject({
                name: node.name,
                type: node.type,
                indexed: node.indexed,
                components: node.components
              });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
          };
          ParamType2.isParamType = function(value) {
            return !!(value != null && value._isParamType);
          };
          return ParamType2;
        }();
        exports3.ParamType = ParamType;
        ;
        function parseParams(value, allowIndex) {
          return splitNesting(value).map(function(param) {
            return ParamType.fromString(param, allowIndex);
          });
        }
        var Fragment = function() {
          function Fragment2(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard) {
              logger.throwError("use a static from method", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new Fragment()"
              });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
          }
          Fragment2.from = function(value) {
            if (Fragment2.isFragment(value)) {
              return value;
            }
            if (typeof value === "string") {
              return Fragment2.fromString(value);
            }
            return Fragment2.fromObject(value);
          };
          Fragment2.fromObject = function(value) {
            if (Fragment2.isFragment(value)) {
              return value;
            }
            switch (value.type) {
              case "function":
                return FunctionFragment.fromObject(value);
              case "event":
                return EventFragment.fromObject(value);
              case "constructor":
                return ConstructorFragment.fromObject(value);
              case "fallback":
              case "receive":
                return null;
            }
            return logger.throwArgumentError("invalid fragment object", "value", value);
          };
          Fragment2.fromString = function(value) {
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
              return EventFragment.fromString(value.substring(5).trim());
            } else if (value.split(" ")[0] === "function") {
              return FunctionFragment.fromString(value.substring(8).trim());
            } else if (value.split("(")[0].trim() === "constructor") {
              return ConstructorFragment.fromString(value.trim());
            }
            return logger.throwArgumentError("unsupported fragment", "value", value);
          };
          Fragment2.isFragment = function(value) {
            return !!(value && value._isFragment);
          };
          return Fragment2;
        }();
        exports3.Fragment = Fragment;
        var EventFragment = function(_super) {
          __extends(EventFragment2, _super);
          function EventFragment2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          EventFragment2.prototype.format = function(format) {
            if (!format) {
              format = exports3.FormatTypes.sighash;
            }
            if (!exports3.FormatTypes[format]) {
              logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports3.FormatTypes.json) {
              return JSON.stringify({
                type: "event",
                anonymous: this.anonymous,
                name: this.name,
                inputs: this.inputs.map(function(input) {
                  return JSON.parse(input.format(format));
                })
              });
            }
            var result = "";
            if (format !== exports3.FormatTypes.sighash) {
              result += "event ";
            }
            result += this.name + "(" + this.inputs.map(function(input) {
              return input.format(format);
            }).join(format === exports3.FormatTypes.full ? ", " : ",") + ") ";
            if (format !== exports3.FormatTypes.sighash) {
              if (this.anonymous) {
                result += "anonymous ";
              }
            }
            return result.trim();
          };
          EventFragment2.from = function(value) {
            if (typeof value === "string") {
              return EventFragment2.fromString(value);
            }
            return EventFragment2.fromObject(value);
          };
          EventFragment2.fromObject = function(value) {
            if (EventFragment2.isEventFragment(value)) {
              return value;
            }
            if (value.type !== "event") {
              logger.throwArgumentError("invalid event object", "value", value);
            }
            var params = {
              name: verifyIdentifier(value.name),
              anonymous: value.anonymous,
              inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
              type: "event"
            };
            return new EventFragment2(_constructorGuard, params);
          };
          EventFragment2.fromString = function(value) {
            var match = value.match(regexParen);
            if (!match) {
              logger.throwArgumentError("invalid event string", "value", value);
            }
            var anonymous2 = false;
            match[3].split(" ").forEach(function(modifier) {
              switch (modifier.trim()) {
                case "anonymous":
                  anonymous2 = true;
                  break;
                case "":
                  break;
                default:
                  logger.warn("unknown modifier: " + modifier);
              }
            });
            return EventFragment2.fromObject({
              name: match[1].trim(),
              anonymous: anonymous2,
              inputs: parseParams(match[2], true),
              type: "event"
            });
          };
          EventFragment2.isEventFragment = function(value) {
            return value && value._isFragment && value.type === "event";
          };
          return EventFragment2;
        }(Fragment);
        exports3.EventFragment = EventFragment;
        function parseGas(value, params) {
          params.gas = null;
          var comps = value.split("@");
          if (comps.length !== 1) {
            if (comps.length > 2) {
              logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
              logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = lib$2.BigNumber.from(comps[1]);
            return comps[0];
          }
          return value;
        }
        function parseModifiers(value, params) {
          params.constant = false;
          params.payable = false;
          params.stateMutability = "nonpayable";
          value.split(" ").forEach(function(modifier) {
            switch (modifier.trim()) {
              case "constant":
                params.constant = true;
                break;
              case "payable":
                params.payable = true;
                params.stateMutability = "payable";
                break;
              case "nonpayable":
                params.payable = false;
                params.stateMutability = "nonpayable";
                break;
              case "pure":
                params.constant = true;
                params.stateMutability = "pure";
                break;
              case "view":
                params.constant = true;
                params.stateMutability = "view";
                break;
              case "external":
              case "public":
              case "":
                break;
              default:
                console.log("unknown modifier: " + modifier);
            }
          });
        }
        function verifyState(value) {
          var result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
          };
          if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
            if (value.constant != null) {
              if (!!value.constant !== result.constant) {
                logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
              }
            }
            result.payable = result.stateMutability === "payable";
            if (value.payable != null) {
              if (!!value.payable !== result.payable) {
                logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
              }
            }
          } else if (value.payable != null) {
            result.payable = !!value.payable;
            if (value.constant == null && !result.payable && value.type !== "constructor") {
              logger.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
              result.stateMutability = "view";
            } else {
              result.stateMutability = result.payable ? "payable" : "nonpayable";
            }
            if (result.payable && result.constant) {
              logger.throwArgumentError("cannot have constant payable function", "value", value);
            }
          } else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = result.constant ? "view" : "payable";
          } else if (value.type !== "constructor") {
            logger.throwArgumentError("unable to determine stateMutability", "value", value);
          }
          return result;
        }
        var ConstructorFragment = function(_super) {
          __extends(ConstructorFragment2, _super);
          function ConstructorFragment2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          ConstructorFragment2.prototype.format = function(format) {
            if (!format) {
              format = exports3.FormatTypes.sighash;
            }
            if (!exports3.FormatTypes[format]) {
              logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports3.FormatTypes.json) {
              return JSON.stringify({
                type: "constructor",
                stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
                payble: this.payable,
                gas: this.gas ? this.gas.toNumber() : void 0,
                inputs: this.inputs.map(function(input) {
                  return JSON.parse(input.format(format));
                })
              });
            }
            if (format === exports3.FormatTypes.sighash) {
              logger.throwError("cannot format a constructor for sighash", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "format(sighash)"
              });
            }
            var result = "constructor(" + this.inputs.map(function(input) {
              return input.format(format);
            }).join(format === exports3.FormatTypes.full ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
            return result.trim();
          };
          ConstructorFragment2.from = function(value) {
            if (typeof value === "string") {
              return ConstructorFragment2.fromString(value);
            }
            return ConstructorFragment2.fromObject(value);
          };
          ConstructorFragment2.fromObject = function(value) {
            if (ConstructorFragment2.isConstructorFragment(value)) {
              return value;
            }
            if (value.type !== "constructor") {
              logger.throwArgumentError("invalid constructor object", "value", value);
            }
            var state = verifyState(value);
            if (state.constant) {
              logger.throwArgumentError("constructor cannot be constant", "value", value);
            }
            var params = {
              name: null,
              type: value.type,
              inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
              payable: state.payable,
              stateMutability: state.stateMutability,
              gas: value.gas ? lib$2.BigNumber.from(value.gas) : null
            };
            return new ConstructorFragment2(_constructorGuard, params);
          };
          ConstructorFragment2.fromString = function(value) {
            var params = {type: "constructor"};
            value = parseGas(value, params);
            var parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
              logger.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return ConstructorFragment2.fromObject(params);
          };
          ConstructorFragment2.isConstructorFragment = function(value) {
            return value && value._isFragment && value.type === "constructor";
          };
          return ConstructorFragment2;
        }(Fragment);
        exports3.ConstructorFragment = ConstructorFragment;
        var FunctionFragment = function(_super) {
          __extends(FunctionFragment2, _super);
          function FunctionFragment2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          FunctionFragment2.prototype.format = function(format) {
            if (!format) {
              format = exports3.FormatTypes.sighash;
            }
            if (!exports3.FormatTypes[format]) {
              logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === exports3.FormatTypes.json) {
              return JSON.stringify({
                type: "function",
                name: this.name,
                constant: this.constant,
                stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
                payble: this.payable,
                gas: this.gas ? this.gas.toNumber() : void 0,
                inputs: this.inputs.map(function(input) {
                  return JSON.parse(input.format(format));
                }),
                ouputs: this.outputs.map(function(output) {
                  return JSON.parse(output.format(format));
                })
              });
            }
            var result = "";
            if (format !== exports3.FormatTypes.sighash) {
              result += "function ";
            }
            result += this.name + "(" + this.inputs.map(function(input) {
              return input.format(format);
            }).join(format === exports3.FormatTypes.full ? ", " : ",") + ") ";
            if (format !== exports3.FormatTypes.sighash) {
              if (this.stateMutability) {
                if (this.stateMutability !== "nonpayable") {
                  result += this.stateMutability + " ";
                }
              } else if (this.constant) {
                result += "view ";
              }
              if (this.outputs && this.outputs.length) {
                result += "returns (" + this.outputs.map(function(output) {
                  return output.format(format);
                }).join(", ") + ") ";
              }
              if (this.gas != null) {
                result += "@" + this.gas.toString() + " ";
              }
            }
            return result.trim();
          };
          FunctionFragment2.from = function(value) {
            if (typeof value === "string") {
              return FunctionFragment2.fromString(value);
            }
            return FunctionFragment2.fromObject(value);
          };
          FunctionFragment2.fromObject = function(value) {
            if (FunctionFragment2.isFunctionFragment(value)) {
              return value;
            }
            if (value.type !== "function") {
              logger.throwArgumentError("invalid function object", "value", value);
            }
            var state = verifyState(value);
            var params = {
              type: value.type,
              name: verifyIdentifier(value.name),
              constant: state.constant,
              inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
              outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
              payable: state.payable,
              stateMutability: state.stateMutability,
              gas: value.gas ? lib$2.BigNumber.from(value.gas) : null
            };
            return new FunctionFragment2(_constructorGuard, params);
          };
          FunctionFragment2.fromString = function(value) {
            var params = {type: "function"};
            value = parseGas(value, params);
            var comps = value.split(" returns ");
            if (comps.length > 2) {
              logger.throwArgumentError("invalid function string", "value", value);
            }
            var parens = comps[0].match(regexParen);
            if (!parens) {
              logger.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
              verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            if (comps.length > 1) {
              var returns = comps[1].match(regexParen);
              if (returns[1].trim() != "" || returns[3].trim() != "") {
                logger.throwArgumentError("unexpected tokens", "value", value);
              }
              params.outputs = parseParams(returns[2], false);
            } else {
              params.outputs = [];
            }
            return FunctionFragment2.fromObject(params);
          };
          FunctionFragment2.isFunctionFragment = function(value) {
            return value && value._isFragment && value.type === "function";
          };
          return FunctionFragment2;
        }(ConstructorFragment);
        exports3.FunctionFragment = FunctionFragment;
        function verifyType(type) {
          if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
          } else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
          }
          return type;
        }
        var regexIdentifier = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
        function verifyIdentifier(value) {
          if (!value || !value.match(regexIdentifier)) {
            logger.throwArgumentError('invalid identifier "' + value + '"', "value", value);
          }
          return value;
        }
        var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
        function splitNesting(value) {
          value = value.trim();
          var result = [];
          var accum = "";
          var depth = 0;
          for (var offset = 0; offset < value.length; offset++) {
            var c = value[offset];
            if (c === "," && depth === 0) {
              result.push(accum);
              accum = "";
            } else {
              accum += c;
              if (c === "(") {
                depth++;
              } else if (c === ")") {
                depth--;
                if (depth === -1) {
                  logger.throwArgumentError("unbalanced parenthesis", "value", value);
                }
              }
            }
          }
          if (accum) {
            result.push(accum);
          }
          return result;
        }
      });
      var fragments$1 = unwrapExports(fragments);
      var fragments_1 = fragments.FormatTypes;
      var fragments_2 = fragments.ParamType;
      var fragments_3 = fragments.Fragment;
      var fragments_4 = fragments.EventFragment;
      var fragments_5 = fragments.ConstructorFragment;
      var fragments_6 = fragments.FunctionFragment;
      var abstractCoder = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$8.version);
        function checkResultErrors(result) {
          var errors = [];
          var checkErrors = function(path, object) {
            if (!Array.isArray(object)) {
              return;
            }
            for (var key2 in object) {
              var childPath = path.slice();
              childPath.push(key2);
              try {
                checkErrors(childPath, object[key2]);
              } catch (error) {
                errors.push({path: childPath, error});
              }
            }
          };
          checkErrors([], result);
          return errors;
        }
        exports3.checkResultErrors = checkResultErrors;
        var Coder = function() {
          function Coder2(name2, type, localName, dynamic) {
            this.name = name2;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
          }
          Coder2.prototype._throwError = function(message, value) {
            logger.throwArgumentError(message, this.localName, value);
          };
          return Coder2;
        }();
        exports3.Coder = Coder;
        var Writer = function() {
          function Writer2(wordSize) {
            lib$3.defineReadOnly(this, "wordSize", wordSize || 32);
            this._data = lib$1.arrayify([]);
            this._padding = new Uint8Array(wordSize);
          }
          Object.defineProperty(Writer2.prototype, "data", {
            get: function() {
              return lib$1.hexlify(this._data);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Writer2.prototype, "length", {
            get: function() {
              return this._data.length;
            },
            enumerable: true,
            configurable: true
          });
          Writer2.prototype._writeData = function(data) {
            this._data = lib$1.concat([this._data, data]);
            return data.length;
          };
          Writer2.prototype.writeBytes = function(value) {
            var bytes2 = lib$1.arrayify(value);
            if (bytes2.length % this.wordSize) {
              bytes2 = lib$1.concat([bytes2, this._padding.slice(bytes2.length % this.wordSize)]);
            }
            return this._writeData(bytes2);
          };
          Writer2.prototype._getValue = function(value) {
            var bytes2 = lib$1.arrayify(lib$2.BigNumber.from(value));
            if (bytes2.length > this.wordSize) {
              logger.throwError("value out-of-bounds", lib.Logger.errors.BUFFER_OVERRUN, {
                length: this.wordSize,
                offset: bytes2.length
              });
            }
            if (bytes2.length % this.wordSize) {
              bytes2 = lib$1.concat([this._padding.slice(bytes2.length % this.wordSize), bytes2]);
            }
            return bytes2;
          };
          Writer2.prototype.writeValue = function(value) {
            return this._writeData(this._getValue(value));
          };
          Writer2.prototype.writeUpdatableValue = function() {
            var _this = this;
            var offset = this.length;
            this.writeValue(0);
            return function(value) {
              _this._data.set(_this._getValue(value), offset);
            };
          };
          return Writer2;
        }();
        exports3.Writer = Writer;
        var Reader = function() {
          function Reader2(data, wordSize, coerceFunc) {
            lib$3.defineReadOnly(this, "_data", lib$1.arrayify(data));
            lib$3.defineReadOnly(this, "wordSize", wordSize || 32);
            lib$3.defineReadOnly(this, "_coerceFunc", coerceFunc);
            this._offset = 0;
          }
          Object.defineProperty(Reader2.prototype, "data", {
            get: function() {
              return lib$1.hexlify(this._data);
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Reader2.prototype, "consumed", {
            get: function() {
              return this._offset;
            },
            enumerable: true,
            configurable: true
          });
          Reader2.coerce = function(name2, value) {
            var match = name2.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
              value = value.toNumber();
            }
            return value;
          };
          Reader2.prototype.coerce = function(name2, value) {
            if (this._coerceFunc) {
              return this._coerceFunc(name2, value);
            }
            return Reader2.coerce(name2, value);
          };
          Reader2.prototype._peekBytes = function(offset, length) {
            var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
              logger.throwError("data out-of-bounds", lib.Logger.errors.BUFFER_OVERRUN, {
                length: this._data.length,
                offset: this._offset + alignedLength
              });
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
          };
          Reader2.prototype.subReader = function(offset) {
            return new Reader2(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc);
          };
          Reader2.prototype.readBytes = function(length) {
            var bytes2 = this._peekBytes(0, length);
            this._offset += bytes2.length;
            return bytes2.slice(0, length);
          };
          Reader2.prototype.readValue = function() {
            return lib$2.BigNumber.from(this.readBytes(this.wordSize));
          };
          return Reader2;
        }();
        exports3.Reader = Reader;
      });
      var abstractCoder$1 = unwrapExports(abstractCoder);
      var abstractCoder_1 = abstractCoder.checkResultErrors;
      var abstractCoder_2 = abstractCoder.Coder;
      var abstractCoder_3 = abstractCoder.Writer;
      var abstractCoder_4 = abstractCoder.Reader;
      var sha3 = createCommonjsModule(function(module2) {
        (function() {
          "use strict";
          var root = typeof window === "object" ? window : {};
          var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
          if (NODE_JS) {
            root = commonjsGlobal;
          }
          var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module2.exports;
          var HEX_CHARS = "0123456789abcdef".split("");
          var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
          var KECCAK_PADDING = [1, 256, 65536, 16777216];
          var PADDING = [6, 1536, 393216, 100663296];
          var SHIFT = [0, 8, 16, 24];
          var RC = [
            1,
            0,
            32898,
            0,
            32906,
            2147483648,
            2147516416,
            2147483648,
            32907,
            0,
            2147483649,
            0,
            2147516545,
            2147483648,
            32777,
            2147483648,
            138,
            0,
            136,
            0,
            2147516425,
            0,
            2147483658,
            0,
            2147516555,
            0,
            139,
            2147483648,
            32905,
            2147483648,
            32771,
            2147483648,
            32770,
            2147483648,
            128,
            2147483648,
            32778,
            0,
            2147483658,
            2147483648,
            2147516545,
            2147483648,
            32896,
            2147483648,
            2147483649,
            0,
            2147516424,
            2147483648
          ];
          var BITS = [224, 256, 384, 512];
          var SHAKE_BITS = [128, 256];
          var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array"];
          var createOutputMethod = function(bits2, padding, outputType) {
            return function(message) {
              return new Keccak(bits2, padding, bits2).update(message)[outputType]();
            };
          };
          var createShakeOutputMethod = function(bits2, padding, outputType) {
            return function(message, outputBits) {
              return new Keccak(bits2, padding, outputBits).update(message)[outputType]();
            };
          };
          var createMethod = function(bits2, padding) {
            var method = createOutputMethod(bits2, padding, "hex");
            method.create = function() {
              return new Keccak(bits2, padding, bits2);
            };
            method.update = function(message) {
              return method.create().update(message);
            };
            for (var i3 = 0; i3 < OUTPUT_TYPES.length; ++i3) {
              var type = OUTPUT_TYPES[i3];
              method[type] = createOutputMethod(bits2, padding, type);
            }
            return method;
          };
          var createShakeMethod = function(bits2, padding) {
            var method = createShakeOutputMethod(bits2, padding, "hex");
            method.create = function(outputBits) {
              return new Keccak(bits2, padding, outputBits);
            };
            method.update = function(message, outputBits) {
              return method.create(outputBits).update(message);
            };
            for (var i3 = 0; i3 < OUTPUT_TYPES.length; ++i3) {
              var type = OUTPUT_TYPES[i3];
              method[type] = createShakeOutputMethod(bits2, padding, type);
            }
            return method;
          };
          var algorithms = [
            {name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod},
            {name: "sha3", padding: PADDING, bits: BITS, createMethod},
            {name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
          ];
          var methods = {}, methodNames = [];
          for (var i2 = 0; i2 < algorithms.length; ++i2) {
            var algorithm = algorithms[i2];
            var bits = algorithm.bits;
            for (var j = 0; j < bits.length; ++j) {
              var methodName = algorithm.name + "_" + bits[j];
              methodNames.push(methodName);
              methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
            }
          }
          function Keccak(bits2, padding, outputBits) {
            this.blocks = [];
            this.s = [];
            this.padding = padding;
            this.outputBits = outputBits;
            this.reset = true;
            this.block = 0;
            this.start = 0;
            this.blockCount = 1600 - (bits2 << 1) >> 5;
            this.byteCount = this.blockCount << 2;
            this.outputBlocks = outputBits >> 5;
            this.extraBytes = (outputBits & 31) >> 3;
            for (var i3 = 0; i3 < 50; ++i3) {
              this.s[i3] = 0;
            }
          }
          Keccak.prototype.update = function(message) {
            var notString = typeof message !== "string";
            if (notString && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            }
            var length = message.length, blocks = this.blocks, byteCount = this.byteCount, blockCount = this.blockCount, index2 = 0, s2 = this.s, i3, code;
            while (index2 < length) {
              if (this.reset) {
                this.reset = false;
                blocks[0] = this.block;
                for (i3 = 1; i3 < blockCount + 1; ++i3) {
                  blocks[i3] = 0;
                }
              }
              if (notString) {
                for (i3 = this.start; index2 < length && i3 < byteCount; ++index2) {
                  blocks[i3 >> 2] |= message[index2] << SHIFT[i3++ & 3];
                }
              } else {
                for (i3 = this.start; index2 < length && i3 < byteCount; ++index2) {
                  code = message.charCodeAt(index2);
                  if (code < 128) {
                    blocks[i3 >> 2] |= code << SHIFT[i3++ & 3];
                  } else if (code < 2048) {
                    blocks[i3 >> 2] |= (192 | code >> 6) << SHIFT[i3++ & 3];
                    blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
                  } else if (code < 55296 || code >= 57344) {
                    blocks[i3 >> 2] |= (224 | code >> 12) << SHIFT[i3++ & 3];
                    blocks[i3 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i3++ & 3];
                    blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
                  } else {
                    code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index2) & 1023);
                    blocks[i3 >> 2] |= (240 | code >> 18) << SHIFT[i3++ & 3];
                    blocks[i3 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i3++ & 3];
                    blocks[i3 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i3++ & 3];
                    blocks[i3 >> 2] |= (128 | code & 63) << SHIFT[i3++ & 3];
                  }
                }
              }
              this.lastByteIndex = i3;
              if (i3 >= byteCount) {
                this.start = i3 - byteCount;
                this.block = blocks[blockCount];
                for (i3 = 0; i3 < blockCount; ++i3) {
                  s2[i3] ^= blocks[i3];
                }
                f2(s2);
                this.reset = true;
              } else {
                this.start = i3;
              }
            }
            return this;
          };
          Keccak.prototype.finalize = function() {
            var blocks = this.blocks, i3 = this.lastByteIndex, blockCount = this.blockCount, s2 = this.s;
            blocks[i3 >> 2] |= this.padding[i3 & 3];
            if (this.lastByteIndex === this.byteCount) {
              blocks[0] = blocks[blockCount];
              for (i3 = 1; i3 < blockCount + 1; ++i3) {
                blocks[i3] = 0;
              }
            }
            blocks[blockCount - 1] |= 2147483648;
            for (i3 = 0; i3 < blockCount; ++i3) {
              s2[i3] ^= blocks[i3];
            }
            f2(s2);
          };
          Keccak.prototype.toString = Keccak.prototype.hex = function() {
            this.finalize();
            var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
            var hex = "", block;
            while (j2 < outputBlocks) {
              for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
                block = s2[i3];
                hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
              }
              if (j2 % blockCount === 0) {
                f2(s2);
                i3 = 0;
              }
            }
            if (extraBytes) {
              block = s2[i3];
              if (extraBytes > 0) {
                hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
              }
              if (extraBytes > 1) {
                hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
              }
              if (extraBytes > 2) {
                hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
              }
            }
            return hex;
          };
          Keccak.prototype.arrayBuffer = function() {
            this.finalize();
            var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
            var bytes2 = this.outputBits >> 3;
            var buffer;
            if (extraBytes) {
              buffer = new ArrayBuffer(outputBlocks + 1 << 2);
            } else {
              buffer = new ArrayBuffer(bytes2);
            }
            var array2 = new Uint32Array(buffer);
            while (j2 < outputBlocks) {
              for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
                array2[j2] = s2[i3];
              }
              if (j2 % blockCount === 0) {
                f2(s2);
              }
            }
            if (extraBytes) {
              array2[i3] = s2[i3];
              buffer = buffer.slice(0, bytes2);
            }
            return buffer;
          };
          Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
          Keccak.prototype.digest = Keccak.prototype.array = function() {
            this.finalize();
            var blockCount = this.blockCount, s2 = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i3 = 0, j2 = 0;
            var array2 = [], offset, block;
            while (j2 < outputBlocks) {
              for (i3 = 0; i3 < blockCount && j2 < outputBlocks; ++i3, ++j2) {
                offset = j2 << 2;
                block = s2[i3];
                array2[offset] = block & 255;
                array2[offset + 1] = block >> 8 & 255;
                array2[offset + 2] = block >> 16 & 255;
                array2[offset + 3] = block >> 24 & 255;
              }
              if (j2 % blockCount === 0) {
                f2(s2);
              }
            }
            if (extraBytes) {
              offset = j2 << 2;
              block = s2[i3];
              if (extraBytes > 0) {
                array2[offset] = block & 255;
              }
              if (extraBytes > 1) {
                array2[offset + 1] = block >> 8 & 255;
              }
              if (extraBytes > 2) {
                array2[offset + 2] = block >> 16 & 255;
              }
            }
            return array2;
          };
          var f2 = function(s2) {
            var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
            for (n = 0; n < 48; n += 2) {
              c0 = s2[0] ^ s2[10] ^ s2[20] ^ s2[30] ^ s2[40];
              c1 = s2[1] ^ s2[11] ^ s2[21] ^ s2[31] ^ s2[41];
              c2 = s2[2] ^ s2[12] ^ s2[22] ^ s2[32] ^ s2[42];
              c3 = s2[3] ^ s2[13] ^ s2[23] ^ s2[33] ^ s2[43];
              c4 = s2[4] ^ s2[14] ^ s2[24] ^ s2[34] ^ s2[44];
              c5 = s2[5] ^ s2[15] ^ s2[25] ^ s2[35] ^ s2[45];
              c6 = s2[6] ^ s2[16] ^ s2[26] ^ s2[36] ^ s2[46];
              c7 = s2[7] ^ s2[17] ^ s2[27] ^ s2[37] ^ s2[47];
              c8 = s2[8] ^ s2[18] ^ s2[28] ^ s2[38] ^ s2[48];
              c9 = s2[9] ^ s2[19] ^ s2[29] ^ s2[39] ^ s2[49];
              h = c8 ^ (c2 << 1 | c3 >>> 31);
              l = c9 ^ (c3 << 1 | c2 >>> 31);
              s2[0] ^= h;
              s2[1] ^= l;
              s2[10] ^= h;
              s2[11] ^= l;
              s2[20] ^= h;
              s2[21] ^= l;
              s2[30] ^= h;
              s2[31] ^= l;
              s2[40] ^= h;
              s2[41] ^= l;
              h = c0 ^ (c4 << 1 | c5 >>> 31);
              l = c1 ^ (c5 << 1 | c4 >>> 31);
              s2[2] ^= h;
              s2[3] ^= l;
              s2[12] ^= h;
              s2[13] ^= l;
              s2[22] ^= h;
              s2[23] ^= l;
              s2[32] ^= h;
              s2[33] ^= l;
              s2[42] ^= h;
              s2[43] ^= l;
              h = c2 ^ (c6 << 1 | c7 >>> 31);
              l = c3 ^ (c7 << 1 | c6 >>> 31);
              s2[4] ^= h;
              s2[5] ^= l;
              s2[14] ^= h;
              s2[15] ^= l;
              s2[24] ^= h;
              s2[25] ^= l;
              s2[34] ^= h;
              s2[35] ^= l;
              s2[44] ^= h;
              s2[45] ^= l;
              h = c4 ^ (c8 << 1 | c9 >>> 31);
              l = c5 ^ (c9 << 1 | c8 >>> 31);
              s2[6] ^= h;
              s2[7] ^= l;
              s2[16] ^= h;
              s2[17] ^= l;
              s2[26] ^= h;
              s2[27] ^= l;
              s2[36] ^= h;
              s2[37] ^= l;
              s2[46] ^= h;
              s2[47] ^= l;
              h = c6 ^ (c0 << 1 | c1 >>> 31);
              l = c7 ^ (c1 << 1 | c0 >>> 31);
              s2[8] ^= h;
              s2[9] ^= l;
              s2[18] ^= h;
              s2[19] ^= l;
              s2[28] ^= h;
              s2[29] ^= l;
              s2[38] ^= h;
              s2[39] ^= l;
              s2[48] ^= h;
              s2[49] ^= l;
              b0 = s2[0];
              b1 = s2[1];
              b32 = s2[11] << 4 | s2[10] >>> 28;
              b33 = s2[10] << 4 | s2[11] >>> 28;
              b14 = s2[20] << 3 | s2[21] >>> 29;
              b15 = s2[21] << 3 | s2[20] >>> 29;
              b46 = s2[31] << 9 | s2[30] >>> 23;
              b47 = s2[30] << 9 | s2[31] >>> 23;
              b28 = s2[40] << 18 | s2[41] >>> 14;
              b29 = s2[41] << 18 | s2[40] >>> 14;
              b20 = s2[2] << 1 | s2[3] >>> 31;
              b21 = s2[3] << 1 | s2[2] >>> 31;
              b2 = s2[13] << 12 | s2[12] >>> 20;
              b3 = s2[12] << 12 | s2[13] >>> 20;
              b34 = s2[22] << 10 | s2[23] >>> 22;
              b35 = s2[23] << 10 | s2[22] >>> 22;
              b16 = s2[33] << 13 | s2[32] >>> 19;
              b17 = s2[32] << 13 | s2[33] >>> 19;
              b48 = s2[42] << 2 | s2[43] >>> 30;
              b49 = s2[43] << 2 | s2[42] >>> 30;
              b40 = s2[5] << 30 | s2[4] >>> 2;
              b41 = s2[4] << 30 | s2[5] >>> 2;
              b22 = s2[14] << 6 | s2[15] >>> 26;
              b23 = s2[15] << 6 | s2[14] >>> 26;
              b4 = s2[25] << 11 | s2[24] >>> 21;
              b5 = s2[24] << 11 | s2[25] >>> 21;
              b36 = s2[34] << 15 | s2[35] >>> 17;
              b37 = s2[35] << 15 | s2[34] >>> 17;
              b18 = s2[45] << 29 | s2[44] >>> 3;
              b19 = s2[44] << 29 | s2[45] >>> 3;
              b10 = s2[6] << 28 | s2[7] >>> 4;
              b11 = s2[7] << 28 | s2[6] >>> 4;
              b42 = s2[17] << 23 | s2[16] >>> 9;
              b43 = s2[16] << 23 | s2[17] >>> 9;
              b24 = s2[26] << 25 | s2[27] >>> 7;
              b25 = s2[27] << 25 | s2[26] >>> 7;
              b6 = s2[36] << 21 | s2[37] >>> 11;
              b7 = s2[37] << 21 | s2[36] >>> 11;
              b38 = s2[47] << 24 | s2[46] >>> 8;
              b39 = s2[46] << 24 | s2[47] >>> 8;
              b30 = s2[8] << 27 | s2[9] >>> 5;
              b31 = s2[9] << 27 | s2[8] >>> 5;
              b12 = s2[18] << 20 | s2[19] >>> 12;
              b13 = s2[19] << 20 | s2[18] >>> 12;
              b44 = s2[29] << 7 | s2[28] >>> 25;
              b45 = s2[28] << 7 | s2[29] >>> 25;
              b26 = s2[38] << 8 | s2[39] >>> 24;
              b27 = s2[39] << 8 | s2[38] >>> 24;
              b8 = s2[48] << 14 | s2[49] >>> 18;
              b9 = s2[49] << 14 | s2[48] >>> 18;
              s2[0] = b0 ^ ~b2 & b4;
              s2[1] = b1 ^ ~b3 & b5;
              s2[10] = b10 ^ ~b12 & b14;
              s2[11] = b11 ^ ~b13 & b15;
              s2[20] = b20 ^ ~b22 & b24;
              s2[21] = b21 ^ ~b23 & b25;
              s2[30] = b30 ^ ~b32 & b34;
              s2[31] = b31 ^ ~b33 & b35;
              s2[40] = b40 ^ ~b42 & b44;
              s2[41] = b41 ^ ~b43 & b45;
              s2[2] = b2 ^ ~b4 & b6;
              s2[3] = b3 ^ ~b5 & b7;
              s2[12] = b12 ^ ~b14 & b16;
              s2[13] = b13 ^ ~b15 & b17;
              s2[22] = b22 ^ ~b24 & b26;
              s2[23] = b23 ^ ~b25 & b27;
              s2[32] = b32 ^ ~b34 & b36;
              s2[33] = b33 ^ ~b35 & b37;
              s2[42] = b42 ^ ~b44 & b46;
              s2[43] = b43 ^ ~b45 & b47;
              s2[4] = b4 ^ ~b6 & b8;
              s2[5] = b5 ^ ~b7 & b9;
              s2[14] = b14 ^ ~b16 & b18;
              s2[15] = b15 ^ ~b17 & b19;
              s2[24] = b24 ^ ~b26 & b28;
              s2[25] = b25 ^ ~b27 & b29;
              s2[34] = b34 ^ ~b36 & b38;
              s2[35] = b35 ^ ~b37 & b39;
              s2[44] = b44 ^ ~b46 & b48;
              s2[45] = b45 ^ ~b47 & b49;
              s2[6] = b6 ^ ~b8 & b0;
              s2[7] = b7 ^ ~b9 & b1;
              s2[16] = b16 ^ ~b18 & b10;
              s2[17] = b17 ^ ~b19 & b11;
              s2[26] = b26 ^ ~b28 & b20;
              s2[27] = b27 ^ ~b29 & b21;
              s2[36] = b36 ^ ~b38 & b30;
              s2[37] = b37 ^ ~b39 & b31;
              s2[46] = b46 ^ ~b48 & b40;
              s2[47] = b47 ^ ~b49 & b41;
              s2[8] = b8 ^ ~b0 & b2;
              s2[9] = b9 ^ ~b1 & b3;
              s2[18] = b18 ^ ~b10 & b12;
              s2[19] = b19 ^ ~b11 & b13;
              s2[28] = b28 ^ ~b20 & b22;
              s2[29] = b29 ^ ~b21 & b23;
              s2[38] = b38 ^ ~b30 & b32;
              s2[39] = b39 ^ ~b31 & b33;
              s2[48] = b48 ^ ~b40 & b42;
              s2[49] = b49 ^ ~b41 & b43;
              s2[0] ^= RC[n];
              s2[1] ^= RC[n + 1];
            }
          };
          if (COMMON_JS) {
            module2.exports = methods;
          } else {
            for (var i2 = 0; i2 < methodNames.length; ++i2) {
              root[methodNames[i2]] = methods[methodNames[i2]];
            }
          }
        })();
      });
      var lib$4 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
          return mod && mod.__esModule ? mod : {default: mod};
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var js_sha3_1 = __importDefault(sha3);
        function keccak256(data) {
          return "0x" + js_sha3_1.default.keccak_256(lib$1.arrayify(data));
        }
        exports3.keccak256 = keccak256;
      });
      var index$4 = unwrapExports(lib$4);
      var lib_1$4 = lib$4.keccak256;
      var _version$a = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "rlp/5.0.1";
      });
      var _version$b = unwrapExports(_version$a);
      var _version_1$5 = _version$a.version;
      var lib$5 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$a.version);
        function arrayifyInteger(value) {
          var result = [];
          while (value) {
            result.unshift(value & 255);
            value >>= 8;
          }
          return result;
        }
        function unarrayifyInteger(data, offset, length) {
          var result = 0;
          for (var i2 = 0; i2 < length; i2++) {
            result = result * 256 + data[offset + i2];
          }
          return result;
        }
        function _encode(object) {
          if (Array.isArray(object)) {
            var payload_1 = [];
            object.forEach(function(child) {
              payload_1 = payload_1.concat(_encode(child));
            });
            if (payload_1.length <= 55) {
              payload_1.unshift(192 + payload_1.length);
              return payload_1;
            }
            var length_1 = arrayifyInteger(payload_1.length);
            length_1.unshift(247 + length_1.length);
            return length_1.concat(payload_1);
          }
          if (!lib$1.isBytesLike(object)) {
            logger.throwArgumentError("RLP object must be BytesLike", "object", object);
          }
          var data = Array.prototype.slice.call(lib$1.arrayify(object));
          if (data.length === 1 && data[0] <= 127) {
            return data;
          } else if (data.length <= 55) {
            data.unshift(128 + data.length);
            return data;
          }
          var length = arrayifyInteger(data.length);
          length.unshift(183 + length.length);
          return length.concat(data);
        }
        function encode(object) {
          return lib$1.hexlify(_encode(object));
        }
        exports3.encode = encode;
        function _decodeChildren(data, offset, childOffset, length) {
          var result = [];
          while (childOffset < offset + 1 + length) {
            var decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
              logger.throwError("child data too short", lib.Logger.errors.BUFFER_OVERRUN, {});
            }
          }
          return {consumed: 1 + length, result};
        }
        function _decode(data, offset) {
          if (data.length === 0) {
            logger.throwError("data too short", lib.Logger.errors.BUFFER_OVERRUN, {});
          }
          if (data[offset] >= 248) {
            var lengthLength = data[offset] - 247;
            if (offset + 1 + lengthLength > data.length) {
              logger.throwError("data short segment too short", lib.Logger.errors.BUFFER_OVERRUN, {});
            }
            var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length_2 > data.length) {
              logger.throwError("data long segment too short", lib.Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);
          } else if (data[offset] >= 192) {
            var length_3 = data[offset] - 192;
            if (offset + 1 + length_3 > data.length) {
              logger.throwError("data array too short", lib.Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length_3);
          } else if (data[offset] >= 184) {
            var lengthLength = data[offset] - 183;
            if (offset + 1 + lengthLength > data.length) {
              logger.throwError("data array too short", lib.Logger.errors.BUFFER_OVERRUN, {});
            }
            var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length_4 > data.length) {
              logger.throwError("data array too short", lib.Logger.errors.BUFFER_OVERRUN, {});
            }
            var result = lib$1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));
            return {consumed: 1 + lengthLength + length_4, result};
          } else if (data[offset] >= 128) {
            var length_5 = data[offset] - 128;
            if (offset + 1 + length_5 > data.length) {
              logger.throwError("data too short", lib.Logger.errors.BUFFER_OVERRUN, {});
            }
            var result = lib$1.hexlify(data.slice(offset + 1, offset + 1 + length_5));
            return {consumed: 1 + length_5, result};
          }
          return {consumed: 1, result: lib$1.hexlify(data[offset])};
        }
        function decode(data) {
          var bytes2 = lib$1.arrayify(data);
          var decoded = _decode(bytes2, 0);
          if (decoded.consumed !== bytes2.length) {
            logger.throwArgumentError("invalid rlp data", "data", data);
          }
          return decoded.result;
        }
        exports3.decode = decode;
      });
      var index$5 = unwrapExports(lib$5);
      var lib_1$5 = lib$5.encode;
      var lib_2$4 = lib$5.decode;
      var _version$c = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "address/5.0.1";
      });
      var _version$d = unwrapExports(_version$c);
      var _version_1$6 = _version$c.version;
      var lib$6 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$c.version);
        function getChecksumAddress(address2) {
          if (!lib$1.isHexString(address2, 20)) {
            logger.throwArgumentError("invalid address", "address", address2);
          }
          address2 = address2.toLowerCase();
          var chars = address2.substring(2).split("");
          var expanded = new Uint8Array(40);
          for (var i3 = 0; i3 < 40; i3++) {
            expanded[i3] = chars[i3].charCodeAt(0);
          }
          var hashed = lib$1.arrayify(lib$4.keccak256(expanded));
          for (var i3 = 0; i3 < 40; i3 += 2) {
            if (hashed[i3 >> 1] >> 4 >= 8) {
              chars[i3] = chars[i3].toUpperCase();
            }
            if ((hashed[i3 >> 1] & 15) >= 8) {
              chars[i3 + 1] = chars[i3 + 1].toUpperCase();
            }
          }
          return "0x" + chars.join("");
        }
        var MAX_SAFE_INTEGER = 9007199254740991;
        function log10(x) {
          if (Math.log10) {
            return Math.log10(x);
          }
          return Math.log(x) / Math.LN10;
        }
        var ibanLookup = {};
        for (var i2 = 0; i2 < 10; i2++) {
          ibanLookup[String(i2)] = String(i2);
        }
        for (var i2 = 0; i2 < 26; i2++) {
          ibanLookup[String.fromCharCode(65 + i2)] = String(10 + i2);
        }
        var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
        function ibanChecksum(address2) {
          address2 = address2.toUpperCase();
          address2 = address2.substring(4) + address2.substring(0, 2) + "00";
          var expanded = address2.split("").map(function(c) {
            return ibanLookup[c];
          }).join("");
          while (expanded.length >= safeDigits) {
            var block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
          }
          var checksum = String(98 - parseInt(expanded, 10) % 97);
          while (checksum.length < 2) {
            checksum = "0" + checksum;
          }
          return checksum;
        }
        ;
        function getAddress(address2) {
          var result = null;
          if (typeof address2 !== "string") {
            logger.throwArgumentError("invalid address", "address", address2);
          }
          if (address2.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            if (address2.substring(0, 2) !== "0x") {
              address2 = "0x" + address2;
            }
            result = getChecksumAddress(address2);
            if (address2.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address2) {
              logger.throwArgumentError("bad address checksum", "address", address2);
            }
          } else if (address2.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            if (address2.substring(2, 4) !== ibanChecksum(address2)) {
              logger.throwArgumentError("bad icap checksum", "address", address2);
            }
            result = new bn.BN(address2.substring(4), 36).toString(16);
            while (result.length < 40) {
              result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
          } else {
            logger.throwArgumentError("invalid address", "address", address2);
          }
          return result;
        }
        exports3.getAddress = getAddress;
        function isAddress(address2) {
          try {
            getAddress(address2);
            return true;
          } catch (error) {
          }
          return false;
        }
        exports3.isAddress = isAddress;
        function getIcapAddress(address2) {
          var base36 = new bn.BN(getAddress(address2).substring(2), 16).toString(36).toUpperCase();
          while (base36.length < 30) {
            base36 = "0" + base36;
          }
          return "XE" + ibanChecksum("XE00" + base36) + base36;
        }
        exports3.getIcapAddress = getIcapAddress;
        function getContractAddress(transaction) {
          var from = null;
          try {
            from = getAddress(transaction.from);
          } catch (error) {
            logger.throwArgumentError("missing from address", "transaction", transaction);
          }
          var nonce = lib$1.stripZeros(lib$1.arrayify(lib$2.BigNumber.from(transaction.nonce).toHexString()));
          return getAddress(lib$1.hexDataSlice(lib$4.keccak256(lib$5.encode([from, nonce])), 12));
        }
        exports3.getContractAddress = getContractAddress;
        function getCreate2Address(from, salt, initCodeHash) {
          if (lib$1.hexDataLength(salt) !== 32) {
            logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
          }
          if (lib$1.hexDataLength(initCodeHash) !== 32) {
            logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
          }
          return getAddress(lib$1.hexDataSlice(lib$4.keccak256(lib$1.concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
        }
        exports3.getCreate2Address = getCreate2Address;
      });
      var index$6 = unwrapExports(lib$6);
      var lib_1$6 = lib$6.getAddress;
      var lib_2$5 = lib$6.isAddress;
      var lib_3$4 = lib$6.getIcapAddress;
      var lib_4$3 = lib$6.getContractAddress;
      var lib_5$3 = lib$6.getCreate2Address;
      var address = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var AddressCoder = function(_super) {
          __extends(AddressCoder2, _super);
          function AddressCoder2(localName) {
            return _super.call(this, "address", "address", localName, false) || this;
          }
          AddressCoder2.prototype.encode = function(writer, value) {
            try {
              lib$6.getAddress(value);
            } catch (error) {
              this._throwError(error.message, value);
            }
            return writer.writeValue(value);
          };
          AddressCoder2.prototype.decode = function(reader) {
            return lib$6.getAddress(lib$1.hexZeroPad(reader.readValue().toHexString(), 20));
          };
          return AddressCoder2;
        }(abstractCoder.Coder);
        exports3.AddressCoder = AddressCoder;
      });
      var address$1 = unwrapExports(address);
      var address_2 = address.AddressCoder;
      var anonymous = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var AnonymousCoder = function(_super) {
          __extends(AnonymousCoder2, _super);
          function AnonymousCoder2(coder) {
            var _this = _super.call(this, coder.name, coder.type, void 0, coder.dynamic) || this;
            _this.coder = coder;
            return _this;
          }
          AnonymousCoder2.prototype.encode = function(writer, value) {
            return this.coder.encode(writer, value);
          };
          AnonymousCoder2.prototype.decode = function(reader) {
            return this.coder.decode(reader);
          };
          return AnonymousCoder2;
        }(abstractCoder.Coder);
        exports3.AnonymousCoder = AnonymousCoder;
      });
      var anonymous$1 = unwrapExports(anonymous);
      var anonymous_1 = anonymous.AnonymousCoder;
      var array = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$8.version);
        function pack(writer, coders, values) {
          var arrayValues = null;
          if (Array.isArray(values)) {
            arrayValues = values;
          } else if (values && typeof values === "object") {
            var unique_1 = {};
            arrayValues = coders.map(function(coder) {
              var name2 = coder.localName;
              if (!name2) {
                logger.throwError("cannot encode object for signature with missing names", lib.Logger.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder,
                  value: values
                });
              }
              if (unique_1[name2]) {
                logger.throwError("cannot encode object for signature with duplicate names", lib.Logger.errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder,
                  value: values
                });
              }
              unique_1[name2] = true;
              return values[name2];
            });
          } else {
            logger.throwArgumentError("invalid tuple value", "tuple", values);
          }
          if (coders.length !== arrayValues.length) {
            logger.throwArgumentError("types/value length mismatch", "tuple", values);
          }
          var staticWriter = new abstractCoder.Writer(writer.wordSize);
          var dynamicWriter = new abstractCoder.Writer(writer.wordSize);
          var updateFuncs = [];
          coders.forEach(function(coder, index2) {
            var value = arrayValues[index2];
            if (coder.dynamic) {
              var dynamicOffset_1 = dynamicWriter.length;
              coder.encode(dynamicWriter, value);
              var updateFunc_1 = staticWriter.writeUpdatableValue();
              updateFuncs.push(function(baseOffset) {
                updateFunc_1(baseOffset + dynamicOffset_1);
              });
            } else {
              coder.encode(staticWriter, value);
            }
          });
          updateFuncs.forEach(function(func) {
            func(staticWriter.length);
          });
          var length = writer.writeBytes(staticWriter.data);
          length += writer.writeBytes(dynamicWriter.data);
          return length;
        }
        exports3.pack = pack;
        function unpack(reader, coders) {
          var values = [];
          var baseReader = reader.subReader(0);
          var dynamicLength = 0;
          coders.forEach(function(coder) {
            var value = null;
            if (coder.dynamic) {
              var offset = reader.readValue();
              var offsetReader = baseReader.subReader(offset.toNumber());
              try {
                value = coder.decode(offsetReader);
              } catch (error) {
                if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {
                  throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
              }
              dynamicLength += offsetReader.consumed;
            } else {
              try {
                value = coder.decode(reader);
              } catch (error) {
                if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {
                  throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
              }
            }
            if (value != void 0) {
              values.push(value);
            }
          });
          reader.readBytes(dynamicLength);
          var uniqueNames = coders.reduce(function(accum, coder) {
            var name2 = coder.localName;
            if (name2) {
              if (!accum[name2]) {
                accum[name2] = 0;
              }
              accum[name2]++;
            }
            return accum;
          }, {});
          coders.forEach(function(coder, index2) {
            var name2 = coder.localName;
            if (!name2 || uniqueNames[name2] !== 1) {
              return;
            }
            if (name2 === "length") {
              name2 = "_length";
            }
            if (values[name2] != null) {
              return;
            }
            var value = values[index2];
            if (value instanceof Error) {
              Object.defineProperty(values, name2, {
                get: function() {
                  throw value;
                }
              });
            } else {
              values[name2] = value;
            }
          });
          var _loop_1 = function(i3) {
            var value = values[i3];
            if (value instanceof Error) {
              Object.defineProperty(values, i3, {
                get: function() {
                  throw value;
                }
              });
            }
          };
          for (var i2 = 0; i2 < values.length; i2++) {
            _loop_1(i2);
          }
          return Object.freeze(values);
        }
        exports3.unpack = unpack;
        var ArrayCoder = function(_super) {
          __extends(ArrayCoder2, _super);
          function ArrayCoder2(coder, length, localName) {
            var _this = this;
            var type = coder.type + "[" + (length >= 0 ? length : "") + "]";
            var dynamic = length === -1 || coder.dynamic;
            _this = _super.call(this, "array", type, localName, dynamic) || this;
            _this.coder = coder;
            _this.length = length;
            return _this;
          }
          ArrayCoder2.prototype.encode = function(writer, value) {
            if (!Array.isArray(value)) {
              this._throwError("expected array value", value);
            }
            var count = this.length;
            if (count === -1) {
              count = value.length;
              writer.writeValue(value.length);
            }
            logger.checkArgumentCount(count, value.length, "coder array" + (this.localName ? " " + this.localName : ""));
            var coders = [];
            for (var i2 = 0; i2 < value.length; i2++) {
              coders.push(this.coder);
            }
            return pack(writer, coders, value);
          };
          ArrayCoder2.prototype.decode = function(reader) {
            var count = this.length;
            if (count === -1) {
              count = reader.readValue().toNumber();
            }
            var coders = [];
            for (var i2 = 0; i2 < count; i2++) {
              coders.push(new anonymous.AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
          };
          return ArrayCoder2;
        }(abstractCoder.Coder);
        exports3.ArrayCoder = ArrayCoder;
      });
      var array$1 = unwrapExports(array);
      var array_1 = array.pack;
      var array_2 = array.unpack;
      var array_3 = array.ArrayCoder;
      var boolean_1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var BooleanCoder = function(_super) {
          __extends(BooleanCoder2, _super);
          function BooleanCoder2(localName) {
            return _super.call(this, "bool", "bool", localName, false) || this;
          }
          BooleanCoder2.prototype.encode = function(writer, value) {
            return writer.writeValue(value ? 1 : 0);
          };
          BooleanCoder2.prototype.decode = function(reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
          };
          return BooleanCoder2;
        }(abstractCoder.Coder);
        exports3.BooleanCoder = BooleanCoder;
      });
      var boolean = unwrapExports(boolean_1);
      var boolean_2 = boolean_1.BooleanCoder;
      var bytes = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var DynamicBytesCoder = function(_super) {
          __extends(DynamicBytesCoder2, _super);
          function DynamicBytesCoder2(type, localName) {
            return _super.call(this, type, type, localName, true) || this;
          }
          DynamicBytesCoder2.prototype.encode = function(writer, value) {
            value = lib$1.arrayify(value);
            var length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
          };
          DynamicBytesCoder2.prototype.decode = function(reader) {
            return reader.readBytes(reader.readValue().toNumber());
          };
          return DynamicBytesCoder2;
        }(abstractCoder.Coder);
        exports3.DynamicBytesCoder = DynamicBytesCoder;
        var BytesCoder = function(_super) {
          __extends(BytesCoder2, _super);
          function BytesCoder2(localName) {
            return _super.call(this, "bytes", localName) || this;
          }
          BytesCoder2.prototype.decode = function(reader) {
            return reader.coerce(this.name, lib$1.hexlify(_super.prototype.decode.call(this, reader)));
          };
          return BytesCoder2;
        }(DynamicBytesCoder);
        exports3.BytesCoder = BytesCoder;
      });
      var bytes$1 = unwrapExports(bytes);
      var bytes_2 = bytes.DynamicBytesCoder;
      var bytes_3 = bytes.BytesCoder;
      var fixedBytes = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var FixedBytesCoder = function(_super) {
          __extends(FixedBytesCoder2, _super);
          function FixedBytesCoder2(size, localName) {
            var _this = this;
            var name2 = "bytes" + String(size);
            _this = _super.call(this, name2, name2, localName, false) || this;
            _this.size = size;
            return _this;
          }
          FixedBytesCoder2.prototype.encode = function(writer, value) {
            var data = lib$1.arrayify(value);
            if (data.length !== this.size) {
              this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
          };
          FixedBytesCoder2.prototype.decode = function(reader) {
            return reader.coerce(this.name, lib$1.hexlify(reader.readBytes(this.size)));
          };
          return FixedBytesCoder2;
        }(abstractCoder.Coder);
        exports3.FixedBytesCoder = FixedBytesCoder;
      });
      var fixedBytes$1 = unwrapExports(fixedBytes);
      var fixedBytes_1 = fixedBytes.FixedBytesCoder;
      var _null = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var NullCoder = function(_super) {
          __extends(NullCoder2, _super);
          function NullCoder2(localName) {
            return _super.call(this, "null", "", localName, false) || this;
          }
          NullCoder2.prototype.encode = function(writer, value) {
            if (value != null) {
              this._throwError("not null", value);
            }
            return writer.writeBytes([]);
          };
          NullCoder2.prototype.decode = function(reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
          };
          return NullCoder2;
        }(abstractCoder.Coder);
        exports3.NullCoder = NullCoder;
      });
      var _null$1 = unwrapExports(_null);
      var _null_1 = _null.NullCoder;
      var lib$7 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var AddressZero = "0x0000000000000000000000000000000000000000";
        exports3.AddressZero = AddressZero;
        var HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
        exports3.HashZero = HashZero;
        var EtherSymbol = "Ξ";
        exports3.EtherSymbol = EtherSymbol;
        var NegativeOne = lib$2.BigNumber.from(-1);
        exports3.NegativeOne = NegativeOne;
        var Zero = lib$2.BigNumber.from(0);
        exports3.Zero = Zero;
        var One = lib$2.BigNumber.from(1);
        exports3.One = One;
        var Two = lib$2.BigNumber.from(2);
        exports3.Two = Two;
        var WeiPerEther = lib$2.BigNumber.from("1000000000000000000");
        exports3.WeiPerEther = WeiPerEther;
        var MaxUint256 = lib$2.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        exports3.MaxUint256 = MaxUint256;
      });
      var index$7 = unwrapExports(lib$7);
      var lib_1$7 = lib$7.AddressZero;
      var lib_2$6 = lib$7.HashZero;
      var lib_3$5 = lib$7.EtherSymbol;
      var lib_4$4 = lib$7.NegativeOne;
      var lib_5$4 = lib$7.Zero;
      var lib_6$2 = lib$7.One;
      var lib_7$2 = lib$7.Two;
      var lib_8$1 = lib$7.WeiPerEther;
      var lib_9$1 = lib$7.MaxUint256;
      var number = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var NumberCoder = function(_super) {
          __extends(NumberCoder2, _super);
          function NumberCoder2(size, signed, localName) {
            var _this = this;
            var name2 = (signed ? "int" : "uint") + size * 8;
            _this = _super.call(this, name2, name2, localName, false) || this;
            _this.size = size;
            _this.signed = signed;
            return _this;
          }
          NumberCoder2.prototype.encode = function(writer, value) {
            var v = lib$2.BigNumber.from(value);
            var maxUintValue = lib$7.MaxUint256.mask(writer.wordSize * 8);
            if (this.signed) {
              var bounds = maxUintValue.mask(this.size * 8 - 1);
              if (v.gt(bounds) || v.lt(bounds.add(lib$7.One).mul(lib$7.NegativeOne))) {
                this._throwError("value out-of-bounds", value);
              }
            } else if (v.lt(lib$7.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
              this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
              v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
          };
          NumberCoder2.prototype.decode = function(reader) {
            var value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
              value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
          };
          return NumberCoder2;
        }(abstractCoder.Coder);
        exports3.NumberCoder = NumberCoder;
      });
      var number$1 = unwrapExports(number);
      var number_1 = number.NumberCoder;
      var _version$e = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "strings/5.0.1";
      });
      var _version$f = unwrapExports(_version$e);
      var _version_1$7 = _version$e.version;
      var utf8 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$e.version);
        var UnicodeNormalizationForm;
        (function(UnicodeNormalizationForm2) {
          UnicodeNormalizationForm2["current"] = "";
          UnicodeNormalizationForm2["NFC"] = "NFC";
          UnicodeNormalizationForm2["NFD"] = "NFD";
          UnicodeNormalizationForm2["NFKC"] = "NFKC";
          UnicodeNormalizationForm2["NFKD"] = "NFKD";
        })(UnicodeNormalizationForm = exports3.UnicodeNormalizationForm || (exports3.UnicodeNormalizationForm = {}));
        ;
        var Utf8ErrorReason;
        (function(Utf8ErrorReason2) {
          Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
          Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
          Utf8ErrorReason2["OVERRUN"] = "string overrun";
          Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
          Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
          Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
          Utf8ErrorReason2["OVERLONG"] = "overlong representation";
        })(Utf8ErrorReason = exports3.Utf8ErrorReason || (exports3.Utf8ErrorReason = {}));
        ;
        function errorFunc(reason, offset, bytes2, output, badCodepoint) {
          return logger.throwArgumentError("invalid codepoint at offset " + offset + "; " + reason, "bytes", bytes2);
        }
        function ignoreFunc(reason, offset, bytes2, output, badCodepoint) {
          if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            var i2 = 0;
            for (var o = offset + 1; o < bytes2.length; o++) {
              if (bytes2[o] >> 6 !== 2) {
                break;
              }
              i2++;
            }
            return i2;
          }
          if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes2.length - offset - 1;
          }
          return 0;
        }
        function replaceFunc(reason, offset, bytes2, output, badCodepoint) {
          if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
          }
          output.push(65533);
          return ignoreFunc(reason, offset, bytes2, output, badCodepoint);
        }
        exports3.Utf8ErrorFuncs = Object.freeze({
          error: errorFunc,
          ignore: ignoreFunc,
          replace: replaceFunc
        });
        function getUtf8CodePoints(bytes2, onError) {
          if (onError == null) {
            onError = exports3.Utf8ErrorFuncs.error;
          }
          bytes2 = lib$1.arrayify(bytes2);
          var result = [];
          var i2 = 0;
          while (i2 < bytes2.length) {
            var c = bytes2[i2++];
            if (c >> 7 === 0) {
              result.push(c);
              continue;
            }
            var extraLength = null;
            var overlongMask = null;
            if ((c & 224) === 192) {
              extraLength = 1;
              overlongMask = 127;
            } else if ((c & 240) === 224) {
              extraLength = 2;
              overlongMask = 2047;
            } else if ((c & 248) === 240) {
              extraLength = 3;
              overlongMask = 65535;
            } else {
              if ((c & 192) === 128) {
                i2 += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i2 - 1, bytes2, result);
              } else {
                i2 += onError(Utf8ErrorReason.BAD_PREFIX, i2 - 1, bytes2, result);
              }
              continue;
            }
            if (i2 - 1 + extraLength >= bytes2.length) {
              i2 += onError(Utf8ErrorReason.OVERRUN, i2 - 1, bytes2, result);
              continue;
            }
            var res = c & (1 << 8 - extraLength - 1) - 1;
            for (var j = 0; j < extraLength; j++) {
              var nextChar = bytes2[i2];
              if ((nextChar & 192) != 128) {
                i2 += onError(Utf8ErrorReason.MISSING_CONTINUE, i2, bytes2, result);
                res = null;
                break;
              }
              ;
              res = res << 6 | nextChar & 63;
              i2++;
            }
            if (res === null) {
              continue;
            }
            if (res > 1114111) {
              i2 += onError(Utf8ErrorReason.OUT_OF_RANGE, i2 - 1 - extraLength, bytes2, result, res);
              continue;
            }
            if (res >= 55296 && res <= 57343) {
              i2 += onError(Utf8ErrorReason.UTF16_SURROGATE, i2 - 1 - extraLength, bytes2, result, res);
              continue;
            }
            if (res <= overlongMask) {
              i2 += onError(Utf8ErrorReason.OVERLONG, i2 - 1 - extraLength, bytes2, result, res);
              continue;
            }
            result.push(res);
          }
          return result;
        }
        function toUtf8Bytes(str, form) {
          if (form === void 0) {
            form = UnicodeNormalizationForm.current;
          }
          if (form != UnicodeNormalizationForm.current) {
            logger.checkNormalize();
            str = str.normalize(form);
          }
          var result = [];
          for (var i2 = 0; i2 < str.length; i2++) {
            var c = str.charCodeAt(i2);
            if (c < 128) {
              result.push(c);
            } else if (c < 2048) {
              result.push(c >> 6 | 192);
              result.push(c & 63 | 128);
            } else if ((c & 64512) == 55296) {
              i2++;
              var c2 = str.charCodeAt(i2);
              if (i2 >= str.length || (c2 & 64512) !== 56320) {
                throw new Error("invalid utf-8 string");
              }
              var pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
              result.push(pair >> 18 | 240);
              result.push(pair >> 12 & 63 | 128);
              result.push(pair >> 6 & 63 | 128);
              result.push(pair & 63 | 128);
            } else {
              result.push(c >> 12 | 224);
              result.push(c >> 6 & 63 | 128);
              result.push(c & 63 | 128);
            }
          }
          return lib$1.arrayify(result);
        }
        exports3.toUtf8Bytes = toUtf8Bytes;
        ;
        function escapeChar(value) {
          var hex = "0000" + value.toString(16);
          return "\\u" + hex.substring(hex.length - 4);
        }
        function _toEscapedUtf8String(bytes2, onError) {
          return '"' + getUtf8CodePoints(bytes2, onError).map(function(codePoint) {
            if (codePoint < 256) {
              switch (codePoint) {
                case 8:
                  return "\\b";
                case 9:
                  return "\\t";
                case 10:
                  return "\\n";
                case 13:
                  return "\\r";
                case 34:
                  return '\\"';
                case 92:
                  return "\\\\";
              }
              if (codePoint >= 32 && codePoint < 127) {
                return String.fromCharCode(codePoint);
              }
            }
            if (codePoint <= 65535) {
              return escapeChar(codePoint);
            }
            codePoint -= 65536;
            return escapeChar((codePoint >> 10 & 1023) + 55296) + escapeChar((codePoint & 1023) + 56320);
          }).join("") + '"';
        }
        exports3._toEscapedUtf8String = _toEscapedUtf8String;
        function _toUtf8String(codePoints) {
          return codePoints.map(function(codePoint) {
            if (codePoint <= 65535) {
              return String.fromCharCode(codePoint);
            }
            codePoint -= 65536;
            return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
          }).join("");
        }
        exports3._toUtf8String = _toUtf8String;
        function toUtf8String(bytes2, onError) {
          return _toUtf8String(getUtf8CodePoints(bytes2, onError));
        }
        exports3.toUtf8String = toUtf8String;
        function toUtf8CodePoints(str, form) {
          if (form === void 0) {
            form = UnicodeNormalizationForm.current;
          }
          return getUtf8CodePoints(toUtf8Bytes(str, form));
        }
        exports3.toUtf8CodePoints = toUtf8CodePoints;
      });
      var utf8$1 = unwrapExports(utf8);
      var utf8_1 = utf8.UnicodeNormalizationForm;
      var utf8_2 = utf8.Utf8ErrorReason;
      var utf8_3 = utf8.Utf8ErrorFuncs;
      var utf8_4 = utf8.toUtf8Bytes;
      var utf8_5 = utf8._toEscapedUtf8String;
      var utf8_6 = utf8._toUtf8String;
      var utf8_7 = utf8.toUtf8String;
      var utf8_8 = utf8.toUtf8CodePoints;
      var bytes32 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        function formatBytes32String(text) {
          var bytes2 = utf8.toUtf8Bytes(text);
          if (bytes2.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
          }
          return lib$1.hexlify(lib$1.concat([bytes2, lib$7.HashZero]).slice(0, 32));
        }
        exports3.formatBytes32String = formatBytes32String;
        function parseBytes32String(bytes2) {
          var data = lib$1.arrayify(bytes2);
          if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
          }
          if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
          }
          var length = 31;
          while (data[length - 1] === 0) {
            length--;
          }
          return utf8.toUtf8String(data.slice(0, length));
        }
        exports3.parseBytes32String = parseBytes32String;
      });
      var bytes32$1 = unwrapExports(bytes32);
      var bytes32_1 = bytes32.formatBytes32String;
      var bytes32_2 = bytes32.parseBytes32String;
      var idna = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        function bytes2(data) {
          if (data.length % 4 !== 0) {
            throw new Error("bad data");
          }
          var result = [];
          for (var i2 = 0; i2 < data.length; i2 += 4) {
            result.push(parseInt(data.substring(i2, i2 + 4), 16));
          }
          return result;
        }
        function createTable(data, func) {
          if (!func) {
            func = function(value) {
              return [parseInt(value, 16)];
            };
          }
          var lo = 0;
          var result = {};
          data.split(",").forEach(function(pair) {
            var comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
          });
          return result;
        }
        function createRangeTable(data) {
          var hi = 0;
          return data.split(",").map(function(v) {
            var comps = v.split("-");
            if (comps.length === 1) {
              comps[1] = "0";
            } else if (comps[1] === "") {
              comps[1] = "1";
            }
            var lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return {l: lo, h: hi};
          });
        }
        function matchMap(value, ranges) {
          var lo = 0;
          for (var i2 = 0; i2 < ranges.length; i2++) {
            var range = ranges[i2];
            lo += range.l;
            if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
              if (range.e && range.e.indexOf(value - lo) !== -1) {
                continue;
              }
              return range;
            }
          }
          return null;
        }
        var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
        var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function(v) {
          return parseInt(v, 16);
        });
        var Table_B_2_ranges = [
          {h: 25, s: 32, l: 65},
          {h: 30, s: 32, e: [23], l: 127},
          {h: 54, s: 1, e: [48], l: 64, d: 2},
          {h: 14, s: 1, l: 57, d: 2},
          {h: 44, s: 1, l: 17, d: 2},
          {h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2},
          {h: 16, s: 1, l: 68, d: 2},
          {h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2},
          {h: 26, s: 32, e: [17], l: 435},
          {h: 22, s: 1, l: 71, d: 2},
          {h: 15, s: 80, l: 40},
          {h: 31, s: 32, l: 16},
          {h: 32, s: 1, l: 80, d: 2},
          {h: 52, s: 1, l: 42, d: 2},
          {h: 12, s: 1, l: 55, d: 2},
          {h: 40, s: 1, e: [38], l: 15, d: 2},
          {h: 14, s: 1, l: 48, d: 2},
          {h: 37, s: 48, l: 49},
          {h: 148, s: 1, l: 6351, d: 2},
          {h: 88, s: 1, l: 160, d: 2},
          {h: 15, s: 16, l: 704},
          {h: 25, s: 26, l: 854},
          {h: 25, s: 32, l: 55915},
          {h: 37, s: 40, l: 1247},
          {h: 25, s: -119711, l: 53248},
          {h: 25, s: -119763, l: 52},
          {h: 25, s: -119815, l: 52},
          {h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52},
          {h: 25, s: -119919, l: 52},
          {h: 24, s: -119971, e: [2, 7, 8, 17], l: 52},
          {h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52},
          {h: 25, s: -120075, l: 52},
          {h: 25, s: -120127, l: 52},
          {h: 25, s: -120179, l: 52},
          {h: 25, s: -120231, l: 52},
          {h: 25, s: -120283, l: 52},
          {h: 25, s: -120335, l: 52},
          {h: 24, s: -119543, e: [17], l: 56},
          {h: 24, s: -119601, e: [17], l: 58},
          {h: 24, s: -119659, e: [17], l: 58},
          {h: 24, s: -119717, e: [17], l: 58},
          {h: 24, s: -119775, e: [17], l: 58}
        ];
        var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
        var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
        var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
        var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
        function flatten(values) {
          return values.reduce(function(accum, value) {
            value.forEach(function(value2) {
              accum.push(value2);
            });
            return accum;
          }, []);
        }
        function _nameprepTableA1(codepoint) {
          return !!matchMap(codepoint, Table_A_1_ranges);
        }
        exports3._nameprepTableA1 = _nameprepTableA1;
        function _nameprepTableB2(codepoint) {
          var range = matchMap(codepoint, Table_B_2_ranges);
          if (range) {
            return [codepoint + range.s];
          }
          var codes = Table_B_2_lut_abs[codepoint];
          if (codes) {
            return codes;
          }
          var shift = Table_B_2_lut_rel[codepoint];
          if (shift) {
            return [codepoint + shift[0]];
          }
          var complex = Table_B_2_complex[codepoint];
          if (complex) {
            return complex;
          }
          return null;
        }
        exports3._nameprepTableB2 = _nameprepTableB2;
        function _nameprepTableC(codepoint) {
          return !!matchMap(codepoint, Table_C_ranges);
        }
        exports3._nameprepTableC = _nameprepTableC;
        function nameprep(value) {
          if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
            return value.toLowerCase();
          }
          var codes = utf8.toUtf8CodePoints(value);
          codes = flatten(codes.map(function(code) {
            if (Table_B_1_flags.indexOf(code) >= 0) {
              return [];
            }
            if (code >= 65024 && code <= 65039) {
              return [];
            }
            var codesTableB2 = _nameprepTableB2(code);
            if (codesTableB2) {
              return codesTableB2;
            }
            return [code];
          }));
          codes = utf8.toUtf8CodePoints(utf8._toUtf8String(codes), utf8.UnicodeNormalizationForm.NFKC);
          codes.forEach(function(code) {
            if (_nameprepTableC(code)) {
              throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }
          });
          codes.forEach(function(code) {
            if (_nameprepTableA1(code)) {
              throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            }
          });
          var name2 = utf8._toUtf8String(codes);
          if (name2.substring(0, 1) === "-" || name2.substring(2, 4) === "--" || name2.substring(name2.length - 1) === "-") {
            throw new Error("invalid hyphen");
          }
          if (name2.length > 63) {
            throw new Error("too long");
          }
          return name2;
        }
        exports3.nameprep = nameprep;
      });
      var idna$1 = unwrapExports(idna);
      var idna_1 = idna._nameprepTableA1;
      var idna_2 = idna._nameprepTableB2;
      var idna_3 = idna._nameprepTableC;
      var idna_4 = idna.nameprep;
      var lib$8 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.formatBytes32String = bytes32.formatBytes32String;
        exports3.parseBytes32String = bytes32.parseBytes32String;
        exports3.nameprep = idna.nameprep;
        exports3._toEscapedUtf8String = utf8._toEscapedUtf8String;
        exports3.toUtf8Bytes = utf8.toUtf8Bytes;
        exports3.toUtf8CodePoints = utf8.toUtf8CodePoints;
        exports3.toUtf8String = utf8.toUtf8String;
        exports3.UnicodeNormalizationForm = utf8.UnicodeNormalizationForm;
        exports3.Utf8ErrorFuncs = utf8.Utf8ErrorFuncs;
        exports3.Utf8ErrorReason = utf8.Utf8ErrorReason;
      });
      var index$8 = unwrapExports(lib$8);
      var lib_1$8 = lib$8.formatBytes32String;
      var lib_2$7 = lib$8.parseBytes32String;
      var lib_3$6 = lib$8.nameprep;
      var lib_4$5 = lib$8._toEscapedUtf8String;
      var lib_5$5 = lib$8.toUtf8Bytes;
      var lib_6$3 = lib$8.toUtf8CodePoints;
      var lib_7$3 = lib$8.toUtf8String;
      var lib_8$2 = lib$8.UnicodeNormalizationForm;
      var lib_9$2 = lib$8.Utf8ErrorFuncs;
      var lib_10$1 = lib$8.Utf8ErrorReason;
      var string = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var StringCoder = function(_super) {
          __extends(StringCoder2, _super);
          function StringCoder2(localName) {
            return _super.call(this, "string", localName) || this;
          }
          StringCoder2.prototype.encode = function(writer, value) {
            return _super.prototype.encode.call(this, writer, lib$8.toUtf8Bytes(value));
          };
          StringCoder2.prototype.decode = function(reader) {
            return lib$8.toUtf8String(_super.prototype.decode.call(this, reader));
          };
          return StringCoder2;
        }(bytes.DynamicBytesCoder);
        exports3.StringCoder = StringCoder;
      });
      var string$1 = unwrapExports(string);
      var string_1 = string.StringCoder;
      var tuple = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var TupleCoder = function(_super) {
          __extends(TupleCoder2, _super);
          function TupleCoder2(coders, localName) {
            var _this = this;
            var dynamic = false;
            var types = [];
            coders.forEach(function(coder) {
              if (coder.dynamic) {
                dynamic = true;
              }
              types.push(coder.type);
            });
            var type = "tuple(" + types.join(",") + ")";
            _this = _super.call(this, "tuple", type, localName, dynamic) || this;
            _this.coders = coders;
            return _this;
          }
          TupleCoder2.prototype.encode = function(writer, value) {
            return array.pack(writer, this.coders, value);
          };
          TupleCoder2.prototype.decode = function(reader) {
            return reader.coerce(this.name, array.unpack(reader, this.coders));
          };
          return TupleCoder2;
        }(abstractCoder.Coder);
        exports3.TupleCoder = TupleCoder;
      });
      var tuple$1 = unwrapExports(tuple);
      var tuple_1 = tuple.TupleCoder;
      var abiCoder = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$8.version);
        var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
        var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
        var AbiCoder = function() {
          function AbiCoder2(coerceFunc) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, AbiCoder2);
            lib$3.defineReadOnly(this, "coerceFunc", coerceFunc || null);
          }
          AbiCoder2.prototype._getCoder = function(param) {
            var _this = this;
            switch (param.baseType) {
              case "address":
                return new address.AddressCoder(param.name);
              case "bool":
                return new boolean_1.BooleanCoder(param.name);
              case "string":
                return new string.StringCoder(param.name);
              case "bytes":
                return new bytes.BytesCoder(param.name);
              case "array":
                return new array.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
              case "tuple":
                return new tuple.TupleCoder((param.components || []).map(function(component) {
                  return _this._getCoder(component);
                }), param.name);
              case "":
                return new _null.NullCoder(param.name);
            }
            var match = param.type.match(paramTypeNumber);
            if (match) {
              var size = parseInt(match[2] || "256");
              if (size === 0 || size > 256 || size % 8 !== 0) {
                logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
              }
              return new number.NumberCoder(size / 8, match[1] === "int", param.name);
            }
            match = param.type.match(paramTypeBytes);
            if (match) {
              var size = parseInt(match[1]);
              if (size === 0 || size > 32) {
                logger.throwArgumentError("invalid bytes length", "param", param);
              }
              return new fixedBytes.FixedBytesCoder(size, param.name);
            }
            return logger.throwArgumentError("invalid type", "type", param.type);
          };
          AbiCoder2.prototype._getWordSize = function() {
            return 32;
          };
          AbiCoder2.prototype._getReader = function(data) {
            return new abstractCoder.Reader(data, this._getWordSize(), this.coerceFunc);
          };
          AbiCoder2.prototype._getWriter = function() {
            return new abstractCoder.Writer(this._getWordSize());
          };
          AbiCoder2.prototype.encode = function(types, values) {
            var _this = this;
            if (types.length !== values.length) {
              logger.throwError("types/values length mismatch", lib.Logger.errors.INVALID_ARGUMENT, {
                count: {types: types.length, values: values.length},
                value: {types, values}
              });
            }
            var coders = types.map(function(type) {
              return _this._getCoder(fragments.ParamType.from(type));
            });
            var coder = new tuple.TupleCoder(coders, "_");
            var writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
          };
          AbiCoder2.prototype.decode = function(types, data) {
            var _this = this;
            var coders = types.map(function(type) {
              return _this._getCoder(fragments.ParamType.from(type));
            });
            var coder = new tuple.TupleCoder(coders, "_");
            return coder.decode(this._getReader(lib$1.arrayify(data)));
          };
          return AbiCoder2;
        }();
        exports3.AbiCoder = AbiCoder;
        exports3.defaultAbiCoder = new AbiCoder();
      });
      var abiCoder$1 = unwrapExports(abiCoder);
      var abiCoder_1 = abiCoder.AbiCoder;
      var abiCoder_2 = abiCoder.defaultAbiCoder;
      var _version$g = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "hash/5.0.1";
      });
      var _version$h = unwrapExports(_version$g);
      var _version_1$8 = _version$g.version;
      var lib$9 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$g.version);
        var Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        var Partition = new RegExp("^((.*)\\.)?([^.]+)$");
        function isValidName(name2) {
          try {
            var comps = name2.split(".");
            for (var i2 = 0; i2 < comps.length; i2++) {
              if (lib$8.nameprep(comps[i2]).length === 0) {
                throw new Error("empty");
              }
            }
            return true;
          } catch (error) {
          }
          return false;
        }
        exports3.isValidName = isValidName;
        function namehash(name2) {
          if (typeof name2 !== "string") {
            logger.throwArgumentError("invalid address - " + String(name2), "name", name2);
          }
          var result = Zeros;
          while (name2.length) {
            var partition = name2.match(Partition);
            var label = lib$8.toUtf8Bytes(lib$8.nameprep(partition[3]));
            result = lib$4.keccak256(lib$1.concat([result, lib$4.keccak256(label)]));
            name2 = partition[2] || "";
          }
          return lib$1.hexlify(result);
        }
        exports3.namehash = namehash;
        function id(text) {
          return lib$4.keccak256(lib$8.toUtf8Bytes(text));
        }
        exports3.id = id;
        exports3.messagePrefix = "Ethereum Signed Message:\n";
        function hashMessage(message) {
          if (typeof message === "string") {
            message = lib$8.toUtf8Bytes(message);
          }
          return lib$4.keccak256(lib$1.concat([
            lib$8.toUtf8Bytes(exports3.messagePrefix),
            lib$8.toUtf8Bytes(String(message.length)),
            message
          ]));
        }
        exports3.hashMessage = hashMessage;
      });
      var index$9 = unwrapExports(lib$9);
      var lib_1$9 = lib$9.isValidName;
      var lib_2$8 = lib$9.namehash;
      var lib_3$7 = lib$9.id;
      var lib_4$6 = lib$9.messagePrefix;
      var lib_5$6 = lib$9.hashMessage;
      var _interface = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.checkResultErrors = abstractCoder.checkResultErrors;
        var logger = new lib.Logger(_version$8.version);
        var LogDescription = function(_super) {
          __extends(LogDescription2, _super);
          function LogDescription2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          return LogDescription2;
        }(lib$3.Description);
        exports3.LogDescription = LogDescription;
        var TransactionDescription = function(_super) {
          __extends(TransactionDescription2, _super);
          function TransactionDescription2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          return TransactionDescription2;
        }(lib$3.Description);
        exports3.TransactionDescription = TransactionDescription;
        var Indexed = function(_super) {
          __extends(Indexed2, _super);
          function Indexed2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          Indexed2.isIndexed = function(value) {
            return !!(value && value._isIndexed);
          };
          return Indexed2;
        }(lib$3.Description);
        exports3.Indexed = Indexed;
        function wrapAccessError(property, error) {
          var wrap = new Error("deferred error during ABI decoding triggered accessing " + property);
          wrap.error = error;
          return wrap;
        }
        var Interface = function() {
          function Interface2(fragments$12) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Interface2);
            var abi = [];
            if (typeof fragments$12 === "string") {
              abi = JSON.parse(fragments$12);
            } else {
              abi = fragments$12;
            }
            lib$3.defineReadOnly(this, "fragments", abi.map(function(fragment) {
              return fragments.Fragment.from(fragment);
            }).filter(function(fragment) {
              return fragment != null;
            }));
            lib$3.defineReadOnly(this, "_abiCoder", lib$3.getStatic(_newTarget, "getAbiCoder")());
            lib$3.defineReadOnly(this, "functions", {});
            lib$3.defineReadOnly(this, "errors", {});
            lib$3.defineReadOnly(this, "events", {});
            lib$3.defineReadOnly(this, "structs", {});
            this.fragments.forEach(function(fragment) {
              var bucket = null;
              switch (fragment.type) {
                case "constructor":
                  if (_this.deploy) {
                    logger.warn("duplicate definition - constructor");
                    return;
                  }
                  lib$3.defineReadOnly(_this, "deploy", fragment);
                  return;
                case "function":
                  bucket = _this.functions;
                  break;
                case "event":
                  bucket = _this.events;
                  break;
                default:
                  return;
              }
              var signature2 = fragment.format();
              if (bucket[signature2]) {
                logger.warn("duplicate definition - " + signature2);
                return;
              }
              bucket[signature2] = fragment;
            });
            if (!this.deploy) {
              lib$3.defineReadOnly(this, "deploy", fragments.ConstructorFragment.from({
                payable: false,
                type: "constructor"
              }));
            }
            lib$3.defineReadOnly(this, "_isInterface", true);
          }
          Interface2.prototype.format = function(format) {
            if (!format) {
              format = fragments.FormatTypes.full;
            }
            if (format === fragments.FormatTypes.sighash) {
              logger.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            var abi = this.fragments.map(function(fragment) {
              return fragment.format(format);
            });
            if (format === fragments.FormatTypes.json) {
              return JSON.stringify(abi.map(function(j) {
                return JSON.parse(j);
              }));
            }
            return abi;
          };
          Interface2.getAbiCoder = function() {
            return abiCoder.defaultAbiCoder;
          };
          Interface2.getAddress = function(address2) {
            return lib$6.getAddress(address2);
          };
          Interface2.getSighash = function(functionFragment) {
            return lib$1.hexDataSlice(lib$9.id(functionFragment.format()), 0, 4);
          };
          Interface2.getEventTopic = function(eventFragment) {
            return lib$9.id(eventFragment.format());
          };
          Interface2.prototype.getFunction = function(nameOrSignatureOrSighash) {
            if (lib$1.isHexString(nameOrSignatureOrSighash)) {
              for (var name_1 in this.functions) {
                if (nameOrSignatureOrSighash === this.getSighash(name_1)) {
                  return this.functions[name_1];
                }
              }
              logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
              var name_2 = nameOrSignatureOrSighash.trim();
              var matching = Object.keys(this.functions).filter(function(f2) {
                return f2.split("(")[0] === name_2;
              });
              if (matching.length === 0) {
                logger.throwArgumentError("no matching function", "name", name_2);
              } else if (matching.length > 1) {
                logger.throwArgumentError("multiple matching functions", "name", name_2);
              }
              return this.functions[matching[0]];
            }
            var result = this.functions[fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
              logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
          };
          Interface2.prototype.getEvent = function(nameOrSignatureOrTopic) {
            if (lib$1.isHexString(nameOrSignatureOrTopic)) {
              var topichash = nameOrSignatureOrTopic.toLowerCase();
              for (var name_3 in this.events) {
                if (topichash === this.getEventTopic(name_3)) {
                  return this.events[name_3];
                }
              }
              logger.throwArgumentError("no matching event", "topichash", topichash);
            }
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
              var name_4 = nameOrSignatureOrTopic.trim();
              var matching = Object.keys(this.events).filter(function(f2) {
                return f2.split("(")[0] === name_4;
              });
              if (matching.length === 0) {
                logger.throwArgumentError("no matching event", "name", name_4);
              } else if (matching.length > 1) {
                logger.throwArgumentError("multiple matching events", "name", name_4);
              }
              return this.events[matching[0]];
            }
            var result = this.events[fragments.EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
              logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
          };
          Interface2.prototype.getSighash = function(functionFragment) {
            if (typeof functionFragment === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            return lib$3.getStatic(this.constructor, "getSighash")(functionFragment);
          };
          Interface2.prototype.getEventTopic = function(eventFragment) {
            if (typeof eventFragment === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            return lib$3.getStatic(this.constructor, "getEventTopic")(eventFragment);
          };
          Interface2.prototype._decodeParams = function(params, data) {
            return this._abiCoder.decode(params, data);
          };
          Interface2.prototype._encodeParams = function(params, values) {
            return this._abiCoder.encode(params, values);
          };
          Interface2.prototype.encodeDeploy = function(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
          };
          Interface2.prototype.decodeFunctionData = function(functionFragment, data) {
            if (typeof functionFragment === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            var bytes2 = lib$1.arrayify(data);
            if (lib$1.hexlify(bytes2.slice(0, 4)) !== this.getSighash(functionFragment)) {
              logger.throwArgumentError("data signature does not match function " + functionFragment.name + ".", "data", lib$1.hexlify(bytes2));
            }
            return this._decodeParams(functionFragment.inputs, bytes2.slice(4));
          };
          Interface2.prototype.encodeFunctionData = function(functionFragment, values) {
            if (typeof functionFragment === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            return lib$1.hexlify(lib$1.concat([
              this.getSighash(functionFragment),
              this._encodeParams(functionFragment.inputs, values || [])
            ]));
          };
          Interface2.prototype.decodeFunctionResult = function(functionFragment, data) {
            if (typeof functionFragment === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            var bytes2 = lib$1.arrayify(data);
            var reason = null;
            var errorSignature = null;
            switch (bytes2.length % this._abiCoder._getWordSize()) {
              case 0:
                try {
                  return this._abiCoder.decode(functionFragment.outputs, bytes2);
                } catch (error) {
                }
                break;
              case 4:
                if (lib$1.hexlify(bytes2.slice(0, 4)) === "0x08c379a0") {
                  errorSignature = "Error(string)";
                  reason = this._abiCoder.decode(["string"], bytes2.slice(4))[0];
                }
                break;
            }
            return logger.throwError("call revert exception", lib.Logger.errors.CALL_EXCEPTION, {
              method: functionFragment.format(),
              errorSignature,
              errorArgs: [reason],
              reason
            });
          };
          Interface2.prototype.encodeFunctionResult = function(functionFragment, values) {
            if (typeof functionFragment === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            return lib$1.hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
          };
          Interface2.prototype.encodeFilterTopics = function(eventFragment, values) {
            var _this = this;
            if (typeof eventFragment === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
              logger.throwError("too many arguments for " + eventFragment.format(), lib.Logger.errors.UNEXPECTED_ARGUMENT, {
                argument: "values",
                value: values
              });
            }
            var topics = [];
            if (!eventFragment.anonymous) {
              topics.push(this.getEventTopic(eventFragment));
            }
            var encodeTopic = function(param, value) {
              if (param.type === "string") {
                return lib$9.id(value);
              } else if (param.type === "bytes") {
                return lib$4.keccak256(lib$1.hexlify(value));
              }
              if (param.type === "address") {
                _this._abiCoder.encode(["address"], [value]);
              }
              return lib$1.hexZeroPad(lib$1.hexlify(value), 32);
            };
            values.forEach(function(value, index2) {
              var param = eventFragment.inputs[index2];
              if (!param.indexed) {
                if (value != null) {
                  logger.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
                }
                return;
              }
              if (value == null) {
                topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                logger.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
              } else if (Array.isArray(value)) {
                topics.push(value.map(function(value2) {
                  return encodeTopic(param, value2);
                }));
              } else {
                topics.push(encodeTopic(param, value));
              }
            });
            while (topics.length && topics[topics.length - 1] === null) {
              topics.pop();
            }
            return topics;
          };
          Interface2.prototype.encodeEventLog = function(eventFragment, values) {
            var _this = this;
            if (typeof eventFragment === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            var topics = [];
            var dataTypes = [];
            var dataValues = [];
            if (!eventFragment.anonymous) {
              topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
              logger.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach(function(param, index2) {
              var value = values[index2];
              if (param.indexed) {
                if (param.type === "string") {
                  topics.push(lib$9.id(value));
                } else if (param.type === "bytes") {
                  topics.push(lib$4.keccak256(value));
                } else if (param.baseType === "tuple" || param.baseType === "array") {
                  throw new Error("not implemented");
                } else {
                  topics.push(_this._abiCoder.encode([param.type], [value]));
                }
              } else {
                dataTypes.push(param);
                dataValues.push(value);
              }
            });
            return {
              data: this._abiCoder.encode(dataTypes, dataValues),
              topics
            };
          };
          Interface2.prototype.decodeEventLog = function(eventFragment, data, topics) {
            if (typeof eventFragment === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
              var topicHash = this.getEventTopic(eventFragment);
              if (!lib$1.isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                logger.throwError("fragment/topic mismatch", lib.Logger.errors.INVALID_ARGUMENT, {argument: "topics[0]", expected: topicHash, value: topics[0]});
              }
              topics = topics.slice(1);
            }
            var indexed = [];
            var nonIndexed = [];
            var dynamic = [];
            eventFragment.inputs.forEach(function(param, index2) {
              if (param.indexed) {
                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                  indexed.push(fragments.ParamType.fromObject({type: "bytes32", name: param.name}));
                  dynamic.push(true);
                } else {
                  indexed.push(param);
                  dynamic.push(false);
                }
              } else {
                nonIndexed.push(param);
                dynamic.push(false);
              }
            });
            var resultIndexed = topics != null ? this._abiCoder.decode(indexed, lib$1.concat(topics)) : null;
            var resultNonIndexed = this._abiCoder.decode(nonIndexed, data);
            var result = [];
            var nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach(function(param, index2) {
              if (param.indexed) {
                if (resultIndexed == null) {
                  result[index2] = new Indexed({_isIndexed: true, hash: null});
                } else if (dynamic[index2]) {
                  result[index2] = new Indexed({_isIndexed: true, hash: resultIndexed[indexedIndex++]});
                } else {
                  try {
                    result[index2] = resultIndexed[indexedIndex++];
                  } catch (error) {
                    result[index2] = error;
                  }
                }
              } else {
                try {
                  result[index2] = resultNonIndexed[nonIndexedIndex++];
                } catch (error) {
                  result[index2] = error;
                }
              }
              if (param.name && result[param.name] == null) {
                var value_1 = result[index2];
                if (value_1 instanceof Error) {
                  Object.defineProperty(result, param.name, {
                    get: function() {
                      throw wrapAccessError("property " + JSON.stringify(param.name), value_1);
                    }
                  });
                } else {
                  result[param.name] = value_1;
                }
              }
            });
            var _loop_1 = function(i3) {
              var value = result[i3];
              if (value instanceof Error) {
                Object.defineProperty(result, i3, {
                  get: function() {
                    throw wrapAccessError("index " + i3, value);
                  }
                });
              }
            };
            for (var i2 = 0; i2 < result.length; i2++) {
              _loop_1(i2);
            }
            return Object.freeze(result);
          };
          Interface2.prototype.parseTransaction = function(tx) {
            var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
              return null;
            }
            return new TransactionDescription({
              args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
              functionFragment: fragment,
              name: fragment.name,
              signature: fragment.format(),
              sighash: this.getSighash(fragment),
              value: lib$2.BigNumber.from(tx.value || "0")
            });
          };
          Interface2.prototype.parseLog = function(log) {
            var fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
              return null;
            }
            return new LogDescription({
              eventFragment: fragment,
              name: fragment.name,
              signature: fragment.format(),
              topic: this.getEventTopic(fragment),
              args: this.decodeEventLog(fragment, log.data, log.topics)
            });
          };
          Interface2.isInterface = function(value) {
            return !!(value && value._isInterface);
          };
          return Interface2;
        }();
        exports3.Interface = Interface;
      });
      var _interface$1 = unwrapExports(_interface);
      var _interface_1 = _interface.checkResultErrors;
      var _interface_2 = _interface.LogDescription;
      var _interface_3 = _interface.TransactionDescription;
      var _interface_4 = _interface.Indexed;
      var _interface_5 = _interface.Interface;
      var lib$a = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.ConstructorFragment = fragments.ConstructorFragment;
        exports3.EventFragment = fragments.EventFragment;
        exports3.FormatTypes = fragments.FormatTypes;
        exports3.Fragment = fragments.Fragment;
        exports3.FunctionFragment = fragments.FunctionFragment;
        exports3.ParamType = fragments.ParamType;
        exports3.AbiCoder = abiCoder.AbiCoder;
        exports3.defaultAbiCoder = abiCoder.defaultAbiCoder;
        exports3.checkResultErrors = _interface.checkResultErrors;
        exports3.Indexed = _interface.Indexed;
        exports3.Interface = _interface.Interface;
        exports3.LogDescription = _interface.LogDescription;
        exports3.TransactionDescription = _interface.TransactionDescription;
      });
      var index$a = unwrapExports(lib$a);
      var lib_1$a = lib$a.ConstructorFragment;
      var lib_2$9 = lib$a.EventFragment;
      var lib_3$8 = lib$a.FormatTypes;
      var lib_4$7 = lib$a.Fragment;
      var lib_5$7 = lib$a.FunctionFragment;
      var lib_6$4 = lib$a.ParamType;
      var lib_7$4 = lib$a.AbiCoder;
      var lib_8$3 = lib$a.defaultAbiCoder;
      var lib_9$3 = lib$a.checkResultErrors;
      var lib_10$2 = lib$a.Indexed;
      var lib_11$1 = lib$a.Interface;
      var lib_12$1 = lib$a.LogDescription;
      var lib_13$1 = lib$a.TransactionDescription;
      var _version$i = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "abstract-provider/5.0.1";
      });
      var _version$j = unwrapExports(_version$i);
      var _version_1$9 = _version$i.version;
      var lib$b = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$i.version);
        ;
        ;
        var ForkEvent = function(_super) {
          __extends(ForkEvent2, _super);
          function ForkEvent2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          ForkEvent2.isForkEvent = function(value) {
            return !!(value && value._isForkEvent);
          };
          return ForkEvent2;
        }(lib$3.Description);
        exports3.ForkEvent = ForkEvent;
        var BlockForkEvent = function(_super) {
          __extends(BlockForkEvent2, _super);
          function BlockForkEvent2(blockHash, expiry) {
            var _this = this;
            if (!lib$1.isHexString(blockHash, 32)) {
              logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
            }
            _this = _super.call(this, {
              _isForkEvent: true,
              _isBlockForkEvent: true,
              expiry: expiry || 0,
              blockHash
            }) || this;
            return _this;
          }
          return BlockForkEvent2;
        }(ForkEvent);
        exports3.BlockForkEvent = BlockForkEvent;
        var TransactionForkEvent = function(_super) {
          __extends(TransactionForkEvent2, _super);
          function TransactionForkEvent2(hash, expiry) {
            var _this = this;
            if (!lib$1.isHexString(hash, 32)) {
              logger.throwArgumentError("invalid transaction hash", "hash", hash);
            }
            _this = _super.call(this, {
              _isForkEvent: true,
              _isTransactionForkEvent: true,
              expiry: expiry || 0,
              hash
            }) || this;
            return _this;
          }
          return TransactionForkEvent2;
        }(ForkEvent);
        exports3.TransactionForkEvent = TransactionForkEvent;
        var TransactionOrderForkEvent = function(_super) {
          __extends(TransactionOrderForkEvent2, _super);
          function TransactionOrderForkEvent2(beforeHash, afterHash, expiry) {
            var _this = this;
            if (!lib$1.isHexString(beforeHash, 32)) {
              logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
            }
            if (!lib$1.isHexString(afterHash, 32)) {
              logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
            }
            _this = _super.call(this, {
              _isForkEvent: true,
              _isTransactionOrderForkEvent: true,
              expiry: expiry || 0,
              beforeHash,
              afterHash
            }) || this;
            return _this;
          }
          return TransactionOrderForkEvent2;
        }(ForkEvent);
        exports3.TransactionOrderForkEvent = TransactionOrderForkEvent;
        var Provider = function() {
          function Provider2() {
            var _newTarget = this.constructor;
            logger.checkAbstract(_newTarget, Provider2);
            lib$3.defineReadOnly(this, "_isProvider", true);
          }
          Provider2.prototype.addListener = function(eventName, listener) {
            return this.on(eventName, listener);
          };
          Provider2.prototype.removeListener = function(eventName, listener) {
            return this.off(eventName, listener);
          };
          Provider2.isProvider = function(value) {
            return !!(value && value._isProvider);
          };
          return Provider2;
        }();
        exports3.Provider = Provider;
      });
      var index$b = unwrapExports(lib$b);
      var lib_1$b = lib$b.ForkEvent;
      var lib_2$a = lib$b.BlockForkEvent;
      var lib_3$9 = lib$b.TransactionForkEvent;
      var lib_4$8 = lib$b.TransactionOrderForkEvent;
      var lib_5$8 = lib$b.Provider;
      var _version$k = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "abstract-signer/5.0.1";
      });
      var _version$l = unwrapExports(_version$k);
      var _version_1$a = _version$k.version;
      var lib$c = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$k.version);
        var allowedTransactionKeys = [
          "chainId",
          "data",
          "from",
          "gasLimit",
          "gasPrice",
          "nonce",
          "to",
          "value"
        ];
        var Signer = function() {
          function Signer2() {
            var _newTarget = this.constructor;
            logger.checkAbstract(_newTarget, Signer2);
            lib$3.defineReadOnly(this, "_isSigner", true);
          }
          Signer2.prototype.getBalance = function(blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getBalance");
                    return [4, this.provider.getBalance(this.getAddress(), blockTag)];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.getTransactionCount = function(blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getTransactionCount");
                    return [4, this.provider.getTransactionCount(this.getAddress(), blockTag)];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.estimateGas = function(transaction) {
            return __awaiter(this, void 0, void 0, function() {
              var tx;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("estimateGas");
                    return [4, lib$3.resolveProperties(this.checkTransaction(transaction))];
                  case 1:
                    tx = _a.sent();
                    return [4, this.provider.estimateGas(tx)];
                  case 2:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.call = function(transaction, blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              var tx;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("call");
                    return [4, lib$3.resolveProperties(this.checkTransaction(transaction))];
                  case 1:
                    tx = _a.sent();
                    return [4, this.provider.call(tx, blockTag)];
                  case 2:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.sendTransaction = function(transaction) {
            var _this = this;
            this._checkProvider("sendTransaction");
            return this.populateTransaction(transaction).then(function(tx) {
              return _this.signTransaction(tx).then(function(signedTx) {
                return _this.provider.sendTransaction(signedTx);
              });
            });
          };
          Signer2.prototype.getChainId = function() {
            return __awaiter(this, void 0, void 0, function() {
              var network;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getChainId");
                    return [4, this.provider.getNetwork()];
                  case 1:
                    network = _a.sent();
                    return [2, network.chainId];
                }
              });
            });
          };
          Signer2.prototype.getGasPrice = function() {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("getGasPrice");
                    return [4, this.provider.getGasPrice()];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.resolveName = function(name2) {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    this._checkProvider("resolveName");
                    return [4, this.provider.resolveName(name2)];
                  case 1:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype.checkTransaction = function(transaction) {
            for (var key2 in transaction) {
              if (allowedTransactionKeys.indexOf(key2) === -1) {
                logger.throwArgumentError("invalid transaction key: " + key2, "transaction", transaction);
              }
            }
            var tx = lib$3.shallowCopy(transaction);
            if (tx.from == null) {
              tx.from = this.getAddress();
            } else {
              tx.from = Promise.all([
                Promise.resolve(tx.from),
                this.getAddress()
              ]).then(function(result) {
                if (result[0] !== result[1]) {
                  logger.throwArgumentError("from address mismatch", "transaction", transaction);
                }
                return result[0];
              });
            }
            return tx;
          };
          Signer2.prototype.populateTransaction = function(transaction) {
            return __awaiter(this, void 0, void 0, function() {
              var tx;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, lib$3.resolveProperties(this.checkTransaction(transaction))];
                  case 1:
                    tx = _a.sent();
                    if (tx.to != null) {
                      tx.to = Promise.resolve(tx.to).then(function(to) {
                        return _this.resolveName(to);
                      });
                    }
                    if (tx.gasPrice == null) {
                      tx.gasPrice = this.getGasPrice();
                    }
                    if (tx.nonce == null) {
                      tx.nonce = this.getTransactionCount("pending");
                    }
                    if (tx.gasLimit == null) {
                      tx.gasLimit = this.estimateGas(tx).catch(function(error) {
                        return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                          error,
                          tx
                        });
                      });
                    }
                    if (tx.chainId == null) {
                      tx.chainId = this.getChainId();
                    } else {
                      tx.chainId = Promise.all([
                        Promise.resolve(tx.chainId),
                        this.getChainId()
                      ]).then(function(results) {
                        if (results[1] !== 0 && results[0] !== results[1]) {
                          logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                        }
                        return results[0];
                      });
                    }
                    return [4, lib$3.resolveProperties(tx)];
                  case 2:
                    return [2, _a.sent()];
                }
              });
            });
          };
          Signer2.prototype._checkProvider = function(operation) {
            if (!this.provider) {
              logger.throwError("missing provider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: operation || "_checkProvider"
              });
            }
          };
          Signer2.isSigner = function(value) {
            return !!(value && value._isSigner);
          };
          return Signer2;
        }();
        exports3.Signer = Signer;
        var VoidSigner = function(_super) {
          __extends(VoidSigner2, _super);
          function VoidSigner2(address2, provider) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, VoidSigner2);
            _this = _super.call(this) || this;
            lib$3.defineReadOnly(_this, "address", address2);
            lib$3.defineReadOnly(_this, "provider", provider || null);
            return _this;
          }
          VoidSigner2.prototype.getAddress = function() {
            return Promise.resolve(this.address);
          };
          VoidSigner2.prototype._fail = function(message, operation) {
            return Promise.resolve().then(function() {
              logger.throwError(message, lib.Logger.errors.UNSUPPORTED_OPERATION, {operation});
            });
          };
          VoidSigner2.prototype.signMessage = function(message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
          };
          VoidSigner2.prototype.signTransaction = function(transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
          };
          VoidSigner2.prototype.connect = function(provider) {
            return new VoidSigner2(this.address, provider);
          };
          return VoidSigner2;
        }(Signer);
        exports3.VoidSigner = VoidSigner;
      });
      var index$c = unwrapExports(lib$c);
      var lib_1$c = lib$c.Signer;
      var lib_2$b = lib$c.VoidSigner;
      var _version$m = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "contracts/5.0.1";
      });
      var _version$n = unwrapExports(_version$m);
      var _version_1$b = _version$m.version;
      var lib$d = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        var __spreadArrays = commonjsGlobal && commonjsGlobal.__spreadArrays || function() {
          for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
            s2 += arguments[i2].length;
          for (var r2 = Array(s2), k = 0, i2 = 0; i2 < il; i2++)
            for (var a = arguments[i2], j = 0, jl = a.length; j < jl; j++, k++)
              r2[k] = a[j];
          return r2;
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$m.version);
        ;
        ;
        var allowedTransactionKeys = {
          chainId: true,
          data: true,
          from: true,
          gasLimit: true,
          gasPrice: true,
          nonce: true,
          to: true,
          value: true
        };
        function resolveName(resolver, nameOrPromise) {
          return __awaiter(this, void 0, void 0, function() {
            var name2;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, nameOrPromise];
                case 1:
                  name2 = _a.sent();
                  try {
                    return [2, lib$6.getAddress(name2)];
                  } catch (error) {
                  }
                  if (!resolver) {
                    logger.throwError("a provider or signer is needed to resolve ENS names", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                      operation: "resolveName"
                    });
                  }
                  return [4, resolver.resolveName(name2)];
                case 2:
                  return [2, _a.sent()];
              }
            });
          });
        }
        function resolveAddresses(resolver, value, paramType) {
          if (Array.isArray(paramType)) {
            return Promise.all(paramType.map(function(paramType2, index2) {
              return resolveAddresses(resolver, Array.isArray(value) ? value[index2] : value[paramType2.name], paramType2);
            }));
          }
          if (paramType.type === "address") {
            return resolveName(resolver, value);
          }
          if (paramType.type === "tuple") {
            return resolveAddresses(resolver, value, paramType.components);
          }
          if (paramType.baseType === "array") {
            if (!Array.isArray(value)) {
              throw new Error("invalid value for array");
            }
            return Promise.all(value.map(function(v) {
              return resolveAddresses(resolver, v, paramType.arrayChildren);
            }));
          }
          return Promise.resolve(value);
        }
        function populateTransaction(contract, fragment, args) {
          return __awaiter(this, void 0, void 0, function() {
            var overrides, resolved, tx, ro, roValue, leftovers;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  overrides = {};
                  if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
                    overrides = lib$3.shallowCopy(args.pop());
                  }
                  logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
                  if (contract.signer) {
                    if (overrides.from) {
                      overrides.from = lib$3.resolveProperties({
                        override: resolveName(contract.signer, overrides.from),
                        signer: contract.signer.getAddress()
                      }).then(function(check) {
                        return __awaiter(_this, void 0, void 0, function() {
                          return __generator(this, function(_a2) {
                            if (lib$6.getAddress(check.signer) !== check.override) {
                              logger.throwError("Contract with a Signer cannot override from", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.from"
                              });
                            }
                            return [2, check.override];
                          });
                        });
                      });
                    } else {
                      overrides.from = contract.signer.getAddress();
                    }
                  } else if (overrides.from) {
                    overrides.from = resolveName(contract.provider, overrides.from);
                  }
                  return [4, lib$3.resolveProperties({
                    args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                    address: contract.resolvedAddress,
                    overrides: lib$3.resolveProperties(overrides) || {}
                  })];
                case 1:
                  resolved = _a.sent();
                  tx = {
                    data: contract.interface.encodeFunctionData(fragment, resolved.args),
                    to: resolved.address
                  };
                  ro = resolved.overrides;
                  if (ro.nonce != null) {
                    tx.nonce = lib$2.BigNumber.from(ro.nonce).toNumber();
                  }
                  if (ro.gasLimit != null) {
                    tx.gasLimit = lib$2.BigNumber.from(ro.gasLimit);
                  }
                  if (ro.gasPrice != null) {
                    tx.gasPrice = lib$2.BigNumber.from(ro.gasPrice);
                  }
                  if (ro.from != null) {
                    tx.from = ro.from;
                  }
                  if (tx.gasLimit == null && fragment.gas != null) {
                    tx.gasLimit = lib$2.BigNumber.from(fragment.gas).add(21e3);
                  }
                  if (ro.value) {
                    roValue = lib$2.BigNumber.from(ro.value);
                    if (!roValue.isZero() && !fragment.payable) {
                      logger.throwError("non-payable method cannot override value", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: overrides.value
                      });
                    }
                    tx.value = roValue;
                  }
                  delete overrides.nonce;
                  delete overrides.gasLimit;
                  delete overrides.gasPrice;
                  delete overrides.from;
                  delete overrides.value;
                  leftovers = Object.keys(overrides).filter(function(key2) {
                    return overrides[key2] != null;
                  });
                  if (leftovers.length) {
                    logger.throwError("cannot override " + leftovers.map(function(l) {
                      return JSON.stringify(l);
                    }).join(","), lib.Logger.errors.UNSUPPORTED_OPERATION, {
                      operation: "overrides",
                      overrides: leftovers
                    });
                  }
                  return [2, tx];
              }
            });
          });
        }
        function buildPopulate(contract, fragment) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, populateTransaction(contract, fragment, args)];
              });
            });
          };
        }
        function buildEstimate(contract, fragment) {
          var signerOrProvider = contract.signer || contract.provider;
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function() {
              var tx;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!signerOrProvider) {
                      logger.throwError("estimate require a provider or signer", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "estimateGas"
                      });
                    }
                    return [4, populateTransaction(contract, fragment, args)];
                  case 1:
                    tx = _a.sent();
                    return [4, signerOrProvider.estimateGas(tx)];
                  case 2:
                    return [2, _a.sent()];
                }
              });
            });
          };
        }
        function buildCall(contract, fragment, collapseSimple) {
          var signerOrProvider = contract.signer || contract.provider;
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function() {
              var blockTag, overrides, tx, result, value;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    blockTag = void 0;
                    if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object"))
                      return [3, 3];
                    overrides = lib$3.shallowCopy(args.pop());
                    if (!(overrides.blockTag != null))
                      return [3, 2];
                    return [4, overrides.blockTag];
                  case 1:
                    blockTag = _a.sent();
                    _a.label = 2;
                  case 2:
                    delete overrides.blockTag;
                    args.push(overrides);
                    _a.label = 3;
                  case 3:
                    if (!(contract.deployTransaction != null))
                      return [3, 5];
                    return [4, contract._deployed(blockTag)];
                  case 4:
                    _a.sent();
                    _a.label = 5;
                  case 5:
                    return [4, populateTransaction(contract, fragment, args)];
                  case 6:
                    tx = _a.sent();
                    return [4, signerOrProvider.call(tx, blockTag)];
                  case 7:
                    result = _a.sent();
                    try {
                      value = contract.interface.decodeFunctionResult(fragment, result);
                      if (collapseSimple && fragment.outputs.length === 1) {
                        value = value[0];
                      }
                      return [2, value];
                    } catch (error) {
                      if (error.code === lib.Logger.errors.CALL_EXCEPTION) {
                        error.address = contract.address;
                        error.args = args;
                        error.transaction = tx;
                      }
                      throw error;
                    }
                    return [2];
                }
              });
            });
          };
        }
        function buildSend(contract, fragment) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function() {
              var txRequest, tx, wait;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!contract.signer) {
                      logger.throwError("sending a transaction requires a signer", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction"
                      });
                    }
                    if (!(contract.deployTransaction != null))
                      return [3, 2];
                    return [4, contract._deployed()];
                  case 1:
                    _a.sent();
                    _a.label = 2;
                  case 2:
                    return [4, populateTransaction(contract, fragment, args)];
                  case 3:
                    txRequest = _a.sent();
                    return [4, contract.signer.sendTransaction(txRequest)];
                  case 4:
                    tx = _a.sent();
                    wait = tx.wait.bind(tx);
                    tx.wait = function(confirmations) {
                      return wait(confirmations).then(function(receipt) {
                        receipt.events = receipt.logs.map(function(log) {
                          var event = lib$3.deepCopy(log);
                          var parsed = null;
                          try {
                            parsed = contract.interface.parseLog(log);
                          } catch (e) {
                          }
                          if (parsed) {
                            event.args = parsed.args;
                            event.decode = function(data, topics) {
                              return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                            };
                            event.event = parsed.name;
                            event.eventSignature = parsed.signature;
                          }
                          event.removeListener = function() {
                            return contract.provider;
                          };
                          event.getBlock = function() {
                            return contract.provider.getBlock(receipt.blockHash);
                          };
                          event.getTransaction = function() {
                            return contract.provider.getTransaction(receipt.transactionHash);
                          };
                          event.getTransactionReceipt = function() {
                            return Promise.resolve(receipt);
                          };
                          return event;
                        });
                        return receipt;
                      });
                    };
                    return [2, tx];
                }
              });
            });
          };
        }
        function buildDefault(contract, fragment, collapseSimple) {
          if (fragment.constant) {
            return buildCall(contract, fragment, collapseSimple);
          }
          return buildSend(contract, fragment);
        }
        function getEventTag(filter) {
          if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
          }
          return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(function(topic) {
            if (Array.isArray(topic)) {
              return topic.join("|");
            }
            return topic;
          }).join(":") : "");
        }
        var RunningEvent = function() {
          function RunningEvent2(tag, filter) {
            lib$3.defineReadOnly(this, "tag", tag);
            lib$3.defineReadOnly(this, "filter", filter);
            this._listeners = [];
          }
          RunningEvent2.prototype.addListener = function(listener, once) {
            this._listeners.push({listener, once});
          };
          RunningEvent2.prototype.removeListener = function(listener) {
            var done = false;
            this._listeners = this._listeners.filter(function(item) {
              if (done || item.listener !== listener) {
                return true;
              }
              done = true;
              return false;
            });
          };
          RunningEvent2.prototype.removeAllListeners = function() {
            this._listeners = [];
          };
          RunningEvent2.prototype.listeners = function() {
            return this._listeners.map(function(i2) {
              return i2.listener;
            });
          };
          RunningEvent2.prototype.listenerCount = function() {
            return this._listeners.length;
          };
          RunningEvent2.prototype.run = function(args) {
            var _this = this;
            var listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter(function(item) {
              var argsCopy = args.slice();
              setTimeout(function() {
                item.listener.apply(_this, argsCopy);
              }, 0);
              return !item.once;
            });
            return listenerCount;
          };
          RunningEvent2.prototype.prepareEvent = function(event) {
          };
          RunningEvent2.prototype.getEmit = function(event) {
            return [event];
          };
          return RunningEvent2;
        }();
        var ErrorRunningEvent = function(_super) {
          __extends(ErrorRunningEvent2, _super);
          function ErrorRunningEvent2() {
            return _super.call(this, "error", null) || this;
          }
          return ErrorRunningEvent2;
        }(RunningEvent);
        var FragmentRunningEvent = function(_super) {
          __extends(FragmentRunningEvent2, _super);
          function FragmentRunningEvent2(address2, contractInterface, fragment, topics) {
            var _this = this;
            var filter = {
              address: address2
            };
            var topic = contractInterface.getEventTopic(fragment);
            if (topics) {
              if (topic !== topics[0]) {
                logger.throwArgumentError("topic mismatch", "topics", topics);
              }
              filter.topics = topics.slice();
            } else {
              filter.topics = [topic];
            }
            _this = _super.call(this, getEventTag(filter), filter) || this;
            lib$3.defineReadOnly(_this, "address", address2);
            lib$3.defineReadOnly(_this, "interface", contractInterface);
            lib$3.defineReadOnly(_this, "fragment", fragment);
            return _this;
          }
          FragmentRunningEvent2.prototype.prepareEvent = function(event) {
            var _this = this;
            _super.prototype.prepareEvent.call(this, event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = function(data, topics) {
              return _this.interface.decodeEventLog(_this.fragment, data, topics);
            };
            try {
              event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            } catch (error) {
              event.args = null;
              event.decodeError = error;
            }
          };
          FragmentRunningEvent2.prototype.getEmit = function(event) {
            var errors = lib$a.checkResultErrors(event.args);
            if (errors.length) {
              throw errors[0].error;
            }
            var args = (event.args || []).slice();
            args.push(event);
            return args;
          };
          return FragmentRunningEvent2;
        }(RunningEvent);
        var WildcardRunningEvent = function(_super) {
          __extends(WildcardRunningEvent2, _super);
          function WildcardRunningEvent2(address2, contractInterface) {
            var _this = _super.call(this, "*", {address: address2}) || this;
            lib$3.defineReadOnly(_this, "address", address2);
            lib$3.defineReadOnly(_this, "interface", contractInterface);
            return _this;
          }
          WildcardRunningEvent2.prototype.prepareEvent = function(event) {
            var _this = this;
            _super.prototype.prepareEvent.call(this, event);
            try {
              var parsed_1 = this.interface.parseLog(event);
              event.event = parsed_1.name;
              event.eventSignature = parsed_1.signature;
              event.decode = function(data, topics) {
                return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);
              };
              event.args = parsed_1.args;
            } catch (error) {
            }
          };
          return WildcardRunningEvent2;
        }(RunningEvent);
        var Contract = function() {
          function Contract2(addressOrName, contractInterface, signerOrProvider) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Contract2);
            lib$3.defineReadOnly(this, "interface", lib$3.getStatic(_newTarget, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
              lib$3.defineReadOnly(this, "provider", null);
              lib$3.defineReadOnly(this, "signer", null);
            } else if (lib$c.Signer.isSigner(signerOrProvider)) {
              lib$3.defineReadOnly(this, "provider", signerOrProvider.provider || null);
              lib$3.defineReadOnly(this, "signer", signerOrProvider);
            } else if (lib$b.Provider.isProvider(signerOrProvider)) {
              lib$3.defineReadOnly(this, "provider", signerOrProvider);
              lib$3.defineReadOnly(this, "signer", null);
            } else {
              logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            lib$3.defineReadOnly(this, "callStatic", {});
            lib$3.defineReadOnly(this, "estimateGas", {});
            lib$3.defineReadOnly(this, "functions", {});
            lib$3.defineReadOnly(this, "populateTransaction", {});
            lib$3.defineReadOnly(this, "filters", {});
            {
              var uniqueFilters_1 = {};
              Object.keys(this.interface.events).forEach(function(eventSignature) {
                var event = _this.interface.events[eventSignature];
                lib$3.defineReadOnly(_this.filters, eventSignature, function() {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                  }
                  return {
                    address: _this.address,
                    topics: _this.interface.encodeFilterTopics(event, args)
                  };
                });
                if (!uniqueFilters_1[event.name]) {
                  uniqueFilters_1[event.name] = [];
                }
                uniqueFilters_1[event.name].push(eventSignature);
              });
              Object.keys(uniqueFilters_1).forEach(function(name2) {
                var filters = uniqueFilters_1[name2];
                if (filters.length === 1) {
                  lib$3.defineReadOnly(_this.filters, name2, _this.filters[filters[0]]);
                } else {
                  logger.warn("Duplicate definition of " + name2 + " (" + filters.join(", ") + ")");
                }
              });
            }
            lib$3.defineReadOnly(this, "_runningEvents", {});
            lib$3.defineReadOnly(this, "_wrappedEmits", {});
            lib$3.defineReadOnly(this, "address", addressOrName);
            if (this.provider) {
              lib$3.defineReadOnly(this, "resolvedAddress", this.provider.resolveName(addressOrName).then(function(address2) {
                if (address2 == null) {
                  throw new Error("name not found");
                }
                return address2;
              }).catch(function(error) {
                console.log("ERROR: Cannot find Contract - " + addressOrName);
                throw error;
              }));
            } else {
              try {
                lib$3.defineReadOnly(this, "resolvedAddress", Promise.resolve(lib$6.getAddress(addressOrName)));
              } catch (error) {
                logger.throwError("provider is required to use ENS name as contract address", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "new Contract"
                });
              }
            }
            var uniqueNames = {};
            var uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach(function(signature2) {
              var fragment = _this.interface.functions[signature2];
              if (uniqueSignatures[signature2]) {
                logger.warn("Duplicate ABI entry for " + JSON.stringify(name));
                return;
              }
              uniqueSignatures[signature2] = true;
              {
                var name_1 = fragment.name;
                if (!uniqueNames[name_1]) {
                  uniqueNames[name_1] = [];
                }
                uniqueNames[name_1].push(signature2);
              }
              if (_this[signature2] == null) {
                lib$3.defineReadOnly(_this, signature2, buildDefault(_this, fragment, true));
              }
              if (_this.functions[signature2] == null) {
                lib$3.defineReadOnly(_this.functions, signature2, buildDefault(_this, fragment, false));
              }
              if (_this.callStatic[signature2] == null) {
                lib$3.defineReadOnly(_this.callStatic, signature2, buildCall(_this, fragment, true));
              }
              if (_this.populateTransaction[signature2] == null) {
                lib$3.defineReadOnly(_this.populateTransaction, signature2, buildPopulate(_this, fragment));
              }
              if (_this.estimateGas[signature2] == null) {
                lib$3.defineReadOnly(_this.estimateGas, signature2, buildEstimate(_this, fragment));
              }
            });
            Object.keys(uniqueNames).forEach(function(name2) {
              var signatures = uniqueNames[name2];
              if (signatures.length > 1) {
                return;
              }
              var signature2 = signatures[0];
              if (_this[name2] == null) {
                lib$3.defineReadOnly(_this, name2, _this[signature2]);
              }
              if (_this.functions[name2] == null) {
                lib$3.defineReadOnly(_this.functions, name2, _this.functions[signature2]);
              }
              if (_this.callStatic[name2] == null) {
                lib$3.defineReadOnly(_this.callStatic, name2, _this.callStatic[signature2]);
              }
              if (_this.populateTransaction[name2] == null) {
                lib$3.defineReadOnly(_this.populateTransaction, name2, _this.populateTransaction[signature2]);
              }
              if (_this.estimateGas[name2] == null) {
                lib$3.defineReadOnly(_this.estimateGas, name2, _this.estimateGas[signature2]);
              }
            });
          }
          Contract2.getContractAddress = function(transaction) {
            return lib$6.getContractAddress(transaction);
          };
          Contract2.getInterface = function(contractInterface) {
            if (lib$a.Interface.isInterface(contractInterface)) {
              return contractInterface;
            }
            return new lib$a.Interface(contractInterface);
          };
          Contract2.prototype.deployed = function() {
            return this._deployed();
          };
          Contract2.prototype._deployed = function(blockTag) {
            var _this = this;
            if (!this._deployedPromise) {
              if (this.deployTransaction) {
                this._deployedPromise = this.deployTransaction.wait().then(function() {
                  return _this;
                });
              } else {
                this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function(code) {
                  if (code === "0x") {
                    logger.throwError("contract not deployed", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                      contractAddress: _this.address,
                      operation: "getDeployed"
                    });
                  }
                  return _this;
                });
              }
            }
            return this._deployedPromise;
          };
          Contract2.prototype.fallback = function(overrides) {
            var _this = this;
            if (!this.signer) {
              logger.throwError("sending a transactions require a signer", lib.Logger.errors.UNSUPPORTED_OPERATION, {operation: "sendTransaction(fallback)"});
            }
            var tx = lib$3.shallowCopy(overrides || {});
            ["from", "to"].forEach(function(key2) {
              if (tx[key2] == null) {
                return;
              }
              logger.throwError("cannot override " + key2, lib.Logger.errors.UNSUPPORTED_OPERATION, {operation: key2});
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(function() {
              return _this.signer.sendTransaction(tx);
            });
          };
          Contract2.prototype.connect = function(signerOrProvider) {
            if (typeof signerOrProvider === "string") {
              signerOrProvider = new lib$c.VoidSigner(signerOrProvider, this.provider);
            }
            var contract = new this.constructor(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
              lib$3.defineReadOnly(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
          };
          Contract2.prototype.attach = function(addressOrName) {
            return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
          };
          Contract2.isIndexed = function(value) {
            return lib$a.Indexed.isIndexed(value);
          };
          Contract2.prototype._normalizeRunningEvent = function(runningEvent) {
            if (this._runningEvents[runningEvent.tag]) {
              return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
          };
          Contract2.prototype._getRunningEvent = function(eventName) {
            if (typeof eventName === "string") {
              if (eventName === "error") {
                return this._normalizeRunningEvent(new ErrorRunningEvent());
              }
              if (eventName === "event") {
                return this._normalizeRunningEvent(new RunningEvent("event", null));
              }
              if (eventName === "*") {
                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
              }
              var fragment = this.interface.getEvent(eventName);
              return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
            }
            if (eventName.topics && eventName.topics.length > 0) {
              try {
                var topic = eventName.topics[0];
                if (typeof topic !== "string") {
                  throw new Error("invalid topic");
                }
                var fragment = this.interface.getEvent(topic);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
              } catch (error) {
              }
              var filter = {
                address: this.address,
                topics: eventName.topics
              };
              return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
            }
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
          };
          Contract2.prototype._checkRunningEvents = function(runningEvent) {
            if (runningEvent.listenerCount() === 0) {
              delete this._runningEvents[runningEvent.tag];
              var emit = this._wrappedEmits[runningEvent.tag];
              if (emit) {
                this.provider.off(runningEvent.filter, emit);
                delete this._wrappedEmits[runningEvent.tag];
              }
            }
          };
          Contract2.prototype._wrapEvent = function(runningEvent, log, listener) {
            var _this = this;
            var event = lib$3.deepCopy(log);
            event.removeListener = function() {
              if (!listener) {
                return;
              }
              runningEvent.removeListener(listener);
              _this._checkRunningEvents(runningEvent);
            };
            event.getBlock = function() {
              return _this.provider.getBlock(log.blockHash);
            };
            event.getTransaction = function() {
              return _this.provider.getTransaction(log.transactionHash);
            };
            event.getTransactionReceipt = function() {
              return _this.provider.getTransactionReceipt(log.transactionHash);
            };
            runningEvent.prepareEvent(event);
            return event;
          };
          Contract2.prototype._addEventListener = function(runningEvent, listener, once) {
            var _this = this;
            if (!this.provider) {
              logger.throwError("events require a provider or a signer with a provider", lib.Logger.errors.UNSUPPORTED_OPERATION, {operation: "once"});
            }
            runningEvent.addListener(listener, once);
            this._runningEvents[runningEvent.tag] = runningEvent;
            if (!this._wrappedEmits[runningEvent.tag]) {
              var wrappedEmit = function(log) {
                var event = _this._wrapEvent(runningEvent, log, listener);
                if (event.decodeError == null) {
                  try {
                    var args = runningEvent.getEmit(event);
                    _this.emit.apply(_this, __spreadArrays([runningEvent.filter], args));
                  } catch (error) {
                    event.decodeError = error.error;
                  }
                }
                if (runningEvent.filter != null) {
                  _this.emit("event", event);
                }
                if (event.decodeError != null) {
                  _this.emit("error", event.decodeError, event);
                }
              };
              this._wrappedEmits[runningEvent.tag] = wrappedEmit;
              if (runningEvent.filter != null) {
                this.provider.on(runningEvent.filter, wrappedEmit);
              }
            }
          };
          Contract2.prototype.queryFilter = function(event, fromBlockOrBlockhash, toBlock) {
            var _this = this;
            var runningEvent = this._getRunningEvent(event);
            var filter = lib$3.shallowCopy(runningEvent.filter);
            if (typeof fromBlockOrBlockhash === "string" && lib$1.isHexString(fromBlockOrBlockhash, 32)) {
              if (toBlock != null) {
                logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
              }
              filter.blockHash = fromBlockOrBlockhash;
            } else {
              filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
              filter.toBlock = toBlock != null ? toBlock : "latest";
            }
            return this.provider.getLogs(filter).then(function(logs) {
              return logs.map(function(log) {
                return _this._wrapEvent(runningEvent, log, null);
              });
            });
          };
          Contract2.prototype.on = function(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
          };
          Contract2.prototype.once = function(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
          };
          Contract2.prototype.emit = function(eventName) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
            }
            if (!this.provider) {
              return false;
            }
            var runningEvent = this._getRunningEvent(eventName);
            var result = runningEvent.run(args) > 0;
            this._checkRunningEvents(runningEvent);
            return result;
          };
          Contract2.prototype.listenerCount = function(eventName) {
            if (!this.provider) {
              return 0;
            }
            return this._getRunningEvent(eventName).listenerCount();
          };
          Contract2.prototype.listeners = function(eventName) {
            if (!this.provider) {
              return [];
            }
            if (eventName == null) {
              var result_1 = [];
              for (var tag in this._runningEvents) {
                this._runningEvents[tag].listeners().forEach(function(listener) {
                  result_1.push(listener);
                });
              }
              return result_1;
            }
            return this._getRunningEvent(eventName).listeners();
          };
          Contract2.prototype.removeAllListeners = function(eventName) {
            if (!this.provider) {
              return this;
            }
            if (eventName == null) {
              for (var tag in this._runningEvents) {
                var runningEvent_1 = this._runningEvents[tag];
                runningEvent_1.removeAllListeners();
                this._checkRunningEvents(runningEvent_1);
              }
              return this;
            }
            var runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
          };
          Contract2.prototype.off = function(eventName, listener) {
            if (!this.provider) {
              return this;
            }
            var runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
          };
          Contract2.prototype.removeListener = function(eventName, listener) {
            return this.off(eventName, listener);
          };
          return Contract2;
        }();
        exports3.Contract = Contract;
        var ContractFactory = function() {
          function ContractFactory2(contractInterface, bytecode, signer) {
            var _newTarget = this.constructor;
            var bytecodeHex = null;
            if (typeof bytecode === "string") {
              bytecodeHex = bytecode;
            } else if (lib$1.isBytes(bytecode)) {
              bytecodeHex = lib$1.hexlify(bytecode);
            } else if (bytecode && typeof bytecode.object === "string") {
              bytecodeHex = bytecode.object;
            } else {
              bytecodeHex = "!";
            }
            if (bytecodeHex.substring(0, 2) !== "0x") {
              bytecodeHex = "0x" + bytecodeHex;
            }
            if (!lib$1.isHexString(bytecodeHex) || bytecodeHex.length % 2) {
              logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
            }
            if (signer && !lib$c.Signer.isSigner(signer)) {
              logger.throwArgumentError("invalid signer", "signer", signer);
            }
            lib$3.defineReadOnly(this, "bytecode", bytecodeHex);
            lib$3.defineReadOnly(this, "interface", lib$3.getStatic(_newTarget, "getInterface")(contractInterface));
            lib$3.defineReadOnly(this, "signer", signer || null);
          }
          ContractFactory2.prototype.getDeployTransaction = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var tx = {};
            if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
              tx = lib$3.shallowCopy(args.pop());
              for (var key2 in tx) {
                if (!allowedTransactionKeys[key2]) {
                  throw new Error("unknown transaction override " + key2);
                }
              }
            }
            ["data", "from", "to"].forEach(function(key3) {
              if (tx[key3] == null) {
                return;
              }
              logger.throwError("cannot override " + key3, lib.Logger.errors.UNSUPPORTED_OPERATION, {operation: key3});
            });
            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            tx.data = lib$1.hexlify(lib$1.concat([
              this.bytecode,
              this.interface.encodeDeploy(args)
            ]));
            return tx;
          };
          ContractFactory2.prototype.deploy = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function() {
              var overrides, params, unsignedTx, tx, address2, contract;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    overrides = {};
                    if (args.length === this.interface.deploy.inputs.length + 1) {
                      overrides = args.pop();
                    }
                    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
                    return [4, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];
                  case 1:
                    params = _a.sent();
                    params.push(overrides);
                    unsignedTx = this.getDeployTransaction.apply(this, params);
                    return [4, this.signer.sendTransaction(unsignedTx)];
                  case 2:
                    tx = _a.sent();
                    address2 = lib$3.getStatic(this.constructor, "getContractAddress")(tx);
                    contract = lib$3.getStatic(this.constructor, "getContract")(address2, this.interface, this.signer);
                    lib$3.defineReadOnly(contract, "deployTransaction", tx);
                    return [2, contract];
                }
              });
            });
          };
          ContractFactory2.prototype.attach = function(address2) {
            return this.constructor.getContract(address2, this.interface, this.signer);
          };
          ContractFactory2.prototype.connect = function(signer) {
            return new this.constructor(this.interface, this.bytecode, signer);
          };
          ContractFactory2.fromSolidity = function(compilerOutput, signer) {
            if (compilerOutput == null) {
              logger.throwError("missing compiler output", lib.Logger.errors.MISSING_ARGUMENT, {argument: "compilerOutput"});
            }
            if (typeof compilerOutput === "string") {
              compilerOutput = JSON.parse(compilerOutput);
            }
            var abi = compilerOutput.abi;
            var bytecode = null;
            if (compilerOutput.bytecode) {
              bytecode = compilerOutput.bytecode;
            } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
              bytecode = compilerOutput.evm.bytecode;
            }
            return new this(abi, bytecode, signer);
          };
          ContractFactory2.getInterface = function(contractInterface) {
            return Contract.getInterface(contractInterface);
          };
          ContractFactory2.getContractAddress = function(tx) {
            return lib$6.getContractAddress(tx);
          };
          ContractFactory2.getContract = function(address2, contractInterface, signer) {
            return new Contract(address2, contractInterface, signer);
          };
          return ContractFactory2;
        }();
        exports3.ContractFactory = ContractFactory;
      });
      var index$d = unwrapExports(lib$d);
      var lib_1$d = lib$d.Contract;
      var lib_2$c = lib$d.ContractFactory;
      var lib$e = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var BaseX = function() {
          function BaseX2(alphabet) {
            lib$3.defineReadOnly(this, "alphabet", alphabet);
            lib$3.defineReadOnly(this, "base", alphabet.length);
            lib$3.defineReadOnly(this, "_alphabetMap", {});
            lib$3.defineReadOnly(this, "_leader", alphabet.charAt(0));
            for (var i2 = 0; i2 < alphabet.length; i2++) {
              this._alphabetMap[alphabet.charAt(i2)] = i2;
            }
          }
          BaseX2.prototype.encode = function(value) {
            var source = lib$1.arrayify(value);
            if (source.length === 0) {
              return "";
            }
            var digits = [0];
            for (var i2 = 0; i2 < source.length; ++i2) {
              var carry = source[i2];
              for (var j = 0; j < digits.length; ++j) {
                carry += digits[j] << 8;
                digits[j] = carry % this.base;
                carry = carry / this.base | 0;
              }
              while (carry > 0) {
                digits.push(carry % this.base);
                carry = carry / this.base | 0;
              }
            }
            var string2 = "";
            for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {
              string2 += this._leader;
            }
            for (var q = digits.length - 1; q >= 0; --q) {
              string2 += this.alphabet[digits[q]];
            }
            return string2;
          };
          BaseX2.prototype.decode = function(value) {
            if (typeof value !== "string") {
              throw new TypeError("Expected String");
            }
            var bytes2 = [];
            if (value.length === 0) {
              return new Uint8Array(bytes2);
            }
            bytes2.push(0);
            for (var i2 = 0; i2 < value.length; i2++) {
              var byte = this._alphabetMap[value[i2]];
              if (byte === void 0) {
                throw new Error("Non-base" + this.base + " character");
              }
              var carry = byte;
              for (var j = 0; j < bytes2.length; ++j) {
                carry += bytes2[j] * this.base;
                bytes2[j] = carry & 255;
                carry >>= 8;
              }
              while (carry > 0) {
                bytes2.push(carry & 255);
                carry >>= 8;
              }
            }
            for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
              bytes2.push(0);
            }
            return lib$1.arrayify(new Uint8Array(bytes2.reverse()));
          };
          return BaseX2;
        }();
        exports3.BaseX = BaseX;
        var Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
        exports3.Base32 = Base32;
        var Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
        exports3.Base58 = Base58;
      });
      var index$e = unwrapExports(lib$e);
      var lib_1$e = lib$e.BaseX;
      var lib_2$d = lib$e.Base32;
      var lib_3$a = lib$e.Base58;
      var minimalisticAssert = assert;
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      assert.equal = function assertEqual(l, r2, msg) {
        if (l != r2)
          throw new Error(msg || "Assertion failed: " + l + " != " + r2);
      };
      var inherits_browser = createCommonjsModule(function(module2) {
        if (typeof Object.create === "function") {
          module2.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            }
          };
        } else {
          module2.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {
              };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      });
      "use strict";
      var inherits_1 = inherits_browser;
      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg === "string") {
          if (!enc) {
            for (var i2 = 0; i2 < msg.length; i2++) {
              var c = msg.charCodeAt(i2);
              var hi = c >> 8;
              var lo = c & 255;
              if (hi)
                res.push(hi, lo);
              else
                res.push(lo);
            }
          } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0)
              msg = "0" + msg;
            for (i2 = 0; i2 < msg.length; i2 += 2)
              res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
          }
        } else {
          for (i2 = 0; i2 < msg.length; i2++)
            res[i2] = msg[i2] | 0;
        }
        return res;
      }
      var toArray_1 = toArray;
      function toHex(msg) {
        var res = "";
        for (var i2 = 0; i2 < msg.length; i2++)
          res += zero2(msg[i2].toString(16));
        return res;
      }
      var toHex_1 = toHex;
      function htonl(w) {
        var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
        return res >>> 0;
      }
      var htonl_1 = htonl;
      function toHex32(msg, endian) {
        var res = "";
        for (var i2 = 0; i2 < msg.length; i2++) {
          var w = msg[i2];
          if (endian === "little")
            w = htonl(w);
          res += zero8(w.toString(16));
        }
        return res;
      }
      var toHex32_1 = toHex32;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      var zero2_1 = zero2;
      function zero8(word) {
        if (word.length === 7)
          return "0" + word;
        else if (word.length === 6)
          return "00" + word;
        else if (word.length === 5)
          return "000" + word;
        else if (word.length === 4)
          return "0000" + word;
        else if (word.length === 3)
          return "00000" + word;
        else if (word.length === 2)
          return "000000" + word;
        else if (word.length === 1)
          return "0000000" + word;
        else
          return word;
      }
      var zero8_1 = zero8;
      function join32(msg, start, end, endian) {
        var len = end - start;
        minimalisticAssert(len % 4 === 0);
        var res = new Array(len / 4);
        for (var i2 = 0, k = start; i2 < res.length; i2++, k += 4) {
          var w;
          if (endian === "big")
            w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
          else
            w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
          res[i2] = w >>> 0;
        }
        return res;
      }
      var join32_1 = join32;
      function split32(msg, endian) {
        var res = new Array(msg.length * 4);
        for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
          var m = msg[i2];
          if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
          } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
          }
        }
        return res;
      }
      var split32_1 = split32;
      function rotr32(w, b) {
        return w >>> b | w << 32 - b;
      }
      var rotr32_1 = rotr32;
      function rotl32(w, b) {
        return w << b | w >>> 32 - b;
      }
      var rotl32_1 = rotl32;
      function sum32(a, b) {
        return a + b >>> 0;
      }
      var sum32_1 = sum32;
      function sum32_3(a, b, c) {
        return a + b + c >>> 0;
      }
      var sum32_3_1 = sum32_3;
      function sum32_4(a, b, c, d) {
        return a + b + c + d >>> 0;
      }
      var sum32_4_1 = sum32_4;
      function sum32_5(a, b, c, d, e) {
        return a + b + c + d + e >>> 0;
      }
      var sum32_5_1 = sum32_5;
      function sum64(buf, pos, ah, al) {
        var bh = buf[pos];
        var bl = buf[pos + 1];
        var lo = al + bl >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        buf[pos] = hi >>> 0;
        buf[pos + 1] = lo;
      }
      var sum64_1 = sum64;
      function sum64_hi(ah, al, bh, bl) {
        var lo = al + bl >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        return hi >>> 0;
      }
      var sum64_hi_1 = sum64_hi;
      function sum64_lo(ah, al, bh, bl) {
        var lo = al + bl;
        return lo >>> 0;
      }
      var sum64_lo_1 = sum64_lo;
      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
        var carry = 0;
        var lo = al;
        lo = lo + bl >>> 0;
        carry += lo < al ? 1 : 0;
        lo = lo + cl >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = lo + dl >>> 0;
        carry += lo < dl ? 1 : 0;
        var hi = ah + bh + ch + dh + carry;
        return hi >>> 0;
      }
      var sum64_4_hi_1 = sum64_4_hi;
      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
        var lo = al + bl + cl + dl;
        return lo >>> 0;
      }
      var sum64_4_lo_1 = sum64_4_lo;
      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var carry = 0;
        var lo = al;
        lo = lo + bl >>> 0;
        carry += lo < al ? 1 : 0;
        lo = lo + cl >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = lo + dl >>> 0;
        carry += lo < dl ? 1 : 0;
        lo = lo + el >>> 0;
        carry += lo < el ? 1 : 0;
        var hi = ah + bh + ch + dh + eh + carry;
        return hi >>> 0;
      }
      var sum64_5_hi_1 = sum64_5_hi;
      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var lo = al + bl + cl + dl + el;
        return lo >>> 0;
      }
      var sum64_5_lo_1 = sum64_5_lo;
      function rotr64_hi(ah, al, num) {
        var r2 = al << 32 - num | ah >>> num;
        return r2 >>> 0;
      }
      var rotr64_hi_1 = rotr64_hi;
      function rotr64_lo(ah, al, num) {
        var r2 = ah << 32 - num | al >>> num;
        return r2 >>> 0;
      }
      var rotr64_lo_1 = rotr64_lo;
      function shr64_hi(ah, al, num) {
        return ah >>> num;
      }
      var shr64_hi_1 = shr64_hi;
      function shr64_lo(ah, al, num) {
        var r2 = ah << 32 - num | al >>> num;
        return r2 >>> 0;
      }
      var shr64_lo_1 = shr64_lo;
      var utils = {
        inherits: inherits_1,
        toArray: toArray_1,
        toHex: toHex_1,
        htonl: htonl_1,
        toHex32: toHex32_1,
        zero2: zero2_1,
        zero8: zero8_1,
        join32: join32_1,
        split32: split32_1,
        rotr32: rotr32_1,
        rotl32: rotl32_1,
        sum32: sum32_1,
        sum32_3: sum32_3_1,
        sum32_4: sum32_4_1,
        sum32_5: sum32_5_1,
        sum64: sum64_1,
        sum64_hi: sum64_hi_1,
        sum64_lo: sum64_lo_1,
        sum64_4_hi: sum64_4_hi_1,
        sum64_4_lo: sum64_4_lo_1,
        sum64_5_hi: sum64_5_hi_1,
        sum64_5_lo: sum64_5_lo_1,
        rotr64_hi: rotr64_hi_1,
        rotr64_lo: rotr64_lo_1,
        shr64_hi: shr64_hi_1,
        shr64_lo: shr64_lo_1
      };
      "use strict";
      function BlockHash() {
        this.pending = null;
        this.pendingTotal = 0;
        this.blockSize = this.constructor.blockSize;
        this.outSize = this.constructor.outSize;
        this.hmacStrength = this.constructor.hmacStrength;
        this.padLength = this.constructor.padLength / 8;
        this.endian = "big";
        this._delta8 = this.blockSize / 8;
        this._delta32 = this.blockSize / 32;
      }
      var BlockHash_1 = BlockHash;
      BlockHash.prototype.update = function update(msg, enc) {
        msg = utils.toArray(msg, enc);
        if (!this.pending)
          this.pending = msg;
        else
          this.pending = this.pending.concat(msg);
        this.pendingTotal += msg.length;
        if (this.pending.length >= this._delta8) {
          msg = this.pending;
          var r2 = msg.length % this._delta8;
          this.pending = msg.slice(msg.length - r2, msg.length);
          if (this.pending.length === 0)
            this.pending = null;
          msg = utils.join32(msg, 0, msg.length - r2, this.endian);
          for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
            this._update(msg, i2, i2 + this._delta32);
        }
        return this;
      };
      BlockHash.prototype.digest = function digest(enc) {
        this.update(this._pad());
        minimalisticAssert(this.pending === null);
        return this._digest(enc);
      };
      BlockHash.prototype._pad = function pad() {
        var len = this.pendingTotal;
        var bytes2 = this._delta8;
        var k = bytes2 - (len + this.padLength) % bytes2;
        var res = new Array(k + this.padLength);
        res[0] = 128;
        for (var i2 = 1; i2 < k; i2++)
          res[i2] = 0;
        len <<= 3;
        if (this.endian === "big") {
          for (var t = 8; t < this.padLength; t++)
            res[i2++] = 0;
          res[i2++] = 0;
          res[i2++] = 0;
          res[i2++] = 0;
          res[i2++] = 0;
          res[i2++] = len >>> 24 & 255;
          res[i2++] = len >>> 16 & 255;
          res[i2++] = len >>> 8 & 255;
          res[i2++] = len & 255;
        } else {
          res[i2++] = len & 255;
          res[i2++] = len >>> 8 & 255;
          res[i2++] = len >>> 16 & 255;
          res[i2++] = len >>> 24 & 255;
          res[i2++] = 0;
          res[i2++] = 0;
          res[i2++] = 0;
          res[i2++] = 0;
          for (t = 8; t < this.padLength; t++)
            res[i2++] = 0;
        }
        return res;
      };
      var common = {
        BlockHash: BlockHash_1
      };
      var _1 = {};
      var _224 = {};
      "use strict";
      var rotr32$1 = utils.rotr32;
      function ft_1(s2, x, y, z) {
        if (s2 === 0)
          return ch32(x, y, z);
        if (s2 === 1 || s2 === 3)
          return p32(x, y, z);
        if (s2 === 2)
          return maj32(x, y, z);
      }
      var ft_1_1 = ft_1;
      function ch32(x, y, z) {
        return x & y ^ ~x & z;
      }
      var ch32_1 = ch32;
      function maj32(x, y, z) {
        return x & y ^ x & z ^ y & z;
      }
      var maj32_1 = maj32;
      function p32(x, y, z) {
        return x ^ y ^ z;
      }
      var p32_1 = p32;
      function s0_256(x) {
        return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
      }
      var s0_256_1 = s0_256;
      function s1_256(x) {
        return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
      }
      var s1_256_1 = s1_256;
      function g0_256(x) {
        return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;
      }
      var g0_256_1 = g0_256;
      function g1_256(x) {
        return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;
      }
      var g1_256_1 = g1_256;
      var common$1 = {
        ft_1: ft_1_1,
        ch32: ch32_1,
        maj32: maj32_1,
        p32: p32_1,
        s0_256: s0_256_1,
        s1_256: s1_256_1,
        g0_256: g0_256_1,
        g1_256: g1_256_1
      };
      "use strict";
      var sum32$1 = utils.sum32;
      var sum32_4$1 = utils.sum32_4;
      var sum32_5$1 = utils.sum32_5;
      var ch32$1 = common$1.ch32;
      var maj32$1 = common$1.maj32;
      var s0_256$1 = common$1.s0_256;
      var s1_256$1 = common$1.s1_256;
      var g0_256$1 = common$1.g0_256;
      var g1_256$1 = common$1.g1_256;
      var BlockHash$1 = common.BlockHash;
      var sha256_K = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ];
      function SHA256() {
        if (!(this instanceof SHA256))
          return new SHA256();
        BlockHash$1.call(this);
        this.h = [
          1779033703,
          3144134277,
          1013904242,
          2773480762,
          1359893119,
          2600822924,
          528734635,
          1541459225
        ];
        this.k = sha256_K;
        this.W = new Array(64);
      }
      utils.inherits(SHA256, BlockHash$1);
      var _256 = SHA256;
      SHA256.blockSize = 512;
      SHA256.outSize = 256;
      SHA256.hmacStrength = 192;
      SHA256.padLength = 64;
      SHA256.prototype._update = function _update(msg, start) {
        var W = this.W;
        for (var i2 = 0; i2 < 16; i2++)
          W[i2] = msg[start + i2];
        for (; i2 < W.length; i2++)
          W[i2] = sum32_4$1(g1_256$1(W[i2 - 2]), W[i2 - 7], g0_256$1(W[i2 - 15]), W[i2 - 16]);
        var a = this.h[0];
        var b = this.h[1];
        var c = this.h[2];
        var d = this.h[3];
        var e = this.h[4];
        var f2 = this.h[5];
        var g = this.h[6];
        var h = this.h[7];
        minimalisticAssert(this.k.length === W.length);
        for (i2 = 0; i2 < W.length; i2++) {
          var T1 = sum32_5$1(h, s1_256$1(e), ch32$1(e, f2, g), this.k[i2], W[i2]);
          var T2 = sum32$1(s0_256$1(a), maj32$1(a, b, c));
          h = g;
          g = f2;
          f2 = e;
          e = sum32$1(d, T1);
          d = c;
          c = b;
          b = a;
          a = sum32$1(T1, T2);
        }
        this.h[0] = sum32$1(this.h[0], a);
        this.h[1] = sum32$1(this.h[1], b);
        this.h[2] = sum32$1(this.h[2], c);
        this.h[3] = sum32$1(this.h[3], d);
        this.h[4] = sum32$1(this.h[4], e);
        this.h[5] = sum32$1(this.h[5], f2);
        this.h[6] = sum32$1(this.h[6], g);
        this.h[7] = sum32$1(this.h[7], h);
      };
      SHA256.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h, "big");
        else
          return utils.split32(this.h, "big");
      };
      var _384 = {};
      "use strict";
      var rotr64_hi$1 = utils.rotr64_hi;
      var rotr64_lo$1 = utils.rotr64_lo;
      var shr64_hi$1 = utils.shr64_hi;
      var shr64_lo$1 = utils.shr64_lo;
      var sum64$1 = utils.sum64;
      var sum64_hi$1 = utils.sum64_hi;
      var sum64_lo$1 = utils.sum64_lo;
      var sum64_4_hi$1 = utils.sum64_4_hi;
      var sum64_4_lo$1 = utils.sum64_4_lo;
      var sum64_5_hi$1 = utils.sum64_5_hi;
      var sum64_5_lo$1 = utils.sum64_5_lo;
      var BlockHash$2 = common.BlockHash;
      var sha512_K = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
      ];
      function SHA512() {
        if (!(this instanceof SHA512))
          return new SHA512();
        BlockHash$2.call(this);
        this.h = [
          1779033703,
          4089235720,
          3144134277,
          2227873595,
          1013904242,
          4271175723,
          2773480762,
          1595750129,
          1359893119,
          2917565137,
          2600822924,
          725511199,
          528734635,
          4215389547,
          1541459225,
          327033209
        ];
        this.k = sha512_K;
        this.W = new Array(160);
      }
      utils.inherits(SHA512, BlockHash$2);
      var _512 = SHA512;
      SHA512.blockSize = 1024;
      SHA512.outSize = 512;
      SHA512.hmacStrength = 192;
      SHA512.padLength = 128;
      SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
        var W = this.W;
        for (var i2 = 0; i2 < 32; i2++)
          W[i2] = msg[start + i2];
        for (; i2 < W.length; i2 += 2) {
          var c0_hi = g1_512_hi(W[i2 - 4], W[i2 - 3]);
          var c0_lo = g1_512_lo(W[i2 - 4], W[i2 - 3]);
          var c1_hi = W[i2 - 14];
          var c1_lo = W[i2 - 13];
          var c2_hi = g0_512_hi(W[i2 - 30], W[i2 - 29]);
          var c2_lo = g0_512_lo(W[i2 - 30], W[i2 - 29]);
          var c3_hi = W[i2 - 32];
          var c3_lo = W[i2 - 31];
          W[i2] = sum64_4_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
          W[i2 + 1] = sum64_4_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        }
      };
      SHA512.prototype._update = function _update(msg, start) {
        this._prepareBlock(msg, start);
        var W = this.W;
        var ah = this.h[0];
        var al = this.h[1];
        var bh = this.h[2];
        var bl = this.h[3];
        var ch = this.h[4];
        var cl = this.h[5];
        var dh = this.h[6];
        var dl = this.h[7];
        var eh = this.h[8];
        var el = this.h[9];
        var fh = this.h[10];
        var fl = this.h[11];
        var gh = this.h[12];
        var gl = this.h[13];
        var hh = this.h[14];
        var hl = this.h[15];
        minimalisticAssert(this.k.length === W.length);
        for (var i2 = 0; i2 < W.length; i2 += 2) {
          var c0_hi = hh;
          var c0_lo = hl;
          var c1_hi = s1_512_hi(eh, el);
          var c1_lo = s1_512_lo(eh, el);
          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
          var c3_hi = this.k[i2];
          var c3_lo = this.k[i2 + 1];
          var c4_hi = W[i2];
          var c4_lo = W[i2 + 1];
          var T1_hi = sum64_5_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
          var T1_lo = sum64_5_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
          c0_hi = s0_512_hi(ah, al);
          c0_lo = s0_512_lo(ah, al);
          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
          var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
          var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
          el = sum64_lo$1(dl, dl, T1_hi, T1_lo);
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
          al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
        }
        sum64$1(this.h, 0, ah, al);
        sum64$1(this.h, 2, bh, bl);
        sum64$1(this.h, 4, ch, cl);
        sum64$1(this.h, 6, dh, dl);
        sum64$1(this.h, 8, eh, el);
        sum64$1(this.h, 10, fh, fl);
        sum64$1(this.h, 12, gh, gl);
        sum64$1(this.h, 14, hh, hl);
      };
      SHA512.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h, "big");
        else
          return utils.split32(this.h, "big");
      };
      function ch64_hi(xh, xl, yh, yl, zh) {
        var r2 = xh & yh ^ ~xh & zh;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function ch64_lo(xh, xl, yh, yl, zh, zl) {
        var r2 = xl & yl ^ ~xl & zl;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function maj64_hi(xh, xl, yh, yl, zh) {
        var r2 = xh & yh ^ xh & zh ^ yh & zh;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function maj64_lo(xh, xl, yh, yl, zh, zl) {
        var r2 = xl & yl ^ xl & zl ^ yl & zl;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function s0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi$1(xh, xl, 28);
        var c1_hi = rotr64_hi$1(xl, xh, 2);
        var c2_hi = rotr64_hi$1(xl, xh, 7);
        var r2 = c0_hi ^ c1_hi ^ c2_hi;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function s0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo$1(xh, xl, 28);
        var c1_lo = rotr64_lo$1(xl, xh, 2);
        var c2_lo = rotr64_lo$1(xl, xh, 7);
        var r2 = c0_lo ^ c1_lo ^ c2_lo;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function s1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi$1(xh, xl, 14);
        var c1_hi = rotr64_hi$1(xh, xl, 18);
        var c2_hi = rotr64_hi$1(xl, xh, 9);
        var r2 = c0_hi ^ c1_hi ^ c2_hi;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function s1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo$1(xh, xl, 14);
        var c1_lo = rotr64_lo$1(xh, xl, 18);
        var c2_lo = rotr64_lo$1(xl, xh, 9);
        var r2 = c0_lo ^ c1_lo ^ c2_lo;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function g0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi$1(xh, xl, 1);
        var c1_hi = rotr64_hi$1(xh, xl, 8);
        var c2_hi = shr64_hi$1(xh, xl, 7);
        var r2 = c0_hi ^ c1_hi ^ c2_hi;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function g0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo$1(xh, xl, 1);
        var c1_lo = rotr64_lo$1(xh, xl, 8);
        var c2_lo = shr64_lo$1(xh, xl, 7);
        var r2 = c0_lo ^ c1_lo ^ c2_lo;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function g1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi$1(xh, xl, 19);
        var c1_hi = rotr64_hi$1(xl, xh, 29);
        var c2_hi = shr64_hi$1(xh, xl, 6);
        var r2 = c0_hi ^ c1_hi ^ c2_hi;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      function g1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo$1(xh, xl, 19);
        var c1_lo = rotr64_lo$1(xl, xh, 29);
        var c2_lo = shr64_lo$1(xh, xl, 6);
        var r2 = c0_lo ^ c1_lo ^ c2_lo;
        if (r2 < 0)
          r2 += 4294967296;
        return r2;
      }
      "use strict";
      var sha1 = _1;
      var sha224 = _224;
      var sha256 = _256;
      var sha384 = _384;
      var sha512 = _512;
      var sha = {
        sha1,
        sha224,
        sha256,
        sha384,
        sha512
      };
      "use strict";
      var rotl32$1 = utils.rotl32;
      var sum32$2 = utils.sum32;
      var sum32_3$1 = utils.sum32_3;
      var sum32_4$2 = utils.sum32_4;
      var BlockHash$3 = common.BlockHash;
      function RIPEMD160() {
        if (!(this instanceof RIPEMD160))
          return new RIPEMD160();
        BlockHash$3.call(this);
        this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
        this.endian = "little";
      }
      utils.inherits(RIPEMD160, BlockHash$3);
      var ripemd160 = RIPEMD160;
      RIPEMD160.blockSize = 512;
      RIPEMD160.outSize = 160;
      RIPEMD160.hmacStrength = 192;
      RIPEMD160.padLength = 64;
      RIPEMD160.prototype._update = function update(msg, start) {
        var A = this.h[0];
        var B = this.h[1];
        var C = this.h[2];
        var D = this.h[3];
        var E = this.h[4];
        var Ah = A;
        var Bh = B;
        var Ch = C;
        var Dh = D;
        var Eh = E;
        for (var j = 0; j < 80; j++) {
          var T = sum32$2(rotl32$1(sum32_4$2(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
          A = E;
          E = D;
          D = rotl32$1(C, 10);
          C = B;
          B = T;
          T = sum32$2(rotl32$1(sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
          Ah = Eh;
          Eh = Dh;
          Dh = rotl32$1(Ch, 10);
          Ch = Bh;
          Bh = T;
        }
        T = sum32_3$1(this.h[1], C, Dh);
        this.h[1] = sum32_3$1(this.h[2], D, Eh);
        this.h[2] = sum32_3$1(this.h[3], E, Ah);
        this.h[3] = sum32_3$1(this.h[4], A, Bh);
        this.h[4] = sum32_3$1(this.h[0], B, Ch);
        this.h[0] = T;
      };
      RIPEMD160.prototype._digest = function digest(enc) {
        if (enc === "hex")
          return utils.toHex32(this.h, "little");
        else
          return utils.split32(this.h, "little");
      };
      function f(j, x, y, z) {
        if (j <= 15)
          return x ^ y ^ z;
        else if (j <= 31)
          return x & y | ~x & z;
        else if (j <= 47)
          return (x | ~y) ^ z;
        else if (j <= 63)
          return x & z | y & ~z;
        else
          return x ^ (y | ~z);
      }
      function K(j) {
        if (j <= 15)
          return 0;
        else if (j <= 31)
          return 1518500249;
        else if (j <= 47)
          return 1859775393;
        else if (j <= 63)
          return 2400959708;
        else
          return 2840853838;
      }
      function Kh(j) {
        if (j <= 15)
          return 1352829926;
        else if (j <= 31)
          return 1548603684;
        else if (j <= 47)
          return 1836072691;
        else if (j <= 63)
          return 2053994217;
        else
          return 0;
      }
      var r = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
      ];
      var rh = [
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
      ];
      var s = [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
      ];
      var sh = [
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
      ];
      var ripemd = {
        ripemd160
      };
      "use strict";
      function Hmac(hash, key2, enc) {
        if (!(this instanceof Hmac))
          return new Hmac(hash, key2, enc);
        this.Hash = hash;
        this.blockSize = hash.blockSize / 8;
        this.outSize = hash.outSize / 8;
        this.inner = null;
        this.outer = null;
        this._init(utils.toArray(key2, enc));
      }
      var hmac = Hmac;
      Hmac.prototype._init = function init(key2) {
        if (key2.length > this.blockSize)
          key2 = new this.Hash().update(key2).digest();
        minimalisticAssert(key2.length <= this.blockSize);
        for (var i2 = key2.length; i2 < this.blockSize; i2++)
          key2.push(0);
        for (i2 = 0; i2 < key2.length; i2++)
          key2[i2] ^= 54;
        this.inner = new this.Hash().update(key2);
        for (i2 = 0; i2 < key2.length; i2++)
          key2[i2] ^= 106;
        this.outer = new this.Hash().update(key2);
      };
      Hmac.prototype.update = function update(msg, enc) {
        this.inner.update(msg, enc);
        return this;
      };
      Hmac.prototype.digest = function digest(enc) {
        this.outer.update(this.inner.digest());
        return this.outer.digest(enc);
      };
      var hash_1 = createCommonjsModule(function(module2, exports3) {
        var hash = exports3;
        hash.utils = utils;
        hash.common = common;
        hash.sha = sha;
        hash.ripemd = ripemd;
        hash.hmac = hmac;
        hash.sha1 = hash.sha.sha1;
        hash.sha256 = hash.sha.sha256;
        hash.sha224 = hash.sha.sha224;
        hash.sha384 = hash.sha.sha384;
        hash.sha512 = hash.sha.sha512;
        hash.ripemd160 = hash.ripemd.ripemd160;
      });
      var hash_2 = hash_1.hmac;
      var hash_3 = hash_1.ripemd160;
      var hash_4 = hash_1.sha256;
      var hash_5 = hash_1.sha512;
      var _version$o = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "sha2/5.0.1";
      });
      var _version$p = unwrapExports(_version$o);
      var _version_1$c = _version$o.version;
      var browser = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var hash = __importStar(hash_1);
        var logger = new lib.Logger(_version$o.version);
        var SupportedAlgorithm;
        (function(SupportedAlgorithm2) {
          SupportedAlgorithm2["sha256"] = "sha256";
          SupportedAlgorithm2["sha512"] = "sha512";
        })(SupportedAlgorithm = exports3.SupportedAlgorithm || (exports3.SupportedAlgorithm = {}));
        ;
        function ripemd1602(data) {
          return "0x" + hash.ripemd160().update(lib$1.arrayify(data)).digest("hex");
        }
        exports3.ripemd160 = ripemd1602;
        function sha2562(data) {
          return "0x" + hash.sha256().update(lib$1.arrayify(data)).digest("hex");
        }
        exports3.sha256 = sha2562;
        function sha5122(data) {
          return "0x" + hash.sha512().update(lib$1.arrayify(data)).digest("hex");
        }
        exports3.sha512 = sha5122;
        function computeHmac(algorithm, key2, data) {
          if (!SupportedAlgorithm[algorithm]) {
            logger.throwError("unsupported algorithm " + algorithm, lib.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "hmac",
              algorithm
            });
          }
          return "0x" + hash.hmac(hash[algorithm], lib$1.arrayify(key2)).update(lib$1.arrayify(data)).digest("hex");
        }
        exports3.computeHmac = computeHmac;
      });
      var browser$1 = unwrapExports(browser);
      var browser_1 = browser.SupportedAlgorithm;
      var browser_2 = browser.ripemd160;
      var browser_3 = browser.sha256;
      var browser_4 = browser.sha512;
      var browser_5 = browser.computeHmac;
      var browser$2 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
          password = lib$1.arrayify(password);
          salt = lib$1.arrayify(salt);
          var hLen;
          var l = 1;
          var DK = new Uint8Array(keylen);
          var block1 = new Uint8Array(salt.length + 4);
          block1.set(salt);
          var r2;
          var T;
          for (var i2 = 1; i2 <= l; i2++) {
            block1[salt.length] = i2 >> 24 & 255;
            block1[salt.length + 1] = i2 >> 16 & 255;
            block1[salt.length + 2] = i2 >> 8 & 255;
            block1[salt.length + 3] = i2 & 255;
            var U = lib$1.arrayify(browser.computeHmac(hashAlgorithm, password, block1));
            if (!hLen) {
              hLen = U.length;
              T = new Uint8Array(hLen);
              l = Math.ceil(keylen / hLen);
              r2 = keylen - (l - 1) * hLen;
            }
            T.set(U);
            for (var j = 1; j < iterations; j++) {
              U = lib$1.arrayify(browser.computeHmac(hashAlgorithm, password, U));
              for (var k = 0; k < hLen; k++)
                T[k] ^= U[k];
            }
            var destPos = (i2 - 1) * hLen;
            var len = i2 === l ? r2 : hLen;
            DK.set(lib$1.arrayify(T).slice(0, len), destPos);
          }
          return lib$1.hexlify(DK);
        }
        exports3.pbkdf2 = pbkdf2;
      });
      var browser$3 = unwrapExports(browser$2);
      var browser_1$1 = browser$2.pbkdf2;
      var version = "6.5.3";
      var _package = {
        version
      };
      var _package$1 = Object.freeze({
        version,
        default: _package
      });
      var utils_1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var utils2 = exports3;
        function toArray2(msg, enc) {
          if (Array.isArray(msg))
            return msg.slice();
          if (!msg)
            return [];
          var res = [];
          if (typeof msg !== "string") {
            for (var i2 = 0; i2 < msg.length; i2++)
              res[i2] = msg[i2] | 0;
            return res;
          }
          if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0)
              msg = "0" + msg;
            for (var i2 = 0; i2 < msg.length; i2 += 2)
              res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
          } else {
            for (var i2 = 0; i2 < msg.length; i2++) {
              var c = msg.charCodeAt(i2);
              var hi = c >> 8;
              var lo = c & 255;
              if (hi)
                res.push(hi, lo);
              else
                res.push(lo);
            }
          }
          return res;
        }
        utils2.toArray = toArray2;
        function zero22(word) {
          if (word.length === 1)
            return "0" + word;
          else
            return word;
        }
        utils2.zero2 = zero22;
        function toHex2(msg) {
          var res = "";
          for (var i2 = 0; i2 < msg.length; i2++)
            res += zero22(msg[i2].toString(16));
          return res;
        }
        utils2.toHex = toHex2;
        utils2.encode = function encode(arr, enc) {
          if (enc === "hex")
            return toHex2(arr);
          else
            return arr;
        };
      });
      var utils_1$1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var utils2 = exports3;
        utils2.assert = minimalisticAssert;
        utils2.toArray = utils_1.toArray;
        utils2.zero2 = utils_1.zero2;
        utils2.toHex = utils_1.toHex;
        utils2.encode = utils_1.encode;
        function getNAF2(num, w, bits) {
          var naf = new Array(Math.max(num.bitLength(), bits) + 1);
          naf.fill(0);
          var ws = 1 << w + 1;
          var k = num.clone();
          for (var i2 = 0; i2 < naf.length; i2++) {
            var z;
            var mod = k.andln(ws - 1);
            if (k.isOdd()) {
              if (mod > (ws >> 1) - 1)
                z = (ws >> 1) - mod;
              else
                z = mod;
              k.isubn(z);
            } else {
              z = 0;
            }
            naf[i2] = z;
            k.iushrn(1);
          }
          return naf;
        }
        utils2.getNAF = getNAF2;
        function getJSF2(k1, k2) {
          var jsf = [
            [],
            []
          ];
          k1 = k1.clone();
          k2 = k2.clone();
          var d1 = 0;
          var d2 = 0;
          while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
            var m14 = k1.andln(3) + d1 & 3;
            var m24 = k2.andln(3) + d2 & 3;
            if (m14 === 3)
              m14 = -1;
            if (m24 === 3)
              m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
              u1 = 0;
            } else {
              var m8 = k1.andln(7) + d1 & 7;
              if ((m8 === 3 || m8 === 5) && m24 === 2)
                u1 = -m14;
              else
                u1 = m14;
            }
            jsf[0].push(u1);
            var u2;
            if ((m24 & 1) === 0) {
              u2 = 0;
            } else {
              var m8 = k2.andln(7) + d2 & 7;
              if ((m8 === 3 || m8 === 5) && m14 === 2)
                u2 = -m24;
              else
                u2 = m24;
            }
            jsf[1].push(u2);
            if (2 * d1 === u1 + 1)
              d1 = 1 - d1;
            if (2 * d2 === u2 + 1)
              d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
          }
          return jsf;
        }
        utils2.getJSF = getJSF2;
        function cachedProperty(obj, name2, computer) {
          var key2 = "_" + name2;
          obj.prototype[name2] = function cachedProperty2() {
            return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
          };
        }
        utils2.cachedProperty = cachedProperty;
        function parseBytes(bytes2) {
          return typeof bytes2 === "string" ? utils2.toArray(bytes2, "hex") : bytes2;
        }
        utils2.parseBytes = parseBytes;
        function intFromLE(bytes2) {
          return new bn(bytes2, "hex", "le");
        }
        utils2.intFromLE = intFromLE;
      });
      var brorand = function(length) {
        var result = new Uint8Array(length);
        (commonjsGlobal.crypto || commonjsGlobal.msCrypto).getRandomValues(result);
        return result;
      };
      "use strict";
      var getNAF = utils_1$1.getNAF;
      var getJSF = utils_1$1.getJSF;
      var assert$1 = utils_1$1.assert;
      function BaseCurve(type, conf) {
        this.type = type;
        this.p = new bn(conf.p, 16);
        this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);
        this.zero = new bn(0).toRed(this.red);
        this.one = new bn(1).toRed(this.red);
        this.two = new bn(2).toRed(this.red);
        this.n = conf.n && new bn(conf.n, 16);
        this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
        this._wnafT1 = new Array(4);
        this._wnafT2 = new Array(4);
        this._wnafT3 = new Array(4);
        this._wnafT4 = new Array(4);
        this._bitLength = this.n ? this.n.bitLength() : 0;
        var adjustCount = this.n && this.p.div(this.n);
        if (!adjustCount || adjustCount.cmpn(100) > 0) {
          this.redN = null;
        } else {
          this._maxwellTrick = true;
          this.redN = this.n.toRed(this.red);
        }
      }
      var base = BaseCurve;
      BaseCurve.prototype.point = function point() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype.validate = function validate() {
        throw new Error("Not implemented");
      };
      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
        assert$1(p.precomputed);
        var doubles = p._getDoubles();
        var naf = getNAF(k, 1, this._bitLength);
        var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
        I /= 3;
        var repr = [];
        for (var j = 0; j < naf.length; j += doubles.step) {
          var nafW = 0;
          for (var k = j + doubles.step - 1; k >= j; k--)
            nafW = (nafW << 1) + naf[k];
          repr.push(nafW);
        }
        var a = this.jpoint(null, null, null);
        var b = this.jpoint(null, null, null);
        for (var i2 = I; i2 > 0; i2--) {
          for (var j = 0; j < repr.length; j++) {
            var nafW = repr[j];
            if (nafW === i2)
              b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i2)
              b = b.mixedAdd(doubles.points[j].neg());
          }
          a = a.add(b);
        }
        return a.toP();
      };
      BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
        var w = 4;
        var nafPoints = p._getNAFPoints(w);
        w = nafPoints.wnd;
        var wnd = nafPoints.points;
        var naf = getNAF(k, w, this._bitLength);
        var acc = this.jpoint(null, null, null);
        for (var i2 = naf.length - 1; i2 >= 0; i2--) {
          for (var k = 0; i2 >= 0 && naf[i2] === 0; i2--)
            k++;
          if (i2 >= 0)
            k++;
          acc = acc.dblp(k);
          if (i2 < 0)
            break;
          var z = naf[i2];
          assert$1(z !== 0);
          if (p.type === "affine") {
            if (z > 0)
              acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else
              acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
          } else {
            if (z > 0)
              acc = acc.add(wnd[z - 1 >> 1]);
            else
              acc = acc.add(wnd[-z - 1 >> 1].neg());
          }
        }
        return p.type === "affine" ? acc.toP() : acc;
      };
      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
        var wndWidth = this._wnafT1;
        var wnd = this._wnafT2;
        var naf = this._wnafT3;
        var max = 0;
        for (var i2 = 0; i2 < len; i2++) {
          var p = points[i2];
          var nafPoints = p._getNAFPoints(defW);
          wndWidth[i2] = nafPoints.wnd;
          wnd[i2] = nafPoints.points;
        }
        for (var i2 = len - 1; i2 >= 1; i2 -= 2) {
          var a = i2 - 1;
          var b = i2;
          if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
          }
          var comb = [
            points[a],
            null,
            null,
            points[b]
          ];
          if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
          } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          }
          var index2 = [
            -3,
            -1,
            -5,
            -7,
            0,
            7,
            5,
            1,
            3
          ];
          var jsf = getJSF(coeffs[a], coeffs[b]);
          max = Math.max(jsf[0].length, max);
          naf[a] = new Array(max);
          naf[b] = new Array(max);
          for (var j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index2[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
          }
        }
        var acc = this.jpoint(null, null, null);
        var tmp = this._wnafT4;
        for (var i2 = max; i2 >= 0; i2--) {
          var k = 0;
          while (i2 >= 0) {
            var zero = true;
            for (var j = 0; j < len; j++) {
              tmp[j] = naf[j][i2] | 0;
              if (tmp[j] !== 0)
                zero = false;
            }
            if (!zero)
              break;
            k++;
            i2--;
          }
          if (i2 >= 0)
            k++;
          acc = acc.dblp(k);
          if (i2 < 0)
            break;
          for (var j = 0; j < len; j++) {
            var z = tmp[j];
            var p;
            if (z === 0)
              continue;
            else if (z > 0)
              p = wnd[j][z - 1 >> 1];
            else if (z < 0)
              p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine")
              acc = acc.mixedAdd(p);
            else
              acc = acc.add(p);
          }
        }
        for (var i2 = 0; i2 < len; i2++)
          wnd[i2] = null;
        if (jacobianResult)
          return acc;
        else
          return acc.toP();
      };
      function BasePoint(curve, type) {
        this.curve = curve;
        this.type = type;
        this.precomputed = null;
      }
      BaseCurve.BasePoint = BasePoint;
      BasePoint.prototype.eq = function eq() {
        throw new Error("Not implemented");
      };
      BasePoint.prototype.validate = function validate() {
        return this.curve.validate(this);
      };
      BaseCurve.prototype.decodePoint = function decodePoint(bytes2, enc) {
        bytes2 = utils_1$1.toArray(bytes2, enc);
        var len = this.p.byteLength();
        if ((bytes2[0] === 4 || bytes2[0] === 6 || bytes2[0] === 7) && bytes2.length - 1 === 2 * len) {
          if (bytes2[0] === 6)
            assert$1(bytes2[bytes2.length - 1] % 2 === 0);
          else if (bytes2[0] === 7)
            assert$1(bytes2[bytes2.length - 1] % 2 === 1);
          var res = this.point(bytes2.slice(1, 1 + len), bytes2.slice(1 + len, 1 + 2 * len));
          return res;
        } else if ((bytes2[0] === 2 || bytes2[0] === 3) && bytes2.length - 1 === len) {
          return this.pointFromX(bytes2.slice(1, 1 + len), bytes2[0] === 3);
        }
        throw new Error("Unknown point format");
      };
      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
        return this.encode(enc, true);
      };
      BasePoint.prototype._encode = function _encode(compact) {
        var len = this.curve.p.byteLength();
        var x = this.getX().toArray("be", len);
        if (compact)
          return [this.getY().isEven() ? 2 : 3].concat(x);
        return [4].concat(x, this.getY().toArray("be", len));
      };
      BasePoint.prototype.encode = function encode(enc, compact) {
        return utils_1$1.encode(this._encode(compact), enc);
      };
      BasePoint.prototype.precompute = function precompute(power) {
        if (this.precomputed)
          return this;
        var precomputed = {
          doubles: null,
          naf: null,
          beta: null
        };
        precomputed.naf = this._getNAFPoints(8);
        precomputed.doubles = this._getDoubles(4, power);
        precomputed.beta = this._getBeta();
        this.precomputed = precomputed;
        return this;
      };
      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
        if (!this.precomputed)
          return false;
        var doubles = this.precomputed.doubles;
        if (!doubles)
          return false;
        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
      };
      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
        if (this.precomputed && this.precomputed.doubles)
          return this.precomputed.doubles;
        var doubles = [this];
        var acc = this;
        for (var i2 = 0; i2 < power; i2 += step) {
          for (var j = 0; j < step; j++)
            acc = acc.dbl();
          doubles.push(acc);
        }
        return {
          step,
          points: doubles
        };
      };
      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
        if (this.precomputed && this.precomputed.naf)
          return this.precomputed.naf;
        var res = [this];
        var max = (1 << wnd) - 1;
        var dbl = max === 1 ? null : this.dbl();
        for (var i2 = 1; i2 < max; i2++)
          res[i2] = res[i2 - 1].add(dbl);
        return {
          wnd,
          points: res
        };
      };
      BasePoint.prototype._getBeta = function _getBeta() {
        return null;
      };
      BasePoint.prototype.dblp = function dblp(k) {
        var r2 = this;
        for (var i2 = 0; i2 < k; i2++)
          r2 = r2.dbl();
        return r2;
      };
      "use strict";
      var assert$2 = utils_1$1.assert;
      function ShortCurve(conf) {
        base.call(this, "short", conf);
        this.a = new bn(conf.a, 16).toRed(this.red);
        this.b = new bn(conf.b, 16).toRed(this.red);
        this.tinv = this.two.redInvm();
        this.zeroA = this.a.fromRed().cmpn(0) === 0;
        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
        this.endo = this._getEndomorphism(conf);
        this._endoWnafT1 = new Array(4);
        this._endoWnafT2 = new Array(4);
      }
      inherits_browser(ShortCurve, base);
      var short_1 = ShortCurve;
      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
          return;
        var beta;
        var lambda;
        if (conf.beta) {
          beta = new bn(conf.beta, 16).toRed(this.red);
        } else {
          var betas = this._getEndoRoots(this.p);
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
        }
        if (conf.lambda) {
          lambda = new bn(conf.lambda, 16);
        } else {
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
          } else {
            lambda = lambdas[1];
            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
        }
        var basis;
        if (conf.basis) {
          basis = conf.basis.map(function(vec) {
            return {
              a: new bn(vec.a, 16),
              b: new bn(vec.b, 16)
            };
          });
        } else {
          basis = this._getEndoBasis(lambda);
        }
        return {
          beta,
          lambda,
          basis
        };
      };
      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
        var red = num === this.p ? this.red : bn.mont(num);
        var tinv = new bn(2).toRed(red).redInvm();
        var ntinv = tinv.redNeg();
        var s2 = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);
        var l1 = ntinv.redAdd(s2).fromRed();
        var l2 = ntinv.redSub(s2).fromRed();
        return [l1, l2];
      };
      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
        var u = lambda;
        var v = this.n.clone();
        var x1 = new bn(1);
        var y1 = new bn(0);
        var x2 = new bn(0);
        var y2 = new bn(1);
        var a0;
        var b0;
        var a1;
        var b1;
        var a2;
        var b2;
        var prevR;
        var i2 = 0;
        var r2;
        var x;
        while (u.cmpn(0) !== 0) {
          var q = v.div(u);
          r2 = v.sub(q.mul(u));
          x = x2.sub(q.mul(x1));
          var y = y2.sub(q.mul(y1));
          if (!a1 && r2.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r2.neg();
            b1 = x;
          } else if (a1 && ++i2 === 2) {
            break;
          }
          prevR = r2;
          v = u;
          u = r2;
          x2 = x1;
          x1 = x;
          y2 = y1;
          y1 = y;
        }
        a2 = r2.neg();
        b2 = x;
        var len1 = a1.sqr().add(b1.sqr());
        var len2 = a2.sqr().add(b2.sqr());
        if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
        }
        if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
        }
        if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
        }
        return [
          {a: a1, b: b1},
          {a: a2, b: b2}
        ];
      };
      ShortCurve.prototype._endoSplit = function _endoSplit(k) {
        var basis = this.endo.basis;
        var v12 = basis[0];
        var v2 = basis[1];
        var c1 = v2.b.mul(k).divRound(this.n);
        var c2 = v12.b.neg().mul(k).divRound(this.n);
        var p1 = c1.mul(v12.a);
        var p2 = c2.mul(v2.a);
        var q1 = c1.mul(v12.b);
        var q2 = c2.mul(v2.b);
        var k1 = k.sub(p1).sub(p2);
        var k2 = q1.add(q2).neg();
        return {k1, k2};
      };
      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new bn(x, 16);
        if (!x.red)
          x = x.toRed(this.red);
        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
          throw new Error("invalid point");
        var isOdd = y.fromRed().isOdd();
        if (odd && !isOdd || !odd && isOdd)
          y = y.redNeg();
        return this.point(x, y);
      };
      ShortCurve.prototype.validate = function validate(point) {
        if (point.inf)
          return true;
        var x = point.x;
        var y = point.y;
        var ax = this.a.redMul(x);
        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
        return y.redSqr().redISub(rhs).cmpn(0) === 0;
      };
      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i2 = 0; i2 < points.length; i2++) {
          var split = this._endoSplit(coeffs[i2]);
          var p = points[i2];
          var beta = p._getBeta();
          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }
          npoints[i2 * 2] = p;
          npoints[i2 * 2 + 1] = beta;
          ncoeffs[i2 * 2] = split.k1;
          ncoeffs[i2 * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
        for (var j = 0; j < i2 * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };
      function Point(curve, x, y, isRed) {
        base.BasePoint.call(this, curve, "affine");
        if (x === null && y === null) {
          this.x = null;
          this.y = null;
          this.inf = true;
        } else {
          this.x = new bn(x, 16);
          this.y = new bn(y, 16);
          if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
          }
          if (!this.x.red)
            this.x = this.x.toRed(this.curve.red);
          if (!this.y.red)
            this.y = this.y.toRed(this.curve.red);
          this.inf = false;
        }
      }
      inherits_browser(Point, base.BasePoint);
      ShortCurve.prototype.point = function point(x, y, isRed) {
        return new Point(this, x, y, isRed);
      };
      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
        return Point.fromJSON(this, obj, red);
      };
      Point.prototype._getBeta = function _getBeta() {
        if (!this.curve.endo)
          return;
        var pre = this.precomputed;
        if (pre && pre.beta)
          return pre.beta;
        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (pre) {
          var curve = this.curve;
          var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
          };
          pre.beta = beta;
          beta.precomputed = {
            beta: null,
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(endoMul)
            }
          };
        }
        return beta;
      };
      Point.prototype.toJSON = function toJSON() {
        if (!this.precomputed)
          return [this.x, this.y];
        return [this.x, this.y, this.precomputed && {
          doubles: this.precomputed.doubles && {
            step: this.precomputed.doubles.step,
            points: this.precomputed.doubles.points.slice(1)
          },
          naf: this.precomputed.naf && {
            wnd: this.precomputed.naf.wnd,
            points: this.precomputed.naf.points.slice(1)
          }
        }];
      };
      Point.fromJSON = function fromJSON(curve, obj, red) {
        if (typeof obj === "string")
          obj = JSON.parse(obj);
        var res = curve.point(obj[0], obj[1], red);
        if (!obj[2])
          return res;
        function obj2point(obj2) {
          return curve.point(obj2[0], obj2[1], red);
        }
        var pre = obj[2];
        res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point))
          },
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point))
          }
        };
        return res;
      };
      Point.prototype.inspect = function inspect2() {
        if (this.isInfinity())
          return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
      };
      Point.prototype.isInfinity = function isInfinity() {
        return this.inf;
      };
      Point.prototype.add = function add(p) {
        if (this.inf)
          return p;
        if (p.inf)
          return this;
        if (this.eq(p))
          return this.dbl();
        if (this.neg().eq(p))
          return this.curve.point(null, null);
        if (this.x.cmp(p.x) === 0)
          return this.curve.point(null, null);
        var c = this.y.redSub(p.y);
        if (c.cmpn(0) !== 0)
          c = c.redMul(this.x.redSub(p.x).redInvm());
        var nx = c.redSqr().redISub(this.x).redISub(p.x);
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.dbl = function dbl() {
        if (this.inf)
          return this;
        var ys1 = this.y.redAdd(this.y);
        if (ys1.cmpn(0) === 0)
          return this.curve.point(null, null);
        var a = this.curve.a;
        var x2 = this.x.redSqr();
        var dyinv = ys1.redInvm();
        var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
        var nx = c.redSqr().redISub(this.x.redAdd(this.x));
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };
      Point.prototype.getX = function getX() {
        return this.x.fromRed();
      };
      Point.prototype.getY = function getY() {
        return this.y.fromRed();
      };
      Point.prototype.mul = function mul(k) {
        k = new bn(k, 16);
        if (this.isInfinity())
          return this;
        else if (this._hasDoubles(k))
          return this.curve._fixedNafMul(this, k);
        else if (this.curve.endo)
          return this.curve._endoWnafMulAdd([this], [k]);
        else
          return this.curve._wnafMul(this, k);
      };
      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2);
      };
      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo)
          return this.curve._endoWnafMulAdd(points, coeffs, true);
        else
          return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
      };
      Point.prototype.eq = function eq(p) {
        return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
      };
      Point.prototype.neg = function neg(_precompute) {
        if (this.inf)
          return this;
        var res = this.curve.point(this.x, this.y.redNeg());
        if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function(p) {
            return p.neg();
          };
          res.precomputed = {
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(negate)
            }
          };
        }
        return res;
      };
      Point.prototype.toJ = function toJ() {
        if (this.inf)
          return this.curve.jpoint(null, null, null);
        var res = this.curve.jpoint(this.x, this.y, this.curve.one);
        return res;
      };
      function JPoint(curve, x, y, z) {
        base.BasePoint.call(this, curve, "jacobian");
        if (x === null && y === null && z === null) {
          this.x = this.curve.one;
          this.y = this.curve.one;
          this.z = new bn(0);
        } else {
          this.x = new bn(x, 16);
          this.y = new bn(y, 16);
          this.z = new bn(z, 16);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
      }
      inherits_browser(JPoint, base.BasePoint);
      ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
        return new JPoint(this, x, y, z);
      };
      JPoint.prototype.toP = function toP() {
        if (this.isInfinity())
          return this.curve.point(null, null);
        var zinv = this.z.redInvm();
        var zinv2 = zinv.redSqr();
        var ax = this.x.redMul(zinv2);
        var ay = this.y.redMul(zinv2).redMul(zinv);
        return this.curve.point(ax, ay);
      };
      JPoint.prototype.neg = function neg() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      };
      JPoint.prototype.add = function add(p) {
        if (this.isInfinity())
          return p;
        if (p.isInfinity())
          return this;
        var pz2 = p.z.redSqr();
        var z2 = this.z.redSqr();
        var u1 = this.x.redMul(pz2);
        var u2 = p.x.redMul(z2);
        var s1 = this.y.redMul(pz2.redMul(p.z));
        var s2 = p.y.redMul(z2.redMul(this.z));
        var h = u1.redSub(u2);
        var r2 = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r2.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }
        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);
        var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(p.z).redMul(h);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mixedAdd = function mixedAdd(p) {
        if (this.isInfinity())
          return p.toJ();
        if (p.isInfinity())
          return this;
        var z2 = this.z.redSqr();
        var u1 = this.x;
        var u2 = p.x.redMul(z2);
        var s1 = this.y;
        var s2 = p.y.redMul(z2).redMul(this.z);
        var h = u1.redSub(u2);
        var r2 = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r2.cmpn(0) !== 0)
            return this.curve.jpoint(null, null, null);
          else
            return this.dbl();
        }
        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);
        var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(h);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.dblp = function dblp(pow) {
        if (pow === 0)
          return this;
        if (this.isInfinity())
          return this;
        if (!pow)
          return this.dbl();
        if (this.curve.zeroA || this.curve.threeA) {
          var r2 = this;
          for (var i2 = 0; i2 < pow; i2++)
            r2 = r2.dbl();
          return r2;
        }
        var a = this.curve.a;
        var tinv = this.curve.tinv;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jyd = jy.redAdd(jy);
        for (var i2 = 0; i2 < pow; i2++) {
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
          var t1 = jx.redMul(jyd2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var dny = c.redMul(t2);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i2 + 1 < pow)
            jz4 = jz4.redMul(jyd4);
          jx = nx;
          jz = nz;
          jyd = dny;
        }
        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
      };
      JPoint.prototype.dbl = function dbl() {
        if (this.isInfinity())
          return this;
        if (this.curve.zeroA)
          return this._zeroDbl();
        else if (this.curve.threeA)
          return this._threeDbl();
        else
          return this._dbl();
      };
      JPoint.prototype._zeroDbl = function _zeroDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s2 = s2.redIAdd(s2);
          var m = xx.redAdd(xx).redIAdd(xx);
          var t = m.redSqr().redISub(s2).redISub(s2);
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          nx = t;
          ny = m.redMul(s2.redISub(t)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var a = this.x.redSqr();
          var b = this.y.redSqr();
          var c = b.redSqr();
          var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
          d = d.redIAdd(d);
          var e = a.redAdd(a).redIAdd(a);
          var f2 = e.redSqr();
          var c8 = c.redIAdd(c);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);
          nx = f2.redISub(d).redISub(d);
          ny = e.redMul(d.redISub(nx)).redISub(c8);
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._threeDbl = function _threeDbl() {
        var nx;
        var ny;
        var nz;
        if (this.zOne) {
          var xx = this.x.redSqr();
          var yy = this.y.redSqr();
          var yyyy = yy.redSqr();
          var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s2 = s2.redIAdd(s2);
          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          var t = m.redSqr().redISub(s2).redISub(s2);
          nx = t;
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m.redMul(s2.redISub(t)).redISub(yyyy8);
          nz = this.y.redAdd(this.y);
        } else {
          var delta = this.z.redSqr();
          var gamma = this.y.redSqr();
          var beta = this.x.redMul(gamma);
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
        }
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype._dbl = function _dbl() {
        var a = this.curve.a;
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();
        var jx2 = jx.redSqr();
        var jy2 = jy.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var jxd4 = jx.redAdd(jx);
        jxd4 = jxd4.redIAdd(jxd4);
        var t1 = jxd4.redMul(jy2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var jyd8 = jy2.redSqr();
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        var ny = c.redMul(t2).redISub(jyd8);
        var nz = jy.redAdd(jy).redMul(jz);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.trpl = function trpl() {
        if (!this.curve.zeroA)
          return this.dbl().add(this);
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var zz = this.z.redSqr();
        var yyyy = yy.redSqr();
        var m = xx.redAdd(xx).redIAdd(xx);
        var mm = m.redSqr();
        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        e = e.redIAdd(e);
        e = e.redAdd(e).redIAdd(e);
        e = e.redISub(mm);
        var ee = e.redSqr();
        var t = yyyy.redIAdd(yyyy);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
        var yyu4 = yy.redMul(u);
        yyu4 = yyu4.redIAdd(yyu4);
        yyu4 = yyu4.redIAdd(yyu4);
        var nx = this.x.redMul(ee).redISub(yyu4);
        nx = nx.redIAdd(nx);
        nx = nx.redIAdd(nx);
        var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
        return this.curve.jpoint(nx, ny, nz);
      };
      JPoint.prototype.mul = function mul(k, kbase) {
        k = new bn(k, kbase);
        return this.curve._wnafMul(this, k);
      };
      JPoint.prototype.eq = function eq(p) {
        if (p.type === "affine")
          return this.eq(p.toJ());
        if (this === p)
          return true;
        var z2 = this.z.redSqr();
        var pz2 = p.z.redSqr();
        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
          return false;
        var z3 = z2.redMul(this.z);
        var pz3 = pz2.redMul(p.z);
        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
      };
      JPoint.prototype.eqXToP = function eqXToP(x) {
        var zs = this.z.redSqr();
        var rx = x.toRed(this.curve.red).redMul(zs);
        if (this.x.cmp(rx) === 0)
          return true;
        var xc = x.clone();
        var t = this.curve.redN.redMul(zs);
        for (; ; ) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0)
            return false;
          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0)
            return true;
        }
      };
      JPoint.prototype.inspect = function inspect2() {
        if (this.isInfinity())
          return "<EC JPoint Infinity>";
        return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
      };
      JPoint.prototype.isInfinity = function isInfinity() {
        return this.z.cmpn(0) === 0;
      };
      var mont = {};
      var edwards = {};
      var curve_1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var curve = exports3;
        curve.base = base;
        curve.short = short_1;
        curve.mont = mont;
        curve.edwards = edwards;
      });
      var secp256k1 = void 0;
      var curves_1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var curves = exports3;
        var assert2 = utils_1$1.assert;
        function PresetCurve(options) {
          if (options.type === "short")
            this.curve = new curve_1.short(options);
          else if (options.type === "edwards")
            this.curve = new curve_1.edwards(options);
          else
            this.curve = new curve_1.mont(options);
          this.g = this.curve.g;
          this.n = this.curve.n;
          this.hash = options.hash;
          assert2(this.g.validate(), "Invalid curve");
          assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        curves.PresetCurve = PresetCurve;
        function defineCurve(name2, options) {
          Object.defineProperty(curves, name2, {
            configurable: true,
            enumerable: true,
            get: function() {
              var curve = new PresetCurve(options);
              Object.defineProperty(curves, name2, {
                configurable: true,
                enumerable: true,
                value: curve
              });
              return curve;
            }
          });
        }
        defineCurve("p192", {
          type: "short",
          prime: "p192",
          p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
          b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
          n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
          hash: hash_1.sha256,
          gRed: false,
          g: [
            "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
            "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
          ]
        });
        defineCurve("p224", {
          type: "short",
          prime: "p224",
          p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
          b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
          n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
          hash: hash_1.sha256,
          gRed: false,
          g: [
            "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
            "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
          ]
        });
        defineCurve("p256", {
          type: "short",
          prime: null,
          p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
          a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
          b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
          n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
          hash: hash_1.sha256,
          gRed: false,
          g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
          ]
        });
        defineCurve("p384", {
          type: "short",
          prime: null,
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
          a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
          b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
          n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
          hash: hash_1.sha384,
          gRed: false,
          g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
          ]
        });
        defineCurve("p521", {
          type: "short",
          prime: null,
          p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
          a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
          b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
          n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
          hash: hash_1.sha512,
          gRed: false,
          g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
          ]
        });
        defineCurve("curve25519", {
          type: "mont",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "76d06",
          b: "1",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash_1.sha256,
          gRed: false,
          g: [
            "9"
          ]
        });
        defineCurve("ed25519", {
          type: "edwards",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "-1",
          c: "1",
          d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash_1.sha256,
          gRed: false,
          g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
            "6666666666666666666666666666666666666666666666666666666666666658"
          ]
        });
        var pre;
        try {
          pre = secp256k1;
        } catch (e) {
          pre = void 0;
        }
        defineCurve("secp256k1", {
          type: "short",
          prime: "k256",
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
          a: "0",
          b: "7",
          n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
          h: "1",
          hash: hash_1.sha256,
          beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
          lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
          basis: [
            {
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3"
            },
            {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15"
            }
          ],
          gRed: false,
          g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            pre
          ]
        });
      });
      "use strict";
      function HmacDRBG(options) {
        if (!(this instanceof HmacDRBG))
          return new HmacDRBG(options);
        this.hash = options.hash;
        this.predResist = !!options.predResist;
        this.outLen = this.hash.outSize;
        this.minEntropy = options.minEntropy || this.hash.hmacStrength;
        this._reseed = null;
        this.reseedInterval = null;
        this.K = null;
        this.V = null;
        var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
        var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
        var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
        minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
        this._init(entropy, nonce, pers);
      }
      var hmacDrbg = HmacDRBG;
      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
        var seed = entropy.concat(nonce).concat(pers);
        this.K = new Array(this.outLen / 8);
        this.V = new Array(this.outLen / 8);
        for (var i2 = 0; i2 < this.V.length; i2++) {
          this.K[i2] = 0;
          this.V[i2] = 1;
        }
        this._update(seed);
        this._reseed = 1;
        this.reseedInterval = 281474976710656;
      };
      HmacDRBG.prototype._hmac = function hmac2() {
        return new hash_1.hmac(this.hash, this.K);
      };
      HmacDRBG.prototype._update = function update(seed) {
        var kmac = this._hmac().update(this.V).update([0]);
        if (seed)
          kmac = kmac.update(seed);
        this.K = kmac.digest();
        this.V = this._hmac().update(this.V).digest();
        if (!seed)
          return;
        this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
        this.V = this._hmac().update(this.V).digest();
      };
      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
        if (typeof entropyEnc !== "string") {
          addEnc = add;
          add = entropyEnc;
          entropyEnc = null;
        }
        entropy = utils_1.toArray(entropy, entropyEnc);
        add = utils_1.toArray(add, addEnc);
        minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
        this._update(entropy.concat(add || []));
        this._reseed = 1;
      };
      HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
        if (this._reseed > this.reseedInterval)
          throw new Error("Reseed is required");
        if (typeof enc !== "string") {
          addEnc = add;
          add = enc;
          enc = null;
        }
        if (add) {
          add = utils_1.toArray(add, addEnc || "hex");
          this._update(add);
        }
        var temp = [];
        while (temp.length < len) {
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
        }
        var res = temp.slice(0, len);
        this._update(add);
        this._reseed++;
        return utils_1.encode(res, enc);
      };
      "use strict";
      var assert$3 = utils_1$1.assert;
      function KeyPair(ec2, options) {
        this.ec = ec2;
        this.priv = null;
        this.pub = null;
        if (options.priv)
          this._importPrivate(options.priv, options.privEnc);
        if (options.pub)
          this._importPublic(options.pub, options.pubEnc);
      }
      var key = KeyPair;
      KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
        if (pub instanceof KeyPair)
          return pub;
        return new KeyPair(ec2, {
          pub,
          pubEnc: enc
        });
      };
      KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
        if (priv instanceof KeyPair)
          return priv;
        return new KeyPair(ec2, {
          priv,
          privEnc: enc
        });
      };
      KeyPair.prototype.validate = function validate() {
        var pub = this.getPublic();
        if (pub.isInfinity())
          return {result: false, reason: "Invalid public key"};
        if (!pub.validate())
          return {result: false, reason: "Public key is not a point"};
        if (!pub.mul(this.ec.curve.n).isInfinity())
          return {result: false, reason: "Public key * N != O"};
        return {result: true, reason: null};
      };
      KeyPair.prototype.getPublic = function getPublic(compact, enc) {
        if (typeof compact === "string") {
          enc = compact;
          compact = null;
        }
        if (!this.pub)
          this.pub = this.ec.g.mul(this.priv);
        if (!enc)
          return this.pub;
        return this.pub.encode(enc, compact);
      };
      KeyPair.prototype.getPrivate = function getPrivate(enc) {
        if (enc === "hex")
          return this.priv.toString(16, 2);
        else
          return this.priv;
      };
      KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
        this.priv = new bn(key2, enc || 16);
        this.priv = this.priv.umod(this.ec.curve.n);
      };
      KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
        if (key2.x || key2.y) {
          if (this.ec.curve.type === "mont") {
            assert$3(key2.x, "Need x coordinate");
          } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
            assert$3(key2.x && key2.y, "Need both x and y coordinate");
          }
          this.pub = this.ec.curve.point(key2.x, key2.y);
          return;
        }
        this.pub = this.ec.curve.decodePoint(key2, enc);
      };
      KeyPair.prototype.derive = function derive(pub) {
        return pub.mul(this.priv).getX();
      };
      KeyPair.prototype.sign = function sign(msg, enc, options) {
        return this.ec.sign(msg, this, enc, options);
      };
      KeyPair.prototype.verify = function verify(msg, signature2) {
        return this.ec.verify(msg, signature2, this);
      };
      KeyPair.prototype.inspect = function inspect2() {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
      };
      "use strict";
      var assert$4 = utils_1$1.assert;
      function Signature(options, enc) {
        if (options instanceof Signature)
          return options;
        if (this._importDER(options, enc))
          return;
        assert$4(options.r && options.s, "Signature without r or s");
        this.r = new bn(options.r, 16);
        this.s = new bn(options.s, 16);
        if (options.recoveryParam === void 0)
          this.recoveryParam = null;
        else
          this.recoveryParam = options.recoveryParam;
      }
      var signature = Signature;
      function Position() {
        this.place = 0;
      }
      function getLength(buf, p) {
        var initial = buf[p.place++];
        if (!(initial & 128)) {
          return initial;
        }
        var octetLen = initial & 15;
        if (octetLen === 0 || octetLen > 4) {
          return false;
        }
        var val = 0;
        for (var i2 = 0, off = p.place; i2 < octetLen; i2++, off++) {
          val <<= 8;
          val |= buf[off];
          val >>>= 0;
        }
        if (val <= 127) {
          return false;
        }
        p.place = off;
        return val;
      }
      function rmPadding(buf) {
        var i2 = 0;
        var len = buf.length - 1;
        while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len) {
          i2++;
        }
        if (i2 === 0) {
          return buf;
        }
        return buf.slice(i2);
      }
      Signature.prototype._importDER = function _importDER(data, enc) {
        data = utils_1$1.toArray(data, enc);
        var p = new Position();
        if (data[p.place++] !== 48) {
          return false;
        }
        var len = getLength(data, p);
        if (len === false) {
          return false;
        }
        if (len + p.place !== data.length) {
          return false;
        }
        if (data[p.place++] !== 2) {
          return false;
        }
        var rlen = getLength(data, p);
        if (rlen === false) {
          return false;
        }
        var r2 = data.slice(p.place, rlen + p.place);
        p.place += rlen;
        if (data[p.place++] !== 2) {
          return false;
        }
        var slen = getLength(data, p);
        if (slen === false) {
          return false;
        }
        if (data.length !== slen + p.place) {
          return false;
        }
        var s2 = data.slice(p.place, slen + p.place);
        if (r2[0] === 0) {
          if (r2[1] & 128) {
            r2 = r2.slice(1);
          } else {
            return false;
          }
        }
        if (s2[0] === 0) {
          if (s2[1] & 128) {
            s2 = s2.slice(1);
          } else {
            return false;
          }
        }
        this.r = new bn(r2);
        this.s = new bn(s2);
        this.recoveryParam = null;
        return true;
      };
      function constructLength(arr, len) {
        if (len < 128) {
          arr.push(len);
          return;
        }
        var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
        arr.push(octets | 128);
        while (--octets) {
          arr.push(len >>> (octets << 3) & 255);
        }
        arr.push(len);
      }
      Signature.prototype.toDER = function toDER(enc) {
        var r2 = this.r.toArray();
        var s2 = this.s.toArray();
        if (r2[0] & 128)
          r2 = [0].concat(r2);
        if (s2[0] & 128)
          s2 = [0].concat(s2);
        r2 = rmPadding(r2);
        s2 = rmPadding(s2);
        while (!s2[0] && !(s2[1] & 128)) {
          s2 = s2.slice(1);
        }
        var arr = [2];
        constructLength(arr, r2.length);
        arr = arr.concat(r2);
        arr.push(2);
        constructLength(arr, s2.length);
        var backHalf = arr.concat(s2);
        var res = [48];
        constructLength(res, backHalf.length);
        res = res.concat(backHalf);
        return utils_1$1.encode(res, enc);
      };
      "use strict";
      var assert$5 = utils_1$1.assert;
      function EC(options) {
        if (!(this instanceof EC))
          return new EC(options);
        if (typeof options === "string") {
          assert$5(curves_1.hasOwnProperty(options), "Unknown curve " + options);
          options = curves_1[options];
        }
        if (options instanceof curves_1.PresetCurve)
          options = {curve: options};
        this.curve = options.curve.curve;
        this.n = this.curve.n;
        this.nh = this.n.ushrn(1);
        this.g = this.curve.g;
        this.g = options.curve.g;
        this.g.precompute(options.curve.n.bitLength() + 1);
        this.hash = options.hash || options.curve.hash;
      }
      var ec = EC;
      EC.prototype.keyPair = function keyPair(options) {
        return new key(this, options);
      };
      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
        return key.fromPrivate(this, priv, enc);
      };
      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
        return key.fromPublic(this, pub, enc);
      };
      EC.prototype.genKeyPair = function genKeyPair(options) {
        if (!options)
          options = {};
        var drbg = new hmacDrbg({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
          entropy: options.entropy || brorand(this.hash.hmacStrength),
          entropyEnc: options.entropy && options.entropyEnc || "utf8",
          nonce: this.n.toArray()
        });
        var bytes2 = this.n.byteLength();
        var ns2 = this.n.sub(new bn(2));
        do {
          var priv = new bn(drbg.generate(bytes2));
          if (priv.cmp(ns2) > 0)
            continue;
          priv.iaddn(1);
          return this.keyFromPrivate(priv);
        } while (true);
      };
      EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
        var delta = msg.byteLength() * 8 - this.n.bitLength();
        if (delta > 0)
          msg = msg.ushrn(delta);
        if (!truncOnly && msg.cmp(this.n) >= 0)
          return msg.sub(this.n);
        else
          return msg;
      };
      EC.prototype.sign = function sign(msg, key2, enc, options) {
        if (typeof enc === "object") {
          options = enc;
          enc = null;
        }
        if (!options)
          options = {};
        key2 = this.keyFromPrivate(key2, enc);
        msg = this._truncateToN(new bn(msg, 16));
        var bytes2 = this.n.byteLength();
        var bkey = key2.getPrivate().toArray("be", bytes2);
        var nonce = msg.toArray("be", bytes2);
        var drbg = new hmacDrbg({
          hash: this.hash,
          entropy: bkey,
          nonce,
          pers: options.pers,
          persEnc: options.persEnc || "utf8"
        });
        var ns1 = this.n.sub(new bn(1));
        for (var iter = 0; true; iter++) {
          var k = options.k ? options.k(iter) : new bn(drbg.generate(this.n.byteLength()));
          k = this._truncateToN(k, true);
          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
            continue;
          var kp = this.g.mul(k);
          if (kp.isInfinity())
            continue;
          var kpX = kp.getX();
          var r2 = kpX.umod(this.n);
          if (r2.cmpn(0) === 0)
            continue;
          var s2 = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
          s2 = s2.umod(this.n);
          if (s2.cmpn(0) === 0)
            continue;
          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
          if (options.canonical && s2.cmp(this.nh) > 0) {
            s2 = this.n.sub(s2);
            recoveryParam ^= 1;
          }
          return new signature({r: r2, s: s2, recoveryParam});
        }
      };
      EC.prototype.verify = function verify(msg, signature$1, key2, enc) {
        msg = this._truncateToN(new bn(msg, 16));
        key2 = this.keyFromPublic(key2, enc);
        signature$1 = new signature(signature$1, "hex");
        var r2 = signature$1.r;
        var s2 = signature$1.s;
        if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
          return false;
        if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
          return false;
        var sinv = s2.invm(this.n);
        var u1 = sinv.mul(msg).umod(this.n);
        var u2 = sinv.mul(r2).umod(this.n);
        if (!this.curve._maxwellTrick) {
          var p = this.g.mulAdd(u1, key2.getPublic(), u2);
          if (p.isInfinity())
            return false;
          return p.getX().umod(this.n).cmp(r2) === 0;
        }
        var p = this.g.jmulAdd(u1, key2.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.eqXToP(r2);
      };
      EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
        assert$5((3 & j) === j, "The recovery param is more than two bits");
        signature$1 = new signature(signature$1, enc);
        var n = this.n;
        var e = new bn(msg);
        var r2 = signature$1.r;
        var s2 = signature$1.s;
        var isYOdd = j & 1;
        var isSecondKey = j >> 1;
        if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
          throw new Error("Unable to find sencond key candinate");
        if (isSecondKey)
          r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
        else
          r2 = this.curve.pointFromX(r2, isYOdd);
        var rInv = signature$1.r.invm(n);
        var s1 = n.sub(e).mul(rInv).umod(n);
        var s22 = s2.mul(rInv).umod(n);
        return this.g.mulAdd(s1, r2, s22);
      };
      EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
        signature$1 = new signature(signature$1, enc);
        if (signature$1.recoveryParam !== null)
          return signature$1.recoveryParam;
        for (var i2 = 0; i2 < 4; i2++) {
          var Qprime;
          try {
            Qprime = this.recoverPubKey(e, signature$1, i2);
          } catch (e2) {
            continue;
          }
          if (Qprime.eq(Q))
            return i2;
        }
        throw new Error("Unable to find valid recovery factor");
      };
      var eddsa = {};
      var require$$0$1 = getCjsExportFromNamespace(_package$1);
      var elliptic_1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var elliptic = exports3;
        elliptic.version = require$$0$1.version;
        elliptic.utils = utils_1$1;
        elliptic.rand = brorand;
        elliptic.curve = curve_1;
        elliptic.curves = curves_1;
        elliptic.ec = ec;
        elliptic.eddsa = eddsa;
      });
      var elliptic_2 = elliptic_1.ec;
      var _version$q = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "signing-key/5.0.2";
      });
      var _version$r = unwrapExports(_version$q);
      var _version_1$d = _version$q.version;
      var lib$f = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$q.version);
        var _curve = null;
        function getCurve() {
          if (!_curve) {
            _curve = new elliptic_1.ec("secp256k1");
          }
          return _curve;
        }
        var SigningKey = function() {
          function SigningKey2(privateKey) {
            lib$3.defineReadOnly(this, "curve", "secp256k1");
            lib$3.defineReadOnly(this, "privateKey", lib$1.hexlify(privateKey));
            var keyPair = getCurve().keyFromPrivate(lib$1.arrayify(this.privateKey));
            lib$3.defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            lib$3.defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            lib$3.defineReadOnly(this, "_isSigningKey", true);
          }
          SigningKey2.prototype._addPoint = function(other) {
            var p0 = getCurve().keyFromPublic(lib$1.arrayify(this.publicKey));
            var p1 = getCurve().keyFromPublic(lib$1.arrayify(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
          };
          SigningKey2.prototype.signDigest = function(digest) {
            var keyPair = getCurve().keyFromPrivate(lib$1.arrayify(this.privateKey));
            var signature2 = keyPair.sign(lib$1.arrayify(digest), {canonical: true});
            return lib$1.splitSignature({
              recoveryParam: signature2.recoveryParam,
              r: lib$1.hexZeroPad("0x" + signature2.r.toString(16), 32),
              s: lib$1.hexZeroPad("0x" + signature2.s.toString(16), 32)
            });
          };
          SigningKey2.prototype.computeSharedSecret = function(otherKey) {
            var keyPair = getCurve().keyFromPrivate(lib$1.arrayify(this.privateKey));
            var otherKeyPair = getCurve().keyFromPublic(lib$1.arrayify(computePublicKey(otherKey)));
            return lib$1.hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
          };
          SigningKey2.isSigningKey = function(value) {
            return !!(value && value._isSigningKey);
          };
          return SigningKey2;
        }();
        exports3.SigningKey = SigningKey;
        function recoverPublicKey(digest, signature2) {
          var sig = lib$1.splitSignature(signature2);
          var rs = {r: lib$1.arrayify(sig.r), s: lib$1.arrayify(sig.s)};
          return "0x" + getCurve().recoverPubKey(lib$1.arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
        }
        exports3.recoverPublicKey = recoverPublicKey;
        function computePublicKey(key2, compressed) {
          var bytes2 = lib$1.arrayify(key2);
          if (bytes2.length === 32) {
            var signingKey = new SigningKey(bytes2);
            if (compressed) {
              return "0x" + getCurve().keyFromPrivate(bytes2).getPublic(true, "hex");
            }
            return signingKey.publicKey;
          } else if (bytes2.length === 33) {
            if (compressed) {
              return lib$1.hexlify(bytes2);
            }
            return "0x" + getCurve().keyFromPublic(bytes2).getPublic(false, "hex");
          } else if (bytes2.length === 65) {
            if (!compressed) {
              return lib$1.hexlify(bytes2);
            }
            return "0x" + getCurve().keyFromPublic(bytes2).getPublic(true, "hex");
          }
          return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
        }
        exports3.computePublicKey = computePublicKey;
      });
      var index$f = unwrapExports(lib$f);
      var lib_1$f = lib$f.SigningKey;
      var lib_2$e = lib$f.recoverPublicKey;
      var lib_3$b = lib$f.computePublicKey;
      var _version$s = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "transactions/5.0.1";
      });
      var _version$t = unwrapExports(_version$s);
      var _version_1$e = _version$s.version;
      var lib$g = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var RLP = __importStar(lib$5);
        var logger = new lib.Logger(_version$s.version);
        function handleAddress(value) {
          if (value === "0x") {
            return null;
          }
          return lib$6.getAddress(value);
        }
        function handleNumber(value) {
          if (value === "0x") {
            return lib$7.Zero;
          }
          return lib$2.BigNumber.from(value);
        }
        var transactionFields = [
          {name: "nonce", maxLength: 32, numeric: true},
          {name: "gasPrice", maxLength: 32, numeric: true},
          {name: "gasLimit", maxLength: 32, numeric: true},
          {name: "to", length: 20},
          {name: "value", maxLength: 32, numeric: true},
          {name: "data"}
        ];
        var allowedTransactionKeys = {
          chainId: true,
          data: true,
          gasLimit: true,
          gasPrice: true,
          nonce: true,
          to: true,
          value: true
        };
        function computeAddress(key2) {
          var publicKey = lib$f.computePublicKey(key2);
          return lib$6.getAddress(lib$1.hexDataSlice(lib$4.keccak256(lib$1.hexDataSlice(publicKey, 1)), 12));
        }
        exports3.computeAddress = computeAddress;
        function recoverAddress(digest, signature2) {
          return computeAddress(lib$f.recoverPublicKey(lib$1.arrayify(digest), signature2));
        }
        exports3.recoverAddress = recoverAddress;
        function serialize(transaction, signature2) {
          lib$3.checkProperties(transaction, allowedTransactionKeys);
          var raw = [];
          transactionFields.forEach(function(fieldInfo) {
            var value = transaction[fieldInfo.name] || [];
            var options = {};
            if (fieldInfo.numeric) {
              options.hexPad = "left";
            }
            value = lib$1.arrayify(lib$1.hexlify(value, options));
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
              logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
            }
            if (fieldInfo.maxLength) {
              value = lib$1.stripZeros(value);
              if (value.length > fieldInfo.maxLength) {
                logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
              }
            }
            raw.push(lib$1.hexlify(value));
          });
          var chainId = 0;
          if (transaction.chainId != null) {
            chainId = transaction.chainId;
            if (typeof chainId !== "number") {
              logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
          } else if (signature2 && !lib$1.isBytesLike(signature2) && signature2.v > 28) {
            chainId = Math.floor((signature2.v - 35) / 2);
          }
          if (chainId !== 0) {
            raw.push(lib$1.hexlify(chainId));
            raw.push("0x");
            raw.push("0x");
          }
          if (!signature2) {
            return RLP.encode(raw);
          }
          var sig = lib$1.splitSignature(signature2);
          var v = 27 + sig.recoveryParam;
          if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            if (sig.v > 28 && sig.v !== v) {
              logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
            }
          } else if (sig.v !== v) {
            logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
          }
          raw.push(lib$1.hexlify(v));
          raw.push(lib$1.stripZeros(lib$1.arrayify(sig.r)));
          raw.push(lib$1.stripZeros(lib$1.arrayify(sig.s)));
          return RLP.encode(raw);
        }
        exports3.serialize = serialize;
        function parse2(rawTransaction) {
          var transaction = RLP.decode(rawTransaction);
          if (transaction.length !== 9 && transaction.length !== 6) {
            logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
          }
          var tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
          };
          if (transaction.length === 6) {
            return tx;
          }
          try {
            tx.v = lib$2.BigNumber.from(transaction[6]).toNumber();
          } catch (error) {
            console.log(error);
            return tx;
          }
          tx.r = lib$1.hexZeroPad(transaction[7], 32);
          tx.s = lib$1.hexZeroPad(transaction[8], 32);
          if (lib$2.BigNumber.from(tx.r).isZero() && lib$2.BigNumber.from(tx.s).isZero()) {
            tx.chainId = tx.v;
            tx.v = 0;
          } else {
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
              tx.chainId = 0;
            }
            var recoveryParam = tx.v - 27;
            var raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
              raw.push(lib$1.hexlify(tx.chainId));
              raw.push("0x");
              raw.push("0x");
              recoveryParam -= tx.chainId * 2 + 8;
            }
            var digest = lib$4.keccak256(RLP.encode(raw));
            try {
              tx.from = recoverAddress(digest, {r: lib$1.hexlify(tx.r), s: lib$1.hexlify(tx.s), recoveryParam});
            } catch (error) {
              console.log(error);
            }
            tx.hash = lib$4.keccak256(rawTransaction);
          }
          return tx;
        }
        exports3.parse = parse2;
      });
      var index$g = unwrapExports(lib$g);
      var lib_1$g = lib$g.computeAddress;
      var lib_2$f = lib$g.recoverAddress;
      var lib_3$c = lib$g.serialize;
      var lib_4$9 = lib$g.parse;
      var _version$u = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "wordlists/5.0.1";
      });
      var _version$v = unwrapExports(_version$u);
      var _version_1$f = _version$u.version;
      var wordlist = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var exportWordlist = false;
        exports3.logger = new lib.Logger(_version$u.version);
        var Wordlist = function() {
          function Wordlist2(locale) {
            var _newTarget = this.constructor;
            exports3.logger.checkAbstract(_newTarget, Wordlist2);
            lib$3.defineReadOnly(this, "locale", locale);
          }
          Wordlist2.prototype.split = function(mnemonic) {
            return mnemonic.toLowerCase().split(/ +/g);
          };
          Wordlist2.prototype.join = function(words) {
            return words.join(" ");
          };
          Wordlist2.check = function(wordlist2) {
            var words = [];
            for (var i2 = 0; i2 < 2048; i2++) {
              var word = wordlist2.getWord(i2);
              if (i2 !== wordlist2.getWordIndex(word)) {
                return "0x";
              }
              words.push(word);
            }
            return lib$9.id(words.join("\n") + "\n");
          };
          Wordlist2.register = function(lang, name2) {
            if (!name2) {
              name2 = lang.locale;
            }
            if (exportWordlist) {
              try {
                var anyGlobal = window;
                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
                  if (!anyGlobal._ethers.wordlists[name2]) {
                    lib$3.defineReadOnly(anyGlobal._ethers.wordlists, name2, lang);
                  }
                }
              } catch (error) {
              }
            }
          };
          return Wordlist2;
        }();
        exports3.Wordlist = Wordlist;
      });
      var wordlist$1 = unwrapExports(wordlist);
      var wordlist_1 = wordlist.logger;
      var wordlist_2 = wordlist.Wordlist;
      var langEn_1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
        var wordlist$12 = null;
        function loadWords(lang) {
          if (wordlist$12 != null) {
            return;
          }
          wordlist$12 = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
          if (wordlist.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            wordlist$12 = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
          }
        }
        var LangEn = function(_super) {
          __extends(LangEn2, _super);
          function LangEn2() {
            return _super.call(this, "en") || this;
          }
          LangEn2.prototype.getWord = function(index2) {
            loadWords(this);
            return wordlist$12[index2];
          };
          LangEn2.prototype.getWordIndex = function(word) {
            loadWords(this);
            return wordlist$12.indexOf(word);
          };
          return LangEn2;
        }(wordlist.Wordlist);
        var langEn2 = new LangEn();
        exports3.langEn = langEn2;
        wordlist.Wordlist.register(langEn2);
      });
      var langEn = unwrapExports(langEn_1);
      var langEn_2 = langEn_1.langEn;
      var browser$4 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.Wordlist = wordlist.Wordlist;
        var wordlists = {en: langEn_1.langEn};
        exports3.wordlists = wordlists;
      });
      var browser$5 = unwrapExports(browser$4);
      var browser_1$2 = browser$4.Wordlist;
      var browser_2$1 = browser$4.wordlists;
      var _version$w = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "hdnode/5.0.1";
      });
      var _version$x = unwrapExports(_version$w);
      var _version_1$g = _version$w.version;
      var lib$h = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$w.version);
        var N = lib$2.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
        var MasterSecret = lib$8.toUtf8Bytes("Bitcoin seed");
        var HardenedBit = 2147483648;
        function getUpperMask(bits) {
          return (1 << bits) - 1 << 8 - bits;
        }
        function getLowerMask(bits) {
          return (1 << bits) - 1;
        }
        function bytes322(value) {
          return lib$1.hexZeroPad(lib$1.hexlify(value), 32);
        }
        function base58check(data) {
          return lib$e.Base58.encode(lib$1.concat([data, lib$1.hexDataSlice(browser.sha256(browser.sha256(data)), 0, 4)]));
        }
        function getWordlist(wordlist2) {
          if (wordlist2 == null) {
            return browser$4.wordlists["en"];
          }
          if (typeof wordlist2 === "string") {
            var words = browser$4.wordlists[wordlist2];
            if (words == null) {
              logger.throwArgumentError("unknown locale", "wordlist", wordlist2);
            }
            return words;
          }
          return wordlist2;
        }
        var _constructorGuard = {};
        exports3.defaultPath = "m/44'/60'/0'/0/0";
        ;
        var HDNode = function() {
          function HDNode2(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index2, depth, mnemonicOrPath) {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, HDNode2);
            if (constructorGuard !== _constructorGuard) {
              throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
              var signingKey = new lib$f.SigningKey(privateKey);
              lib$3.defineReadOnly(this, "privateKey", signingKey.privateKey);
              lib$3.defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
            } else {
              lib$3.defineReadOnly(this, "privateKey", null);
              lib$3.defineReadOnly(this, "publicKey", lib$1.hexlify(publicKey));
            }
            lib$3.defineReadOnly(this, "parentFingerprint", parentFingerprint);
            lib$3.defineReadOnly(this, "fingerprint", lib$1.hexDataSlice(browser.ripemd160(browser.sha256(this.publicKey)), 0, 4));
            lib$3.defineReadOnly(this, "address", lib$g.computeAddress(this.publicKey));
            lib$3.defineReadOnly(this, "chainCode", chainCode);
            lib$3.defineReadOnly(this, "index", index2);
            lib$3.defineReadOnly(this, "depth", depth);
            if (mnemonicOrPath == null) {
              lib$3.defineReadOnly(this, "mnemonic", null);
              lib$3.defineReadOnly(this, "path", null);
            } else if (typeof mnemonicOrPath === "string") {
              lib$3.defineReadOnly(this, "mnemonic", null);
              lib$3.defineReadOnly(this, "path", mnemonicOrPath);
            } else {
              lib$3.defineReadOnly(this, "mnemonic", mnemonicOrPath);
              lib$3.defineReadOnly(this, "path", mnemonicOrPath.path);
            }
          }
          Object.defineProperty(HDNode2.prototype, "extendedKey", {
            get: function() {
              if (this.depth >= 256) {
                throw new Error("Depth too large!");
              }
              return base58check(lib$1.concat([
                this.privateKey != null ? "0x0488ADE4" : "0x0488B21E",
                lib$1.hexlify(this.depth),
                this.parentFingerprint,
                lib$1.hexZeroPad(lib$1.hexlify(this.index), 4),
                this.chainCode,
                this.privateKey != null ? lib$1.concat(["0x00", this.privateKey]) : this.publicKey
              ]));
            },
            enumerable: true,
            configurable: true
          });
          HDNode2.prototype.neuter = function() {
            return new HDNode2(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
          };
          HDNode2.prototype._derive = function(index2) {
            if (index2 > 4294967295) {
              throw new Error("invalid index - " + String(index2));
            }
            var path = this.path;
            if (path) {
              path += "/" + (index2 & ~HardenedBit);
            }
            var data = new Uint8Array(37);
            if (index2 & HardenedBit) {
              if (!this.privateKey) {
                throw new Error("cannot derive child of neutered node");
              }
              data.set(lib$1.arrayify(this.privateKey), 1);
              if (path) {
                path += "'";
              }
            } else {
              data.set(lib$1.arrayify(this.publicKey));
            }
            for (var i2 = 24; i2 >= 0; i2 -= 8) {
              data[33 + (i2 >> 3)] = index2 >> 24 - i2 & 255;
            }
            var I = lib$1.arrayify(browser.computeHmac(browser.SupportedAlgorithm.sha512, this.chainCode, data));
            var IL = I.slice(0, 32);
            var IR = I.slice(32);
            var ki = null;
            var Ki = null;
            if (this.privateKey) {
              ki = bytes322(lib$2.BigNumber.from(IL).add(this.privateKey).mod(N));
            } else {
              var ek = new lib$f.SigningKey(lib$1.hexlify(IL));
              Ki = ek._addPoint(this.publicKey);
            }
            var mnemonicOrPath = path;
            var srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
              mnemonicOrPath = Object.freeze({
                phrase: srcMnemonic.phrase,
                path,
                locale: srcMnemonic.locale || "en"
              });
            }
            return new HDNode2(_constructorGuard, ki, Ki, this.fingerprint, bytes322(IR), index2, this.depth + 1, mnemonicOrPath);
          };
          HDNode2.prototype.derivePath = function(path) {
            var components = path.split("/");
            if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
              throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
              components.shift();
            }
            var result = this;
            for (var i2 = 0; i2 < components.length; i2++) {
              var component = components[i2];
              if (component.match(/^[0-9]+'$/)) {
                var index2 = parseInt(component.substring(0, component.length - 1));
                if (index2 >= HardenedBit) {
                  throw new Error("invalid path index - " + component);
                }
                result = result._derive(HardenedBit + index2);
              } else if (component.match(/^[0-9]+$/)) {
                var index2 = parseInt(component);
                if (index2 >= HardenedBit) {
                  throw new Error("invalid path index - " + component);
                }
                result = result._derive(index2);
              } else {
                throw new Error("invalid path component - " + component);
              }
            }
            return result;
          };
          HDNode2._fromSeed = function(seed, mnemonic) {
            var seedArray = lib$1.arrayify(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
              throw new Error("invalid seed");
            }
            var I = lib$1.arrayify(browser.computeHmac(browser.SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new HDNode2(_constructorGuard, bytes322(I.slice(0, 32)), null, "0x00000000", bytes322(I.slice(32)), 0, 0, mnemonic);
          };
          HDNode2.fromMnemonic = function(mnemonic, password, wordlist2) {
            wordlist2 = getWordlist(wordlist2);
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist2), wordlist2);
            return HDNode2._fromSeed(mnemonicToSeed(mnemonic, password), {
              phrase: mnemonic,
              path: "m",
              locale: wordlist2.locale
            });
          };
          HDNode2.fromSeed = function(seed) {
            return HDNode2._fromSeed(seed, null);
          };
          HDNode2.fromExtendedKey = function(extendedKey) {
            var bytes2 = lib$e.Base58.decode(extendedKey);
            if (bytes2.length !== 82 || base58check(bytes2.slice(0, 78)) !== extendedKey) {
              logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            var depth = bytes2[4];
            var parentFingerprint = lib$1.hexlify(bytes2.slice(5, 9));
            var index2 = parseInt(lib$1.hexlify(bytes2.slice(9, 13)).substring(2), 16);
            var chainCode = lib$1.hexlify(bytes2.slice(13, 45));
            var key2 = bytes2.slice(45, 78);
            switch (lib$1.hexlify(bytes2.slice(0, 4))) {
              case "0x0488b21e":
              case "0x043587cf":
                return new HDNode2(_constructorGuard, null, lib$1.hexlify(key2), parentFingerprint, chainCode, index2, depth, null);
              case "0x0488ade4":
              case "0x04358394 ":
                if (key2[0] !== 0) {
                  break;
                }
                return new HDNode2(_constructorGuard, lib$1.hexlify(key2.slice(1)), null, parentFingerprint, chainCode, index2, depth, null);
            }
            return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
          };
          return HDNode2;
        }();
        exports3.HDNode = HDNode;
        function mnemonicToSeed(mnemonic, password) {
          if (!password) {
            password = "";
          }
          var salt = lib$8.toUtf8Bytes("mnemonic" + password, lib$8.UnicodeNormalizationForm.NFKD);
          return browser$2.pbkdf2(lib$8.toUtf8Bytes(mnemonic, lib$8.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
        }
        exports3.mnemonicToSeed = mnemonicToSeed;
        function mnemonicToEntropy(mnemonic, wordlist2) {
          wordlist2 = getWordlist(wordlist2);
          logger.checkNormalize();
          var words = wordlist2.split(mnemonic);
          if (words.length % 3 !== 0) {
            throw new Error("invalid mnemonic");
          }
          var entropy = lib$1.arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
          var offset = 0;
          for (var i2 = 0; i2 < words.length; i2++) {
            var index2 = wordlist2.getWordIndex(words[i2].normalize("NFKD"));
            if (index2 === -1) {
              throw new Error("invalid mnemonic");
            }
            for (var bit = 0; bit < 11; bit++) {
              if (index2 & 1 << 10 - bit) {
                entropy[offset >> 3] |= 1 << 7 - offset % 8;
              }
              offset++;
            }
          }
          var entropyBits = 32 * words.length / 3;
          var checksumBits = words.length / 3;
          var checksumMask = getUpperMask(checksumBits);
          var checksum = lib$1.arrayify(browser.sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
          if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
          }
          return lib$1.hexlify(entropy.slice(0, entropyBits / 8));
        }
        exports3.mnemonicToEntropy = mnemonicToEntropy;
        function entropyToMnemonic(entropy, wordlist2) {
          wordlist2 = getWordlist(wordlist2);
          entropy = lib$1.arrayify(entropy);
          if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
          }
          var indices = [0];
          var remainingBits = 11;
          for (var i2 = 0; i2 < entropy.length; i2++) {
            if (remainingBits > 8) {
              indices[indices.length - 1] <<= 8;
              indices[indices.length - 1] |= entropy[i2];
              remainingBits -= 8;
            } else {
              indices[indices.length - 1] <<= remainingBits;
              indices[indices.length - 1] |= entropy[i2] >> 8 - remainingBits;
              indices.push(entropy[i2] & getLowerMask(8 - remainingBits));
              remainingBits += 3;
            }
          }
          var checksumBits = entropy.length / 4;
          var checksum = lib$1.arrayify(browser.sha256(entropy))[0] & getUpperMask(checksumBits);
          indices[indices.length - 1] <<= checksumBits;
          indices[indices.length - 1] |= checksum >> 8 - checksumBits;
          return wordlist2.join(indices.map(function(index2) {
            return wordlist2.getWord(index2);
          }));
        }
        exports3.entropyToMnemonic = entropyToMnemonic;
        function isValidMnemonic(mnemonic, wordlist2) {
          try {
            mnemonicToEntropy(mnemonic, wordlist2);
            return true;
          } catch (error) {
          }
          return false;
        }
        exports3.isValidMnemonic = isValidMnemonic;
      });
      var index$h = unwrapExports(lib$h);
      var lib_1$h = lib$h.defaultPath;
      var lib_2$g = lib$h.HDNode;
      var lib_3$d = lib$h.mnemonicToSeed;
      var lib_4$a = lib$h.mnemonicToEntropy;
      var lib_5$9 = lib$h.entropyToMnemonic;
      var lib_6$5 = lib$h.isValidMnemonic;
      var _version$y = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "random/5.0.1";
      });
      var _version$z = unwrapExports(_version$y);
      var _version_1$h = _version$y.version;
      var shuffle = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        function shuffled(array2) {
          array2 = array2.slice();
          for (var i2 = array2.length - 1; i2 > 0; i2--) {
            var j = Math.floor(Math.random() * (i2 + 1));
            var tmp = array2[i2];
            array2[i2] = array2[j];
            array2[j] = tmp;
          }
          return array2;
        }
        exports3.shuffled = shuffled;
      });
      var shuffle$1 = unwrapExports(shuffle);
      var shuffle_1 = shuffle.shuffled;
      var browser$6 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$y.version);
        exports3.shuffled = shuffle.shuffled;
        var anyGlobal = null;
        try {
          anyGlobal = window;
          if (anyGlobal == null) {
            throw new Error("try next");
          }
        } catch (error) {
          try {
            anyGlobal = commonjsGlobal;
            if (anyGlobal == null) {
              throw new Error("try next");
            }
          } catch (error2) {
            anyGlobal = {};
          }
        }
        var crypto2 = anyGlobal.crypto || anyGlobal.msCrypto;
        if (!crypto2 || !crypto2.getRandomValues) {
          logger.warn("WARNING: Missing strong random number source");
          crypto2 = {
            getRandomValues: function(buffer) {
              return logger.throwError("no secure random source avaialble", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "crypto.getRandomValues"
              });
            }
          };
        }
        function randomBytes(length) {
          if (length <= 0 || length > 1024 || length % 1) {
            logger.throwArgumentError("invalid length", "length", length);
          }
          var result = new Uint8Array(length);
          crypto2.getRandomValues(result);
          return lib$1.arrayify(result);
        }
        exports3.randomBytes = randomBytes;
        ;
      });
      var browser$7 = unwrapExports(browser$6);
      var browser_1$3 = browser$6.shuffled;
      var browser_2$2 = browser$6.randomBytes;
      var aesJs = createCommonjsModule(function(module2, exports3) {
        "use strict";
        (function(root) {
          function checkInt(value) {
            return parseInt(value) === value;
          }
          function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) {
              return false;
            }
            for (var i2 = 0; i2 < arrayish.length; i2++) {
              if (!checkInt(arrayish[i2]) || arrayish[i2] < 0 || arrayish[i2] > 255) {
                return false;
              }
            }
            return true;
          }
          function coerceArray(arg, copy) {
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === "Uint8Array") {
              if (copy) {
                if (arg.slice) {
                  arg = arg.slice();
                } else {
                  arg = Array.prototype.slice.call(arg);
                }
              }
              return arg;
            }
            if (Array.isArray(arg)) {
              if (!checkInts(arg)) {
                throw new Error("Array contains invalid value: " + arg);
              }
              return new Uint8Array(arg);
            }
            if (checkInt(arg.length) && checkInts(arg)) {
              return new Uint8Array(arg);
            }
            throw new Error("unsupported array-like object");
          }
          function createArray(length) {
            return new Uint8Array(length);
          }
          function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
              if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
              } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
              }
            }
            targetArray.set(sourceArray, targetStart);
          }
          var convertUtf8 = function() {
            function toBytes(text) {
              var result = [], i2 = 0;
              text = encodeURI(text);
              while (i2 < text.length) {
                var c = text.charCodeAt(i2++);
                if (c === 37) {
                  result.push(parseInt(text.substr(i2, 2), 16));
                  i2 += 2;
                } else {
                  result.push(c);
                }
              }
              return coerceArray(result);
            }
            function fromBytes(bytes2) {
              var result = [], i2 = 0;
              while (i2 < bytes2.length) {
                var c = bytes2[i2];
                if (c < 128) {
                  result.push(String.fromCharCode(c));
                  i2++;
                } else if (c > 191 && c < 224) {
                  result.push(String.fromCharCode((c & 31) << 6 | bytes2[i2 + 1] & 63));
                  i2 += 2;
                } else {
                  result.push(String.fromCharCode((c & 15) << 12 | (bytes2[i2 + 1] & 63) << 6 | bytes2[i2 + 2] & 63));
                  i2 += 3;
                }
              }
              return result.join("");
            }
            return {
              toBytes,
              fromBytes
            };
          }();
          var convertHex = function() {
            function toBytes(text) {
              var result = [];
              for (var i2 = 0; i2 < text.length; i2 += 2) {
                result.push(parseInt(text.substr(i2, 2), 16));
              }
              return result;
            }
            var Hex = "0123456789abcdef";
            function fromBytes(bytes2) {
              var result = [];
              for (var i2 = 0; i2 < bytes2.length; i2++) {
                var v = bytes2[i2];
                result.push(Hex[(v & 240) >> 4] + Hex[v & 15]);
              }
              return result.join("");
            }
            return {
              toBytes,
              fromBytes
            };
          }();
          var numberOfRounds = {16: 10, 24: 12, 32: 14};
          var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
          var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
          var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
          var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
          var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
          var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
          var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
          var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
          var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
          var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
          var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
          var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
          var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
          var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
          var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
          function convertToInt32(bytes2) {
            var result = [];
            for (var i2 = 0; i2 < bytes2.length; i2 += 4) {
              result.push(bytes2[i2] << 24 | bytes2[i2 + 1] << 16 | bytes2[i2 + 2] << 8 | bytes2[i2 + 3]);
            }
            return result;
          }
          var AES = function(key2) {
            if (!(this instanceof AES)) {
              throw Error("AES must be instanitated with `new`");
            }
            Object.defineProperty(this, "key", {
              value: coerceArray(key2, true)
            });
            this._prepare();
          };
          AES.prototype._prepare = function() {
            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
              throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
            }
            this._Ke = [];
            this._Kd = [];
            for (var i2 = 0; i2 <= rounds; i2++) {
              this._Ke.push([0, 0, 0, 0]);
              this._Kd.push([0, 0, 0, 0]);
            }
            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;
            var tk = convertToInt32(this.key);
            var index2;
            for (var i2 = 0; i2 < KC; i2++) {
              index2 = i2 >> 2;
              this._Ke[index2][i2 % 4] = tk[i2];
              this._Kd[rounds - index2][i2 % 4] = tk[i2];
            }
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
              tt = tk[KC - 1];
              tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
              rconpointer += 1;
              if (KC != 8) {
                for (var i2 = 1; i2 < KC; i2++) {
                  tk[i2] ^= tk[i2 - 1];
                }
              } else {
                for (var i2 = 1; i2 < KC / 2; i2++) {
                  tk[i2] ^= tk[i2 - 1];
                }
                tt = tk[KC / 2 - 1];
                tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
                for (var i2 = KC / 2 + 1; i2 < KC; i2++) {
                  tk[i2] ^= tk[i2 - 1];
                }
              }
              var i2 = 0, r2, c;
              while (i2 < KC && t < roundKeyCount) {
                r2 = t >> 2;
                c = t % 4;
                this._Ke[r2][c] = tk[i2];
                this._Kd[rounds - r2][c] = tk[i2++];
                t++;
              }
            }
            for (var r2 = 1; r2 < rounds; r2++) {
              for (var c = 0; c < 4; c++) {
                tt = this._Kd[r2][c];
                this._Kd[r2][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
              }
            }
          };
          AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
              throw new Error("invalid plaintext size (must be 16 bytes)");
            }
            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];
            var t = convertToInt32(plaintext);
            for (var i2 = 0; i2 < 4; i2++) {
              t[i2] ^= this._Ke[0][i2];
            }
            for (var r2 = 1; r2 < rounds; r2++) {
              for (var i2 = 0; i2 < 4; i2++) {
                a[i2] = T1[t[i2] >> 24 & 255] ^ T2[t[(i2 + 1) % 4] >> 16 & 255] ^ T3[t[(i2 + 2) % 4] >> 8 & 255] ^ T4[t[(i2 + 3) % 4] & 255] ^ this._Ke[r2][i2];
              }
              t = a.slice();
            }
            var result = createArray(16), tt;
            for (var i2 = 0; i2 < 4; i2++) {
              tt = this._Ke[rounds][i2];
              result[4 * i2] = (S[t[i2] >> 24 & 255] ^ tt >> 24) & 255;
              result[4 * i2 + 1] = (S[t[(i2 + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
              result[4 * i2 + 2] = (S[t[(i2 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
              result[4 * i2 + 3] = (S[t[(i2 + 3) % 4] & 255] ^ tt) & 255;
            }
            return result;
          };
          AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
              throw new Error("invalid ciphertext size (must be 16 bytes)");
            }
            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];
            var t = convertToInt32(ciphertext);
            for (var i2 = 0; i2 < 4; i2++) {
              t[i2] ^= this._Kd[0][i2];
            }
            for (var r2 = 1; r2 < rounds; r2++) {
              for (var i2 = 0; i2 < 4; i2++) {
                a[i2] = T5[t[i2] >> 24 & 255] ^ T6[t[(i2 + 3) % 4] >> 16 & 255] ^ T7[t[(i2 + 2) % 4] >> 8 & 255] ^ T8[t[(i2 + 1) % 4] & 255] ^ this._Kd[r2][i2];
              }
              t = a.slice();
            }
            var result = createArray(16), tt;
            for (var i2 = 0; i2 < 4; i2++) {
              tt = this._Kd[rounds][i2];
              result[4 * i2] = (Si[t[i2] >> 24 & 255] ^ tt >> 24) & 255;
              result[4 * i2 + 1] = (Si[t[(i2 + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
              result[4 * i2 + 2] = (Si[t[(i2 + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
              result[4 * i2 + 3] = (Si[t[(i2 + 1) % 4] & 255] ^ tt) & 255;
            }
            return result;
          };
          var ModeOfOperationECB = function(key2) {
            if (!(this instanceof ModeOfOperationECB)) {
              throw Error("AES must be instanitated with `new`");
            }
            this.description = "Electronic Code Block";
            this.name = "ecb";
            this._aes = new AES(key2);
          };
          ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);
            if (plaintext.length % 16 !== 0) {
              throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            }
            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);
            for (var i2 = 0; i2 < plaintext.length; i2 += 16) {
              copyArray(plaintext, block, 0, i2, i2 + 16);
              block = this._aes.encrypt(block);
              copyArray(block, ciphertext, i2);
            }
            return ciphertext;
          };
          ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);
            if (ciphertext.length % 16 !== 0) {
              throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            }
            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);
            for (var i2 = 0; i2 < ciphertext.length; i2 += 16) {
              copyArray(ciphertext, block, 0, i2, i2 + 16);
              block = this._aes.decrypt(block);
              copyArray(block, plaintext, i2);
            }
            return plaintext;
          };
          var ModeOfOperationCBC = function(key2, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
              throw Error("AES must be instanitated with `new`");
            }
            this.description = "Cipher Block Chaining";
            this.name = "cbc";
            if (!iv) {
              iv = createArray(16);
            } else if (iv.length != 16) {
              throw new Error("invalid initialation vector size (must be 16 bytes)");
            }
            this._lastCipherblock = coerceArray(iv, true);
            this._aes = new AES(key2);
          };
          ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);
            if (plaintext.length % 16 !== 0) {
              throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            }
            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);
            for (var i2 = 0; i2 < plaintext.length; i2 += 16) {
              copyArray(plaintext, block, 0, i2, i2 + 16);
              for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
              }
              this._lastCipherblock = this._aes.encrypt(block);
              copyArray(this._lastCipherblock, ciphertext, i2);
            }
            return ciphertext;
          };
          ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);
            if (ciphertext.length % 16 !== 0) {
              throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            }
            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);
            for (var i2 = 0; i2 < ciphertext.length; i2 += 16) {
              copyArray(ciphertext, block, 0, i2, i2 + 16);
              block = this._aes.decrypt(block);
              for (var j = 0; j < 16; j++) {
                plaintext[i2 + j] = block[j] ^ this._lastCipherblock[j];
              }
              copyArray(ciphertext, this._lastCipherblock, 0, i2, i2 + 16);
            }
            return plaintext;
          };
          var ModeOfOperationCFB = function(key2, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
              throw Error("AES must be instanitated with `new`");
            }
            this.description = "Cipher Feedback";
            this.name = "cfb";
            if (!iv) {
              iv = createArray(16);
            } else if (iv.length != 16) {
              throw new Error("invalid initialation vector size (must be 16 size)");
            }
            if (!segmentSize) {
              segmentSize = 1;
            }
            this.segmentSize = segmentSize;
            this._shiftRegister = coerceArray(iv, true);
            this._aes = new AES(key2);
          };
          ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if (plaintext.length % this.segmentSize != 0) {
              throw new Error("invalid plaintext size (must be segmentSize bytes)");
            }
            var encrypted = coerceArray(plaintext, true);
            var xorSegment;
            for (var i2 = 0; i2 < encrypted.length; i2 += this.segmentSize) {
              xorSegment = this._aes.encrypt(this._shiftRegister);
              for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i2 + j] ^= xorSegment[j];
              }
              copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
              copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i2, i2 + this.segmentSize);
            }
            return encrypted;
          };
          ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length % this.segmentSize != 0) {
              throw new Error("invalid ciphertext size (must be segmentSize bytes)");
            }
            var plaintext = coerceArray(ciphertext, true);
            var xorSegment;
            for (var i2 = 0; i2 < plaintext.length; i2 += this.segmentSize) {
              xorSegment = this._aes.encrypt(this._shiftRegister);
              for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i2 + j] ^= xorSegment[j];
              }
              copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
              copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i2, i2 + this.segmentSize);
            }
            return plaintext;
          };
          var ModeOfOperationOFB = function(key2, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
              throw Error("AES must be instanitated with `new`");
            }
            this.description = "Output Feedback";
            this.name = "ofb";
            if (!iv) {
              iv = createArray(16);
            } else if (iv.length != 16) {
              throw new Error("invalid initialation vector size (must be 16 bytes)");
            }
            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;
            this._aes = new AES(key2);
          };
          ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);
            for (var i2 = 0; i2 < encrypted.length; i2++) {
              if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
              }
              encrypted[i2] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }
            return encrypted;
          };
          ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;
          var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
              throw Error("Counter must be instanitated with `new`");
            }
            if (initialValue !== 0 && !initialValue) {
              initialValue = 1;
            }
            if (typeof initialValue === "number") {
              this._counter = createArray(16);
              this.setValue(initialValue);
            } else {
              this.setBytes(initialValue);
            }
          };
          Counter.prototype.setValue = function(value) {
            if (typeof value !== "number" || parseInt(value) != value) {
              throw new Error("invalid counter value (must be an integer)");
            }
            for (var index2 = 15; index2 >= 0; --index2) {
              this._counter[index2] = value % 256;
              value = value >> 8;
            }
          };
          Counter.prototype.setBytes = function(bytes2) {
            bytes2 = coerceArray(bytes2, true);
            if (bytes2.length != 16) {
              throw new Error("invalid counter bytes size (must be 16 bytes)");
            }
            this._counter = bytes2;
          };
          Counter.prototype.increment = function() {
            for (var i2 = 15; i2 >= 0; i2--) {
              if (this._counter[i2] === 255) {
                this._counter[i2] = 0;
              } else {
                this._counter[i2]++;
                break;
              }
            }
          };
          var ModeOfOperationCTR = function(key2, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
              throw Error("AES must be instanitated with `new`");
            }
            this.description = "Counter";
            this.name = "ctr";
            if (!(counter instanceof Counter)) {
              counter = new Counter(counter);
            }
            this._counter = counter;
            this._remainingCounter = null;
            this._remainingCounterIndex = 16;
            this._aes = new AES(key2);
          };
          ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);
            for (var i2 = 0; i2 < encrypted.length; i2++) {
              if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
              }
              encrypted[i2] ^= this._remainingCounter[this._remainingCounterIndex++];
            }
            return encrypted;
          };
          ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;
          function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - data.length % 16;
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i2 = data.length; i2 < result.length; i2++) {
              result[i2] = padder;
            }
            return result;
          }
          function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) {
              throw new Error("PKCS#7 invalid length");
            }
            var padder = data[data.length - 1];
            if (padder > 16) {
              throw new Error("PKCS#7 padding byte out of range");
            }
            var length = data.length - padder;
            for (var i2 = 0; i2 < padder; i2++) {
              if (data[length + i2] !== padder) {
                throw new Error("PKCS#7 invalid padding byte");
              }
            }
            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
          }
          var aesjs = {
            AES,
            Counter,
            ModeOfOperation: {
              ecb: ModeOfOperationECB,
              cbc: ModeOfOperationCBC,
              cfb: ModeOfOperationCFB,
              ofb: ModeOfOperationOFB,
              ctr: ModeOfOperationCTR
            },
            utils: {
              hex: convertHex,
              utf8: convertUtf8
            },
            padding: {
              pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
              }
            },
            _arrayTest: {
              coerceArray,
              createArray,
              copyArray
            }
          };
          if (true) {
            module2.exports = aesjs;
          } else if (false) {
            (void 0)(aesjs);
          } else {
            if (root.aesjs) {
              aesjs._aesjs = root.aesjs;
            }
            root.aesjs = aesjs;
          }
        })(commonjsGlobal);
      });
      var _version$A = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "json-wallets/5.0.1";
      });
      var _version$B = unwrapExports(_version$A);
      var _version_1$i = _version$A.version;
      var utils$1 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        function looseArrayify(hexString) {
          if (typeof hexString === "string" && hexString.substring(0, 2) !== "0x") {
            hexString = "0x" + hexString;
          }
          return lib$1.arrayify(hexString);
        }
        exports3.looseArrayify = looseArrayify;
        function zpad(value, length) {
          value = String(value);
          while (value.length < length) {
            value = "0" + value;
          }
          return value;
        }
        exports3.zpad = zpad;
        function getPassword(password) {
          if (typeof password === "string") {
            return lib$8.toUtf8Bytes(password, lib$8.UnicodeNormalizationForm.NFKC);
          }
          return lib$1.arrayify(password);
        }
        exports3.getPassword = getPassword;
        function searchPath(object, path) {
          var currentChild = object;
          var comps = path.toLowerCase().split("/");
          for (var i2 = 0; i2 < comps.length; i2++) {
            var matchingChild = null;
            for (var key2 in currentChild) {
              if (key2.toLowerCase() === comps[i2]) {
                matchingChild = currentChild[key2];
                break;
              }
            }
            if (matchingChild === null) {
              return null;
            }
            currentChild = matchingChild;
          }
          return currentChild;
        }
        exports3.searchPath = searchPath;
      });
      var utils$2 = unwrapExports(utils$1);
      var utils_1$2 = utils$1.looseArrayify;
      var utils_2 = utils$1.zpad;
      var utils_3 = utils$1.getPassword;
      var utils_4 = utils$1.searchPath;
      var crowdsale = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
          return mod && mod.__esModule ? mod : {default: mod};
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var aes_js_1 = __importDefault(aesJs);
        var logger = new lib.Logger(_version$A.version);
        var CrowdsaleAccount = function(_super) {
          __extends(CrowdsaleAccount2, _super);
          function CrowdsaleAccount2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          CrowdsaleAccount2.prototype.isCrowdsaleAccount = function(value) {
            return !!(value && value._isCrowdsaleAccount);
          };
          return CrowdsaleAccount2;
        }(lib$3.Description);
        exports3.CrowdsaleAccount = CrowdsaleAccount;
        function decrypt(json, password) {
          var data = JSON.parse(json);
          password = utils$1.getPassword(password);
          var ethaddr = lib$6.getAddress(utils$1.searchPath(data, "ethaddr"));
          var encseed = utils$1.looseArrayify(utils$1.searchPath(data, "encseed"));
          if (!encseed || encseed.length % 16 !== 0) {
            logger.throwArgumentError("invalid encseed", "json", json);
          }
          var key2 = lib$1.arrayify(browser$2.pbkdf2(password, password, 2e3, 32, "sha256")).slice(0, 16);
          var iv = encseed.slice(0, 16);
          var encryptedSeed = encseed.slice(16);
          var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key2, iv);
          var seed = aes_js_1.default.padding.pkcs7.strip(lib$1.arrayify(aesCbc.decrypt(encryptedSeed)));
          var seedHex = "";
          for (var i2 = 0; i2 < seed.length; i2++) {
            seedHex += String.fromCharCode(seed[i2]);
          }
          var seedHexBytes = lib$8.toUtf8Bytes(seedHex);
          var privateKey = lib$4.keccak256(seedHexBytes);
          return new CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey
          });
        }
        exports3.decrypt = decrypt;
      });
      var crowdsale$1 = unwrapExports(crowdsale);
      var crowdsale_1 = crowdsale.CrowdsaleAccount;
      var crowdsale_2 = crowdsale.decrypt;
      var inspect = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        function isCrowdsaleWallet(json) {
          var data = null;
          try {
            data = JSON.parse(json);
          } catch (error) {
            return false;
          }
          return data.encseed && data.ethaddr;
        }
        exports3.isCrowdsaleWallet = isCrowdsaleWallet;
        function isKeystoreWallet(json) {
          var data = null;
          try {
            data = JSON.parse(json);
          } catch (error) {
            return false;
          }
          if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
          }
          return true;
        }
        exports3.isKeystoreWallet = isKeystoreWallet;
        function getJsonWalletAddress(json) {
          if (isCrowdsaleWallet(json)) {
            try {
              return lib$6.getAddress(JSON.parse(json).ethaddr);
            } catch (error) {
              return null;
            }
          }
          if (isKeystoreWallet(json)) {
            try {
              return lib$6.getAddress(JSON.parse(json).address);
            } catch (error) {
              return null;
            }
          }
          return null;
        }
        exports3.getJsonWalletAddress = getJsonWalletAddress;
      });
      var inspect$1 = unwrapExports(inspect);
      var inspect_1 = inspect.isCrowdsaleWallet;
      var inspect_2 = inspect.isKeystoreWallet;
      var inspect_3 = inspect.getJsonWalletAddress;
      var scrypt = createCommonjsModule(function(module2, exports3) {
        "use strict";
        (function(root) {
          const MAX_VALUE = 2147483647;
          function SHA2562(m) {
            const K2 = new Uint32Array([
              1116352408,
              1899447441,
              3049323471,
              3921009573,
              961987163,
              1508970993,
              2453635748,
              2870763221,
              3624381080,
              310598401,
              607225278,
              1426881987,
              1925078388,
              2162078206,
              2614888103,
              3248222580,
              3835390401,
              4022224774,
              264347078,
              604807628,
              770255983,
              1249150122,
              1555081692,
              1996064986,
              2554220882,
              2821834349,
              2952996808,
              3210313671,
              3336571891,
              3584528711,
              113926993,
              338241895,
              666307205,
              773529912,
              1294757372,
              1396182291,
              1695183700,
              1986661051,
              2177026350,
              2456956037,
              2730485921,
              2820302411,
              3259730800,
              3345764771,
              3516065817,
              3600352804,
              4094571909,
              275423344,
              430227734,
              506948616,
              659060556,
              883997877,
              958139571,
              1322822218,
              1537002063,
              1747873779,
              1955562222,
              2024104815,
              2227730452,
              2361852424,
              2428436474,
              2756734187,
              3204031479,
              3329325298
            ]);
            let h0 = 1779033703, h1 = 3144134277, h2 = 1013904242, h3 = 2773480762;
            let h4 = 1359893119, h5 = 2600822924, h6 = 528734635, h7 = 1541459225;
            const w = new Uint32Array(64);
            function blocks(p2) {
              let off = 0, len = p2.length;
              while (len >= 64) {
                let a = h0, b = h1, c = h2, d = h3, e = h4, f2 = h5, g = h6, h = h7, u, i3, j, t1, t2;
                for (i3 = 0; i3 < 16; i3++) {
                  j = off + i3 * 4;
                  w[i3] = (p2[j] & 255) << 24 | (p2[j + 1] & 255) << 16 | (p2[j + 2] & 255) << 8 | p2[j + 3] & 255;
                }
                for (i3 = 16; i3 < 64; i3++) {
                  u = w[i3 - 2];
                  t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
                  u = w[i3 - 15];
                  t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
                  w[i3] = (t1 + w[i3 - 7] | 0) + (t2 + w[i3 - 16] | 0) | 0;
                }
                for (i3 = 0; i3 < 64; i3++) {
                  t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f2 ^ ~e & g) | 0) + (h + (K2[i3] + w[i3] | 0) | 0) | 0;
                  t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
                  h = g;
                  g = f2;
                  f2 = e;
                  e = d + t1 | 0;
                  d = c;
                  c = b;
                  b = a;
                  a = t1 + t2 | 0;
                }
                h0 = h0 + a | 0;
                h1 = h1 + b | 0;
                h2 = h2 + c | 0;
                h3 = h3 + d | 0;
                h4 = h4 + e | 0;
                h5 = h5 + f2 | 0;
                h6 = h6 + g | 0;
                h7 = h7 + h | 0;
                off += 64;
                len -= 64;
              }
            }
            blocks(m);
            let i2, bytesLeft = m.length % 64, bitLenHi = m.length / 536870912 | 0, bitLenLo = m.length << 3, numZeros = bytesLeft < 56 ? 56 : 120, p = m.slice(m.length - bytesLeft, m.length);
            p.push(128);
            for (i2 = bytesLeft + 1; i2 < numZeros; i2++) {
              p.push(0);
            }
            p.push(bitLenHi >>> 24 & 255);
            p.push(bitLenHi >>> 16 & 255);
            p.push(bitLenHi >>> 8 & 255);
            p.push(bitLenHi >>> 0 & 255);
            p.push(bitLenLo >>> 24 & 255);
            p.push(bitLenLo >>> 16 & 255);
            p.push(bitLenLo >>> 8 & 255);
            p.push(bitLenLo >>> 0 & 255);
            blocks(p);
            return [
              h0 >>> 24 & 255,
              h0 >>> 16 & 255,
              h0 >>> 8 & 255,
              h0 >>> 0 & 255,
              h1 >>> 24 & 255,
              h1 >>> 16 & 255,
              h1 >>> 8 & 255,
              h1 >>> 0 & 255,
              h2 >>> 24 & 255,
              h2 >>> 16 & 255,
              h2 >>> 8 & 255,
              h2 >>> 0 & 255,
              h3 >>> 24 & 255,
              h3 >>> 16 & 255,
              h3 >>> 8 & 255,
              h3 >>> 0 & 255,
              h4 >>> 24 & 255,
              h4 >>> 16 & 255,
              h4 >>> 8 & 255,
              h4 >>> 0 & 255,
              h5 >>> 24 & 255,
              h5 >>> 16 & 255,
              h5 >>> 8 & 255,
              h5 >>> 0 & 255,
              h6 >>> 24 & 255,
              h6 >>> 16 & 255,
              h6 >>> 8 & 255,
              h6 >>> 0 & 255,
              h7 >>> 24 & 255,
              h7 >>> 16 & 255,
              h7 >>> 8 & 255,
              h7 >>> 0 & 255
            ];
          }
          function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            password = password.length <= 64 ? password : SHA2562(password);
            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);
            let i2;
            let dk = [];
            for (i2 = 0; i2 < 64; i2++) {
              inner[i2] = 54;
            }
            for (i2 = 0; i2 < password.length; i2++) {
              inner[i2] ^= password[i2];
            }
            for (i2 = 0; i2 < salt.length; i2++) {
              inner[64 + i2] = salt[i2];
            }
            for (i2 = innerLen - 4; i2 < innerLen; i2++) {
              inner[i2] = 0;
            }
            for (i2 = 0; i2 < 64; i2++)
              outerKey[i2] = 92;
            for (i2 = 0; i2 < password.length; i2++)
              outerKey[i2] ^= password[i2];
            function incrementCounter() {
              for (let i3 = innerLen - 1; i3 >= innerLen - 4; i3--) {
                inner[i3]++;
                if (inner[i3] <= 255)
                  return;
                inner[i3] = 0;
              }
            }
            while (dkLen >= 32) {
              incrementCounter();
              dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))));
              dkLen -= 32;
            }
            if (dkLen > 0) {
              incrementCounter();
              dk = dk.concat(SHA2562(outerKey.concat(SHA2562(inner))).slice(0, dkLen));
            }
            return dk;
          }
          function blockmix_salsa8(BY, Yi, r2, x, _X) {
            let i2;
            arraycopy(BY, (2 * r2 - 1) * 16, _X, 0, 16);
            for (i2 = 0; i2 < 2 * r2; i2++) {
              blockxor(BY, i2 * 16, _X, 16);
              salsa20_8(_X, x);
              arraycopy(_X, 0, BY, Yi + i2 * 16, 16);
            }
            for (i2 = 0; i2 < r2; i2++) {
              arraycopy(BY, Yi + i2 * 2 * 16, BY, i2 * 16, 16);
            }
            for (i2 = 0; i2 < r2; i2++) {
              arraycopy(BY, Yi + (i2 * 2 + 1) * 16, BY, (i2 + r2) * 16, 16);
            }
          }
          function R(a, b) {
            return a << b | a >>> 32 - b;
          }
          function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);
            for (let i2 = 8; i2 > 0; i2 -= 2) {
              x[4] ^= R(x[0] + x[12], 7);
              x[8] ^= R(x[4] + x[0], 9);
              x[12] ^= R(x[8] + x[4], 13);
              x[0] ^= R(x[12] + x[8], 18);
              x[9] ^= R(x[5] + x[1], 7);
              x[13] ^= R(x[9] + x[5], 9);
              x[1] ^= R(x[13] + x[9], 13);
              x[5] ^= R(x[1] + x[13], 18);
              x[14] ^= R(x[10] + x[6], 7);
              x[2] ^= R(x[14] + x[10], 9);
              x[6] ^= R(x[2] + x[14], 13);
              x[10] ^= R(x[6] + x[2], 18);
              x[3] ^= R(x[15] + x[11], 7);
              x[7] ^= R(x[3] + x[15], 9);
              x[11] ^= R(x[7] + x[3], 13);
              x[15] ^= R(x[11] + x[7], 18);
              x[1] ^= R(x[0] + x[3], 7);
              x[2] ^= R(x[1] + x[0], 9);
              x[3] ^= R(x[2] + x[1], 13);
              x[0] ^= R(x[3] + x[2], 18);
              x[6] ^= R(x[5] + x[4], 7);
              x[7] ^= R(x[6] + x[5], 9);
              x[4] ^= R(x[7] + x[6], 13);
              x[5] ^= R(x[4] + x[7], 18);
              x[11] ^= R(x[10] + x[9], 7);
              x[8] ^= R(x[11] + x[10], 9);
              x[9] ^= R(x[8] + x[11], 13);
              x[10] ^= R(x[9] + x[8], 18);
              x[12] ^= R(x[15] + x[14], 7);
              x[13] ^= R(x[12] + x[15], 9);
              x[14] ^= R(x[13] + x[12], 13);
              x[15] ^= R(x[14] + x[13], 18);
            }
            for (let i2 = 0; i2 < 16; ++i2) {
              B[i2] += x[i2];
            }
          }
          function blockxor(S, Si, D, len) {
            for (let i2 = 0; i2 < len; i2++) {
              D[i2] ^= S[Si + i2];
            }
          }
          function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
              dest[destPos++] = src[srcPos++];
            }
          }
          function checkBufferish(o) {
            if (!o || typeof o.length !== "number") {
              return false;
            }
            for (let i2 = 0; i2 < o.length; i2++) {
              const v = o[i2];
              if (typeof v !== "number" || v % 1 || v < 0 || v >= 256) {
                return false;
              }
            }
            return true;
          }
          function ensureInteger(value, name2) {
            if (typeof value !== "number" || value % 1) {
              throw new Error("invalid " + name2);
            }
            return value;
          }
          function _scrypt(password, salt, N, r2, p, dkLen, callback) {
            N = ensureInteger(N, "N");
            r2 = ensureInteger(r2, "r");
            p = ensureInteger(p, "p");
            dkLen = ensureInteger(dkLen, "dkLen");
            if (N === 0 || (N & N - 1) !== 0) {
              throw new Error("N must be power of 2");
            }
            if (N > MAX_VALUE / 128 / r2) {
              throw new Error("N too large");
            }
            if (r2 > MAX_VALUE / 128 / p) {
              throw new Error("r too large");
            }
            if (!checkBufferish(password)) {
              throw new Error("password must be an array or buffer");
            }
            password = Array.prototype.slice.call(password);
            if (!checkBufferish(salt)) {
              throw new Error("salt must be an array or buffer");
            }
            salt = Array.prototype.slice.call(salt);
            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r2);
            const B = new Uint32Array(p * 32 * r2);
            for (let i2 = 0; i2 < B.length; i2++) {
              const j = i2 * 4;
              B[i2] = (b[j + 3] & 255) << 24 | (b[j + 2] & 255) << 16 | (b[j + 1] & 255) << 8 | (b[j + 0] & 255) << 0;
            }
            const XY = new Uint32Array(64 * r2);
            const V = new Uint32Array(32 * r2 * N);
            const Yi = 32 * r2;
            const x = new Uint32Array(16);
            const _X = new Uint32Array(16);
            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;
            let stop = false;
            let state = 0;
            let i0 = 0, i1;
            let Bi;
            const limit = callback ? parseInt(1e3 / r2) : 4294967295;
            const nextTick = typeof setImmediate !== "undefined" ? setImmediate : setTimeout;
            const incrementalSMix = function() {
              if (stop) {
                return callback(new Error("cancelled"), currentOp / totalOps);
              }
              let steps;
              switch (state) {
                case 0:
                  Bi = i0 * 32 * r2;
                  arraycopy(B, Bi, XY, 0, Yi);
                  state = 1;
                  i1 = 0;
                case 1:
                  steps = N - i1;
                  if (steps > limit) {
                    steps = limit;
                  }
                  for (let i2 = 0; i2 < steps; i2++) {
                    arraycopy(XY, 0, V, (i1 + i2) * Yi, Yi);
                    blockmix_salsa8(XY, Yi, r2, x, _X);
                  }
                  i1 += steps;
                  currentOp += steps;
                  if (callback) {
                    const percent10 = parseInt(1e3 * currentOp / totalOps);
                    if (percent10 !== lastPercent10) {
                      stop = callback(null, currentOp / totalOps);
                      if (stop) {
                        break;
                      }
                      lastPercent10 = percent10;
                    }
                  }
                  if (i1 < N) {
                    break;
                  }
                  i1 = 0;
                  state = 2;
                case 2:
                  steps = N - i1;
                  if (steps > limit) {
                    steps = limit;
                  }
                  for (let i2 = 0; i2 < steps; i2++) {
                    const offset = (2 * r2 - 1) * 16;
                    const j = XY[offset] & N - 1;
                    blockxor(V, j * Yi, XY, Yi);
                    blockmix_salsa8(XY, Yi, r2, x, _X);
                  }
                  i1 += steps;
                  currentOp += steps;
                  if (callback) {
                    const percent10 = parseInt(1e3 * currentOp / totalOps);
                    if (percent10 !== lastPercent10) {
                      stop = callback(null, currentOp / totalOps);
                      if (stop) {
                        break;
                      }
                      lastPercent10 = percent10;
                    }
                  }
                  if (i1 < N) {
                    break;
                  }
                  arraycopy(XY, 0, B, Bi, Yi);
                  i0++;
                  if (i0 < p) {
                    state = 0;
                    break;
                  }
                  b = [];
                  for (let i2 = 0; i2 < B.length; i2++) {
                    b.push(B[i2] >> 0 & 255);
                    b.push(B[i2] >> 8 & 255);
                    b.push(B[i2] >> 16 & 255);
                    b.push(B[i2] >> 24 & 255);
                  }
                  const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);
                  if (callback) {
                    callback(null, 1, derivedKey);
                  }
                  return derivedKey;
              }
              if (callback) {
                nextTick(incrementalSMix);
              }
            };
            if (!callback) {
              while (true) {
                const derivedKey = incrementalSMix();
                if (derivedKey != void 0) {
                  return derivedKey;
                }
              }
            }
            incrementalSMix();
          }
          const lib2 = {
            scrypt: function(password, salt, N, r2, p, dkLen, progressCallback) {
              return new Promise(function(resolve, reject) {
                let lastProgress = 0;
                if (progressCallback) {
                  progressCallback(0);
                }
                _scrypt(password, salt, N, r2, p, dkLen, function(error, progress, key2) {
                  if (error) {
                    reject(error);
                  } else if (key2) {
                    if (progressCallback && lastProgress !== 1) {
                      progressCallback(1);
                    }
                    resolve(new Uint8Array(key2));
                  } else if (progressCallback && progress !== lastProgress) {
                    lastProgress = progress;
                    return progressCallback(progress);
                  }
                });
              });
            },
            syncScrypt: function(password, salt, N, r2, p, dkLen) {
              return new Uint8Array(_scrypt(password, salt, N, r2, p, dkLen));
            }
          };
          if (true) {
            module2.exports = lib2;
          } else if (false) {
            (void 0)(lib2);
          } else if (root) {
            if (root.scrypt) {
              root._scrypt = root.scrypt;
            }
            root.scrypt = lib2;
          }
        })(commonjsGlobal);
      });
      var scrypt_1 = scrypt.scrypt;
      var scrypt_2 = scrypt.syncScrypt;
      var rng;
      if (commonjsGlobal.crypto && crypto.getRandomValues) {
        var _rnds8 = new Uint8Array(16);
        rng = function whatwgRNG() {
          crypto.getRandomValues(_rnds8);
          return _rnds8;
        };
      }
      if (!rng) {
        var _rnds = new Array(16);
        rng = function() {
          for (var i2 = 0, r2; i2 < 16; i2++) {
            if ((i2 & 3) === 0)
              r2 = Math.random() * 4294967296;
            _rnds[i2] = r2 >>> ((i2 & 3) << 3) & 255;
          }
          return _rnds;
        };
      }
      var rngBrowser = rng;
      var _byteToHex = [];
      var _hexToByte = {};
      for (var i = 0; i < 256; i++) {
        _byteToHex[i] = (i + 256).toString(16).substr(1);
        _hexToByte[_byteToHex[i]] = i;
      }
      function parse(s2, buf, offset) {
        var i2 = buf && offset || 0, ii = 0;
        buf = buf || [];
        s2.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
          if (ii < 16) {
            buf[i2 + ii++] = _hexToByte[oct];
          }
        });
        while (ii < 16) {
          buf[i2 + ii++] = 0;
        }
        return buf;
      }
      function unparse(buf, offset) {
        var i2 = offset || 0, bth = _byteToHex;
        return bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]];
      }
      var _seedBytes = rngBrowser();
      var _nodeId = [
        _seedBytes[0] | 1,
        _seedBytes[1],
        _seedBytes[2],
        _seedBytes[3],
        _seedBytes[4],
        _seedBytes[5]
      ];
      var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 16383;
      var _lastMSecs = 0, _lastNSecs = 0;
      function v1(options, buf, offset) {
        var i2 = buf && offset || 0;
        var b = buf || [];
        options = options || {};
        var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
        var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
        var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
        var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
        if (dt < 0 && options.clockseq === void 0) {
          clockseq = clockseq + 1 & 16383;
        }
        if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
          nsecs = 0;
        }
        if (nsecs >= 1e4) {
          throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
        }
        _lastMSecs = msecs;
        _lastNSecs = nsecs;
        _clockseq = clockseq;
        msecs += 122192928e5;
        var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
        b[i2++] = tl >>> 24 & 255;
        b[i2++] = tl >>> 16 & 255;
        b[i2++] = tl >>> 8 & 255;
        b[i2++] = tl & 255;
        var tmh = msecs / 4294967296 * 1e4 & 268435455;
        b[i2++] = tmh >>> 8 & 255;
        b[i2++] = tmh & 255;
        b[i2++] = tmh >>> 24 & 15 | 16;
        b[i2++] = tmh >>> 16 & 255;
        b[i2++] = clockseq >>> 8 | 128;
        b[i2++] = clockseq & 255;
        var node = options.node || _nodeId;
        for (var n = 0; n < 6; n++) {
          b[i2 + n] = node[n];
        }
        return buf ? buf : unparse(b);
      }
      function v4(options, buf, offset) {
        var i2 = buf && offset || 0;
        if (typeof options == "string") {
          buf = options == "binary" ? new Array(16) : null;
          options = null;
        }
        options = options || {};
        var rnds = options.random || (options.rng || rngBrowser)();
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128;
        if (buf) {
          for (var ii = 0; ii < 16; ii++) {
            buf[i2 + ii] = rnds[ii];
          }
        }
        return buf || unparse(rnds);
      }
      var uuid = v4;
      uuid.v1 = v1;
      uuid.v4 = v4;
      uuid.parse = parse;
      uuid.unparse = unparse;
      var uuid_1 = uuid;
      var keystore = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
          return mod && mod.__esModule ? mod : {default: mod};
        };
        var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var aes_js_1 = __importDefault(aesJs);
        var scrypt$1 = __importStar(scrypt);
        var uuid_1$1 = __importDefault(uuid_1);
        var logger = new lib.Logger(_version$A.version);
        function hasMnemonic(value) {
          return value != null && value.mnemonic && value.mnemonic.phrase;
        }
        var KeystoreAccount = function(_super) {
          __extends(KeystoreAccount2, _super);
          function KeystoreAccount2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          KeystoreAccount2.prototype.isKeystoreAccount = function(value) {
            return !!(value && value._isKeystoreAccount);
          };
          return KeystoreAccount2;
        }(lib$3.Description);
        exports3.KeystoreAccount = KeystoreAccount;
        function _decrypt(data, key2, ciphertext) {
          var cipher = utils$1.searchPath(data, "crypto/cipher");
          if (cipher === "aes-128-ctr") {
            var iv = utils$1.looseArrayify(utils$1.searchPath(data, "crypto/cipherparams/iv"));
            var counter = new aes_js_1.default.Counter(iv);
            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key2, counter);
            return lib$1.arrayify(aesCtr.decrypt(ciphertext));
          }
          return null;
        }
        function _getAccount(data, key2) {
          var ciphertext = utils$1.looseArrayify(utils$1.searchPath(data, "crypto/ciphertext"));
          var computedMAC = lib$1.hexlify(lib$4.keccak256(lib$1.concat([key2.slice(16, 32), ciphertext]))).substring(2);
          if (computedMAC !== utils$1.searchPath(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
          }
          var privateKey = _decrypt(data, key2.slice(0, 16), ciphertext);
          if (!privateKey) {
            logger.throwError("unsupported cipher", lib.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "decrypt"
            });
          }
          var mnemonicKey = key2.slice(32, 64);
          var address2 = lib$g.computeAddress(privateKey);
          if (data.address) {
            var check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
              check = "0x" + check;
            }
            if (lib$6.getAddress(check) !== address2) {
              throw new Error("address mismatch");
            }
          }
          var account = {
            _isKeystoreAccount: true,
            address: address2,
            privateKey: lib$1.hexlify(privateKey)
          };
          if (utils$1.searchPath(data, "x-ethers/version") === "0.1") {
            var mnemonicCiphertext = utils$1.looseArrayify(utils$1.searchPath(data, "x-ethers/mnemonicCiphertext"));
            var mnemonicIv = utils$1.looseArrayify(utils$1.searchPath(data, "x-ethers/mnemonicCounter"));
            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            var path = utils$1.searchPath(data, "x-ethers/path") || lib$h.defaultPath;
            var locale = utils$1.searchPath(data, "x-ethers/locale") || "en";
            var entropy = lib$1.arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
              var mnemonic = lib$h.entropyToMnemonic(entropy, locale);
              var node = lib$h.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
              if (node.privateKey != account.privateKey) {
                throw new Error("mnemonic mismatch");
              }
              account.mnemonic = node.mnemonic;
            } catch (error) {
              if (error.code !== lib.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                throw error;
              }
            }
          }
          return new KeystoreAccount(account);
        }
        function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
          return lib$1.arrayify(browser$2.pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
        }
        function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
          return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
        }
        function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
          var passwordBytes = utils$1.getPassword(password);
          var kdf = utils$1.searchPath(data, "crypto/kdf");
          if (kdf && typeof kdf === "string") {
            var throwError = function(name2, value) {
              return logger.throwArgumentError("invalid key-derivation function parameters", name2, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
              var salt = utils$1.looseArrayify(utils$1.searchPath(data, "crypto/kdfparams/salt"));
              var N = parseInt(utils$1.searchPath(data, "crypto/kdfparams/n"));
              var r2 = parseInt(utils$1.searchPath(data, "crypto/kdfparams/r"));
              var p = parseInt(utils$1.searchPath(data, "crypto/kdfparams/p"));
              if (!N || !r2 || !p) {
                throwError("kdf", kdf);
              }
              if ((N & N - 1) !== 0) {
                throwError("N", N);
              }
              var dkLen = parseInt(utils$1.searchPath(data, "crypto/kdfparams/dklen"));
              if (dkLen !== 32) {
                throwError("dklen", dkLen);
              }
              return scryptFunc(passwordBytes, salt, N, r2, p, 64, progressCallback);
            } else if (kdf.toLowerCase() === "pbkdf2") {
              var salt = utils$1.looseArrayify(utils$1.searchPath(data, "crypto/kdfparams/salt"));
              var prfFunc = null;
              var prf = utils$1.searchPath(data, "crypto/kdfparams/prf");
              if (prf === "hmac-sha256") {
                prfFunc = "sha256";
              } else if (prf === "hmac-sha512") {
                prfFunc = "sha512";
              } else {
                throwError("prf", prf);
              }
              var count = parseInt(utils$1.searchPath(data, "crypto/kdfparams/c"));
              var dkLen = parseInt(utils$1.searchPath(data, "crypto/kdfparams/dklen"));
              if (dkLen !== 32) {
                throwError("dklen", dkLen);
              }
              return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
          }
          return logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
        }
        function decryptSync(json, password) {
          var data = JSON.parse(json);
          var key2 = _computeKdfKey(data, password, pbkdf2Sync, scrypt$1.syncScrypt);
          return _getAccount(data, key2);
        }
        exports3.decryptSync = decryptSync;
        function decrypt(json, password, progressCallback) {
          return __awaiter(this, void 0, void 0, function() {
            var data, key2;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  data = JSON.parse(json);
                  return [4, _computeKdfKey(data, password, pbkdf2, scrypt$1.scrypt, progressCallback)];
                case 1:
                  key2 = _a.sent();
                  return [2, _getAccount(data, key2)];
              }
            });
          });
        }
        exports3.decrypt = decrypt;
        function encrypt(account, password, options, progressCallback) {
          try {
            if (lib$6.getAddress(account.address) !== lib$g.computeAddress(account.privateKey)) {
              throw new Error("address/privateKey mismatch");
            }
            if (hasMnemonic(account)) {
              var mnemonic = account.mnemonic;
              var node = lib$h.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || lib$h.defaultPath);
              if (node.privateKey != account.privateKey) {
                throw new Error("mnemonic mismatch");
              }
            }
          } catch (e) {
            return Promise.reject(e);
          }
          if (typeof options === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
          }
          if (!options) {
            options = {};
          }
          var privateKey = lib$1.arrayify(account.privateKey);
          var passwordBytes = utils$1.getPassword(password);
          var entropy = null;
          var path = null;
          var locale = null;
          if (hasMnemonic(account)) {
            var srcMnemonic = account.mnemonic;
            entropy = lib$1.arrayify(lib$h.mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || lib$h.defaultPath;
            locale = srcMnemonic.locale || "en";
          }
          var client = options.client;
          if (!client) {
            client = "ethers.js";
          }
          var salt = null;
          if (options.salt) {
            salt = lib$1.arrayify(options.salt);
          } else {
            salt = browser$6.randomBytes(32);
            ;
          }
          var iv = null;
          if (options.iv) {
            iv = lib$1.arrayify(options.iv);
            if (iv.length !== 16) {
              throw new Error("invalid iv");
            }
          } else {
            iv = browser$6.randomBytes(16);
          }
          var uuidRandom = null;
          if (options.uuid) {
            uuidRandom = lib$1.arrayify(options.uuid);
            if (uuidRandom.length !== 16) {
              throw new Error("invalid uuid");
            }
          } else {
            uuidRandom = browser$6.randomBytes(16);
          }
          var N = 1 << 17, r2 = 8, p = 1;
          if (options.scrypt) {
            if (options.scrypt.N) {
              N = options.scrypt.N;
            }
            if (options.scrypt.r) {
              r2 = options.scrypt.r;
            }
            if (options.scrypt.p) {
              p = options.scrypt.p;
            }
          }
          return scrypt$1.scrypt(passwordBytes, salt, N, r2, p, 64, progressCallback).then(function(key2) {
            key2 = lib$1.arrayify(key2);
            var derivedKey = key2.slice(0, 16);
            var macPrefix = key2.slice(16, 32);
            var mnemonicKey = key2.slice(32, 64);
            var counter = new aes_js_1.default.Counter(iv);
            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
            var ciphertext = lib$1.arrayify(aesCtr.encrypt(privateKey));
            var mac = lib$4.keccak256(lib$1.concat([macPrefix, ciphertext]));
            var data = {
              address: account.address.substring(2).toLowerCase(),
              id: uuid_1$1.default.v4({random: uuidRandom}),
              version: 3,
              Crypto: {
                cipher: "aes-128-ctr",
                cipherparams: {
                  iv: lib$1.hexlify(iv).substring(2)
                },
                ciphertext: lib$1.hexlify(ciphertext).substring(2),
                kdf: "scrypt",
                kdfparams: {
                  salt: lib$1.hexlify(salt).substring(2),
                  n: N,
                  dklen: 32,
                  p,
                  r: r2
                },
                mac: mac.substring(2)
              }
            };
            if (entropy) {
              var mnemonicIv = browser$6.randomBytes(16);
              var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);
              var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
              var mnemonicCiphertext = lib$1.arrayify(mnemonicAesCtr.encrypt(entropy));
              var now = new Date();
              var timestamp = now.getUTCFullYear() + "-" + utils$1.zpad(now.getUTCMonth() + 1, 2) + "-" + utils$1.zpad(now.getUTCDate(), 2) + "T" + utils$1.zpad(now.getUTCHours(), 2) + "-" + utils$1.zpad(now.getUTCMinutes(), 2) + "-" + utils$1.zpad(now.getUTCSeconds(), 2) + ".0Z";
              data["x-ethers"] = {
                client,
                gethFilename: "UTC--" + timestamp + "--" + data.address,
                mnemonicCounter: lib$1.hexlify(mnemonicIv).substring(2),
                mnemonicCiphertext: lib$1.hexlify(mnemonicCiphertext).substring(2),
                path,
                locale,
                version: "0.1"
              };
            }
            return JSON.stringify(data);
          });
        }
        exports3.encrypt = encrypt;
      });
      var keystore$1 = unwrapExports(keystore);
      var keystore_1 = keystore.KeystoreAccount;
      var keystore_2 = keystore.decryptSync;
      var keystore_3 = keystore.decrypt;
      var keystore_4 = keystore.encrypt;
      var lib$i = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.decryptCrowdsale = crowdsale.decrypt;
        exports3.getJsonWalletAddress = inspect.getJsonWalletAddress;
        exports3.isCrowdsaleWallet = inspect.isCrowdsaleWallet;
        exports3.isKeystoreWallet = inspect.isKeystoreWallet;
        exports3.decryptKeystore = keystore.decrypt;
        exports3.decryptKeystoreSync = keystore.decryptSync;
        exports3.encryptKeystore = keystore.encrypt;
        function decryptJsonWallet(json, password, progressCallback) {
          if (inspect.isCrowdsaleWallet(json)) {
            if (progressCallback) {
              progressCallback(0);
            }
            var account = crowdsale.decrypt(json, password);
            if (progressCallback) {
              progressCallback(1);
            }
            return Promise.resolve(account);
          }
          if (inspect.isKeystoreWallet(json)) {
            return keystore.decrypt(json, password, progressCallback);
          }
          return Promise.reject(new Error("invalid JSON wallet"));
        }
        exports3.decryptJsonWallet = decryptJsonWallet;
        function decryptJsonWalletSync(json, password) {
          if (inspect.isCrowdsaleWallet(json)) {
            return crowdsale.decrypt(json, password);
          }
          if (inspect.isKeystoreWallet(json)) {
            return keystore.decryptSync(json, password);
          }
          throw new Error("invalid JSON wallet");
        }
        exports3.decryptJsonWalletSync = decryptJsonWalletSync;
      });
      var index$i = unwrapExports(lib$i);
      var lib_1$i = lib$i.decryptCrowdsale;
      var lib_2$h = lib$i.getJsonWalletAddress;
      var lib_3$e = lib$i.isCrowdsaleWallet;
      var lib_4$b = lib$i.isKeystoreWallet;
      var lib_5$a = lib$i.decryptKeystore;
      var lib_6$6 = lib$i.decryptKeystoreSync;
      var lib_7$5 = lib$i.encryptKeystore;
      var lib_8$4 = lib$i.decryptJsonWallet;
      var lib_9$4 = lib$i.decryptJsonWalletSync;
      var _version$C = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "wallet/5.0.1";
      });
      var _version$D = unwrapExports(_version$C);
      var _version_1$j = _version$C.version;
      var lib$j = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$C.version);
        function isAccount(value) {
          return value != null && lib$1.isHexString(value.privateKey, 32) && value.address != null;
        }
        function hasMnemonic(value) {
          var mnemonic = value.mnemonic;
          return mnemonic && mnemonic.phrase;
        }
        var Wallet = function(_super) {
          __extends(Wallet2, _super);
          function Wallet2(privateKey, provider) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Wallet2);
            _this = _super.call(this) || this;
            if (isAccount(privateKey)) {
              var signingKey_1 = new lib$f.SigningKey(privateKey.privateKey);
              lib$3.defineReadOnly(_this, "_signingKey", function() {
                return signingKey_1;
              });
              lib$3.defineReadOnly(_this, "address", lib$g.computeAddress(_this.publicKey));
              if (_this.address !== lib$6.getAddress(privateKey.address)) {
                logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
              }
              if (hasMnemonic(privateKey)) {
                var srcMnemonic_1 = privateKey.mnemonic;
                lib$3.defineReadOnly(_this, "_mnemonic", function() {
                  return {
                    phrase: srcMnemonic_1.phrase,
                    path: srcMnemonic_1.path || lib$h.defaultPath,
                    locale: srcMnemonic_1.locale || "en"
                  };
                });
                var mnemonic = _this.mnemonic;
                var node = lib$h.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                if (lib$g.computeAddress(node.privateKey) !== _this.address) {
                  logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                }
              } else {
                lib$3.defineReadOnly(_this, "_mnemonic", function() {
                  return null;
                });
              }
            } else {
              if (lib$f.SigningKey.isSigningKey(privateKey)) {
                if (privateKey.curve !== "secp256k1") {
                  logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                }
                lib$3.defineReadOnly(_this, "_signingKey", function() {
                  return privateKey;
                });
              } else {
                var signingKey_2 = new lib$f.SigningKey(privateKey);
                lib$3.defineReadOnly(_this, "_signingKey", function() {
                  return signingKey_2;
                });
              }
              lib$3.defineReadOnly(_this, "_mnemonic", function() {
                return null;
              });
              lib$3.defineReadOnly(_this, "address", lib$g.computeAddress(_this.publicKey));
            }
            if (provider && !lib$b.Provider.isProvider(provider)) {
              logger.throwArgumentError("invalid provider", "provider", provider);
            }
            lib$3.defineReadOnly(_this, "provider", provider || null);
            return _this;
          }
          Object.defineProperty(Wallet2.prototype, "mnemonic", {
            get: function() {
              return this._mnemonic();
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Wallet2.prototype, "privateKey", {
            get: function() {
              return this._signingKey().privateKey;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Wallet2.prototype, "publicKey", {
            get: function() {
              return this._signingKey().publicKey;
            },
            enumerable: true,
            configurable: true
          });
          Wallet2.prototype.getAddress = function() {
            return Promise.resolve(this.address);
          };
          Wallet2.prototype.connect = function(provider) {
            return new Wallet2(this, provider);
          };
          Wallet2.prototype.signTransaction = function(transaction) {
            var _this = this;
            return lib$3.resolveProperties(transaction).then(function(tx) {
              if (tx.from != null) {
                if (lib$6.getAddress(tx.from) !== _this.address) {
                  throw new Error("transaction from address mismatch");
                }
                delete tx.from;
              }
              var signature2 = _this._signingKey().signDigest(lib$4.keccak256(lib$g.serialize(tx)));
              return lib$g.serialize(tx, signature2);
            });
          };
          Wallet2.prototype.signMessage = function(message) {
            return Promise.resolve(lib$1.joinSignature(this._signingKey().signDigest(lib$9.hashMessage(message))));
          };
          Wallet2.prototype.encrypt = function(password, options, progressCallback) {
            if (typeof options === "function" && !progressCallback) {
              progressCallback = options;
              options = {};
            }
            if (progressCallback && typeof progressCallback !== "function") {
              throw new Error("invalid callback");
            }
            if (!options) {
              options = {};
            }
            return lib$i.encryptKeystore(this, password, options, progressCallback);
          };
          Wallet2.createRandom = function(options) {
            var entropy = browser$6.randomBytes(16);
            if (!options) {
              options = {};
            }
            if (options.extraEntropy) {
              entropy = lib$1.arrayify(lib$1.hexDataSlice(lib$4.keccak256(lib$1.concat([entropy, options.extraEntropy])), 0, 16));
            }
            var mnemonic = lib$h.entropyToMnemonic(entropy, options.locale);
            return Wallet2.fromMnemonic(mnemonic, options.path, options.locale);
          };
          Wallet2.fromEncryptedJson = function(json, password, progressCallback) {
            return lib$i.decryptJsonWallet(json, password, progressCallback).then(function(account) {
              return new Wallet2(account);
            });
          };
          Wallet2.fromEncryptedJsonSync = function(json, password) {
            return new Wallet2(lib$i.decryptJsonWalletSync(json, password));
          };
          Wallet2.fromMnemonic = function(mnemonic, path, wordlist2) {
            if (!path) {
              path = lib$h.defaultPath;
            }
            return new Wallet2(lib$h.HDNode.fromMnemonic(mnemonic, null, wordlist2).derivePath(path));
          };
          return Wallet2;
        }(lib$c.Signer);
        exports3.Wallet = Wallet;
        function verifyMessage(message, signature2) {
          return lib$g.recoverAddress(lib$9.hashMessage(message), signature2);
        }
        exports3.verifyMessage = verifyMessage;
      });
      var index$j = unwrapExports(lib$j);
      var lib_1$j = lib$j.Wallet;
      var lib_2$i = lib$j.verifyMessage;
      var _version$E = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "networks/5.0.1";
      });
      var _version$F = unwrapExports(_version$E);
      var _version_1$k = _version$E.version;
      var lib$k = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$E.version);
        function ethDefaultProvider(network) {
          return function(providers, options) {
            if (options == null) {
              options = {};
            }
            var providerList = [];
            if (providers.InfuraProvider) {
              try {
                providerList.push(new providers.InfuraProvider(network, options.infura));
              } catch (error) {
              }
            }
            if (providers.EtherscanProvider) {
              try {
                providerList.push(new providers.EtherscanProvider(network, options.etherscan));
              } catch (error) {
              }
            }
            if (providers.AlchemyProvider) {
              try {
                providerList.push(new providers.AlchemyProvider(network, options.alchemy));
              } catch (error) {
              }
            }
            if (providers.CloudflareProvider) {
              try {
                providerList.push(new providers.CloudflareProvider(network));
              } catch (error) {
              }
            }
            if (providerList.length === 0) {
              return null;
            }
            if (providers.FallbackProvider) {
              var quorum = 1;
              if (options.quorum != null) {
                quorum = options.quorum;
              } else if (network === "homestead") {
                quorum = 2;
              }
              return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
          };
        }
        function etcDefaultProvider(url, network) {
          return function(providers, options) {
            if (providers.JsonRpcProvider) {
              return new providers.JsonRpcProvider(url, network);
            }
            return null;
          };
        }
        var homestead = {
          chainId: 1,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "homestead",
          _defaultProvider: ethDefaultProvider("homestead")
        };
        var ropsten = {
          chainId: 3,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "ropsten",
          _defaultProvider: ethDefaultProvider("ropsten")
        };
        var classicMordor = {
          chainId: 63,
          name: "classicMordor",
          _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
        };
        var networks = {
          unspecified: {
            chainId: 0,
            name: "unspecified"
          },
          homestead,
          mainnet: homestead,
          morden: {
            chainId: 2,
            name: "morden"
          },
          ropsten,
          testnet: ropsten,
          rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
          },
          kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
          },
          goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
          },
          classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/etc", "classic")
          },
          classicMorden: {
            chainId: 62,
            name: "classicMorden"
          },
          classicMordor,
          classicTestnet: classicMordor,
          classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/kotti", "classicKotti")
          }
        };
        function getNetwork(network) {
          if (network == null) {
            return null;
          }
          if (typeof network === "number") {
            for (var name_1 in networks) {
              var standard_1 = networks[name_1];
              if (standard_1.chainId === network) {
                return {
                  name: standard_1.name,
                  chainId: standard_1.chainId,
                  ensAddress: standard_1.ensAddress || null,
                  _defaultProvider: standard_1._defaultProvider || null
                };
              }
            }
            return {
              chainId: network,
              name: "unknown"
            };
          }
          if (typeof network === "string") {
            var standard_2 = networks[network];
            if (standard_2 == null) {
              return null;
            }
            return {
              name: standard_2.name,
              chainId: standard_2.chainId,
              ensAddress: standard_2.ensAddress,
              _defaultProvider: standard_2._defaultProvider || null
            };
          }
          var standard = networks[network.name];
          if (!standard) {
            if (typeof network.chainId !== "number") {
              logger.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
          }
          if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            logger.throwArgumentError("network chainId mismatch", "network", network);
          }
          return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: network.ensAddress || standard.ensAddress || null,
            _defaultProvider: network._defaultProvider || standard._defaultProvider || null
          };
        }
        exports3.getNetwork = getNetwork;
      });
      var index$k = unwrapExports(lib$k);
      var lib_1$k = lib$k.getNetwork;
      var browser$8 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        function decode(textData) {
          textData = atob(textData);
          var data = [];
          for (var i2 = 0; i2 < textData.length; i2++) {
            data.push(textData.charCodeAt(i2));
          }
          return lib$1.arrayify(data);
        }
        exports3.decode = decode;
        function encode(data) {
          data = lib$1.arrayify(data);
          var textData = "";
          for (var i2 = 0; i2 < data.length; i2++) {
            textData += String.fromCharCode(data[i2]);
          }
          return btoa(textData);
        }
        exports3.encode = encode;
      });
      var browser$9 = unwrapExports(browser$8);
      var browser_1$4 = browser$8.decode;
      var browser_2$3 = browser$8.encode;
      var _version$G = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "web/5.0.1";
      });
      var _version$H = unwrapExports(_version$G);
      var _version_1$l = _version$G.version;
      var browserGeturl = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        function getUrl(href, options) {
          return __awaiter(this, void 0, void 0, function() {
            var request, response, body, headers;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (options == null) {
                    options = {};
                  }
                  request = {
                    method: options.method || "GET",
                    headers: options.headers || {},
                    body: options.body || void 0,
                    mode: "cors",
                    cache: "no-cache",
                    credentials: "same-origin",
                    redirect: "follow",
                    referrer: "client"
                  };
                  return [4, fetch(href, request)];
                case 1:
                  response = _a.sent();
                  return [4, response.text()];
                case 2:
                  body = _a.sent();
                  headers = {};
                  if (response.headers.forEach) {
                    response.headers.forEach(function(value, key2) {
                      headers[key2.toLowerCase()] = value;
                    });
                  } else {
                    response.headers.keys().forEach(function(key2) {
                      headers[key2.toLowerCase()] = response.headers.get(key2);
                    });
                  }
                  return [2, {
                    headers,
                    statusCode: response.status,
                    statusMessage: response.statusText,
                    body
                  }];
              }
            });
          });
        }
        exports3.getUrl = getUrl;
      });
      var browserGeturl$1 = unwrapExports(browserGeturl);
      var browserGeturl_1 = browserGeturl.getUrl;
      var lib$l = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$G.version);
        function fetchJson(connection, json, processFunc) {
          var headers = {};
          var url = null;
          var options = {
            method: "GET"
          };
          var allow304 = false;
          var timeout = 2 * 60 * 1e3;
          if (typeof connection === "string") {
            url = connection;
          } else if (typeof connection === "object") {
            if (connection == null || connection.url == null) {
              logger.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof connection.timeout === "number" && connection.timeout > 0) {
              timeout = connection.timeout;
            }
            if (connection.headers) {
              for (var key2 in connection.headers) {
                headers[key2.toLowerCase()] = {key: key2, value: String(connection.headers[key2])};
                if (["if-none-match", "if-modified-since"].indexOf(key2.toLowerCase()) >= 0) {
                  allow304 = true;
                }
              }
            }
            if (connection.user != null && connection.password != null) {
              if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                logger.throwError("basic authentication requires a secure https url", lib.Logger.errors.INVALID_ARGUMENT, {argument: "url", url, user: connection.user, password: "[REDACTED]"});
              }
              var authorization = connection.user + ":" + connection.password;
              headers["authorization"] = {
                key: "Authorization",
                value: "Basic " + browser$8.encode(lib$8.toUtf8Bytes(authorization))
              };
            }
          }
          if (json) {
            options.method = "POST";
            options.body = json;
            headers["content-type"] = {key: "Content-Type", value: "application/json"};
          }
          var flatHeaders = {};
          Object.keys(headers).forEach(function(key3) {
            var header = headers[key3];
            flatHeaders[header.key] = header.value;
          });
          options.headers = flatHeaders;
          var runningTimeout = function() {
            var timer = null;
            var promise = new Promise(function(resolve, reject) {
              if (timeout) {
                timer = setTimeout(function() {
                  if (timer == null) {
                    return;
                  }
                  timer = null;
                  reject(logger.makeError("timeout", lib.Logger.errors.TIMEOUT, {
                    requestBody: options.body || null,
                    requestMethod: options.method,
                    timeout,
                    url
                  }));
                }, timeout);
              }
            });
            var cancel = function() {
              if (timer == null) {
                return;
              }
              clearTimeout(timer);
              timer = null;
            };
            return {promise, cancel};
          }();
          var runningFetch = function() {
            return __awaiter(this, void 0, void 0, function() {
              var response, error_1, body, json2, error_2;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    response = null;
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4, browserGeturl.getUrl(url, options)];
                  case 2:
                    response = _a.sent();
                    return [3, 4];
                  case 3:
                    error_1 = _a.sent();
                    response = error_1.response;
                    if (response == null) {
                      runningTimeout.cancel();
                      logger.throwError("missing response", lib.Logger.errors.SERVER_ERROR, {
                        requestBody: options.body || null,
                        requestMethod: options.method,
                        serverError: error_1,
                        url
                      });
                    }
                    return [3, 4];
                  case 4:
                    body = response.body;
                    if (allow304 && response.statusCode === 304) {
                      body = null;
                    } else if (response.statusCode < 200 || response.statusCode >= 300) {
                      runningTimeout.cancel();
                      logger.throwError("bad response", lib.Logger.errors.SERVER_ERROR, {
                        status: response.statusCode,
                        headers: response.headers,
                        body,
                        requestBody: options.body || null,
                        requestMethod: options.method,
                        url
                      });
                    }
                    runningTimeout.cancel();
                    json2 = null;
                    if (body != null) {
                      try {
                        json2 = JSON.parse(body);
                      } catch (error) {
                        logger.throwError("invalid JSON", lib.Logger.errors.SERVER_ERROR, {
                          body,
                          error,
                          requestBody: options.body || null,
                          requestMethod: options.method,
                          url
                        });
                      }
                    }
                    if (!processFunc)
                      return [3, 8];
                    _a.label = 5;
                  case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4, processFunc(json2, response)];
                  case 6:
                    json2 = _a.sent();
                    return [3, 8];
                  case 7:
                    error_2 = _a.sent();
                    logger.throwError("processing response error", lib.Logger.errors.SERVER_ERROR, {
                      body: json2,
                      error: error_2,
                      requestBody: options.body || null,
                      requestMethod: options.method,
                      url
                    });
                    return [3, 8];
                  case 8:
                    return [2, json2];
                }
              });
            });
          }();
          return Promise.race([runningTimeout.promise, runningFetch]);
        }
        exports3.fetchJson = fetchJson;
        function poll(func, options) {
          if (!options) {
            options = {};
          }
          options = lib$3.shallowCopy(options);
          if (options.floor == null) {
            options.floor = 0;
          }
          if (options.ceiling == null) {
            options.ceiling = 1e4;
          }
          if (options.interval == null) {
            options.interval = 250;
          }
          return new Promise(function(resolve, reject) {
            var timer = null;
            var done = false;
            var cancel = function() {
              if (done) {
                return false;
              }
              done = true;
              if (timer) {
                clearTimeout(timer);
              }
              return true;
            };
            if (options.timeout) {
              timer = setTimeout(function() {
                if (cancel()) {
                  reject(new Error("timeout"));
                }
              }, options.timeout);
            }
            var retryLimit = options.retryLimit;
            var attempt = 0;
            function check() {
              return func().then(function(result) {
                if (result !== void 0) {
                  if (cancel()) {
                    resolve(result);
                  }
                } else if (options.oncePoll) {
                  options.oncePoll.once("poll", check);
                } else if (options.onceBlock) {
                  options.onceBlock.once("block", check);
                } else if (!done) {
                  attempt++;
                  if (attempt > retryLimit) {
                    if (cancel()) {
                      reject(new Error("retry limit reached"));
                    }
                    return;
                  }
                  var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                  if (timeout < options.floor) {
                    timeout = options.floor;
                  }
                  if (timeout > options.ceiling) {
                    timeout = options.ceiling;
                  }
                  setTimeout(check, timeout);
                }
                return null;
              }, function(error) {
                if (cancel()) {
                  reject(error);
                }
              });
            }
            check();
          });
        }
        exports3.poll = poll;
      });
      var index$l = unwrapExports(lib$l);
      var lib_1$l = lib$l.fetchJson;
      var lib_2$j = lib$l.poll;
      var _version$I = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "providers/5.0.4";
      });
      var _version$J = unwrapExports(_version$I);
      var _version_1$m = _version$I.version;
      var formatter = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        var Formatter = function() {
          function Formatter2() {
            var _newTarget = this.constructor;
            logger.checkNew(_newTarget, Formatter2);
            this.formats = this.getDefaultFormats();
          }
          Formatter2.prototype.getDefaultFormats = function() {
            var _this = this;
            var formats = {};
            var address2 = this.address.bind(this);
            var bigNumber = this.bigNumber.bind(this);
            var blockTag = this.blockTag.bind(this);
            var data = this.data.bind(this);
            var hash = this.hash.bind(this);
            var hex = this.hex.bind(this);
            var number2 = this.number.bind(this);
            var strictData = function(v) {
              return _this.data(v, true);
            };
            formats.transaction = {
              hash,
              blockHash: Formatter2.allowNull(hash, null),
              blockNumber: Formatter2.allowNull(number2, null),
              transactionIndex: Formatter2.allowNull(number2, null),
              confirmations: Formatter2.allowNull(number2, null),
              from: address2,
              gasPrice: bigNumber,
              gasLimit: bigNumber,
              to: Formatter2.allowNull(address2, null),
              value: bigNumber,
              nonce: number2,
              data,
              r: Formatter2.allowNull(this.uint256),
              s: Formatter2.allowNull(this.uint256),
              v: Formatter2.allowNull(number2),
              creates: Formatter2.allowNull(address2, null),
              raw: Formatter2.allowNull(data)
            };
            formats.transactionRequest = {
              from: Formatter2.allowNull(address2),
              nonce: Formatter2.allowNull(number2),
              gasLimit: Formatter2.allowNull(bigNumber),
              gasPrice: Formatter2.allowNull(bigNumber),
              to: Formatter2.allowNull(address2),
              value: Formatter2.allowNull(bigNumber),
              data: Formatter2.allowNull(strictData)
            };
            formats.receiptLog = {
              transactionIndex: number2,
              blockNumber: number2,
              transactionHash: hash,
              address: address2,
              topics: Formatter2.arrayOf(hash),
              data,
              logIndex: number2,
              blockHash: hash
            };
            formats.receipt = {
              to: Formatter2.allowNull(this.address, null),
              from: Formatter2.allowNull(this.address, null),
              contractAddress: Formatter2.allowNull(address2, null),
              transactionIndex: number2,
              root: Formatter2.allowNull(hash),
              gasUsed: bigNumber,
              logsBloom: Formatter2.allowNull(data),
              blockHash: hash,
              transactionHash: hash,
              logs: Formatter2.arrayOf(this.receiptLog.bind(this)),
              blockNumber: number2,
              confirmations: Formatter2.allowNull(number2, null),
              cumulativeGasUsed: bigNumber,
              status: Formatter2.allowNull(number2)
            };
            formats.block = {
              hash,
              parentHash: hash,
              number: number2,
              timestamp: number2,
              nonce: Formatter2.allowNull(hex),
              difficulty: this.difficulty.bind(this),
              gasLimit: bigNumber,
              gasUsed: bigNumber,
              miner: address2,
              extraData: data,
              transactions: Formatter2.allowNull(Formatter2.arrayOf(hash))
            };
            formats.blockWithTransactions = lib$3.shallowCopy(formats.block);
            formats.blockWithTransactions.transactions = Formatter2.allowNull(Formatter2.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
              fromBlock: Formatter2.allowNull(blockTag, void 0),
              toBlock: Formatter2.allowNull(blockTag, void 0),
              blockHash: Formatter2.allowNull(hash, void 0),
              address: Formatter2.allowNull(address2, void 0),
              topics: Formatter2.allowNull(this.topics.bind(this), void 0)
            };
            formats.filterLog = {
              blockNumber: Formatter2.allowNull(number2),
              blockHash: Formatter2.allowNull(hash),
              transactionIndex: number2,
              removed: Formatter2.allowNull(this.boolean.bind(this)),
              address: address2,
              data: Formatter2.allowFalsish(data, "0x"),
              topics: Formatter2.arrayOf(hash),
              transactionHash: hash,
              logIndex: number2
            };
            return formats;
          };
          Formatter2.prototype.number = function(number2) {
            return lib$2.BigNumber.from(number2).toNumber();
          };
          Formatter2.prototype.bigNumber = function(value) {
            return lib$2.BigNumber.from(value);
          };
          Formatter2.prototype.boolean = function(value) {
            if (typeof value === "boolean") {
              return value;
            }
            if (typeof value === "string") {
              value = value.toLowerCase();
              if (value === "true") {
                return true;
              }
              if (value === "false") {
                return false;
              }
            }
            throw new Error("invalid boolean - " + value);
          };
          Formatter2.prototype.hex = function(value, strict) {
            if (typeof value === "string") {
              if (!strict && value.substring(0, 2) !== "0x") {
                value = "0x" + value;
              }
              if (lib$1.isHexString(value)) {
                return value.toLowerCase();
              }
            }
            return logger.throwArgumentError("invalid hash", "value", value);
          };
          Formatter2.prototype.data = function(value, strict) {
            var result = this.hex(value, strict);
            if (result.length % 2 !== 0) {
              throw new Error("invalid data; odd-length - " + value);
            }
            return result;
          };
          Formatter2.prototype.address = function(value) {
            return lib$6.getAddress(value);
          };
          Formatter2.prototype.callAddress = function(value) {
            if (!lib$1.isHexString(value, 32)) {
              return null;
            }
            var address2 = lib$6.getAddress(lib$1.hexDataSlice(value, 12));
            return address2 === lib$7.AddressZero ? null : address2;
          };
          Formatter2.prototype.contractAddress = function(value) {
            return lib$6.getContractAddress(value);
          };
          Formatter2.prototype.blockTag = function(blockTag) {
            if (blockTag == null) {
              return "latest";
            }
            if (blockTag === "earliest") {
              return "0x0";
            }
            if (blockTag === "latest" || blockTag === "pending") {
              return blockTag;
            }
            if (typeof blockTag === "number" || lib$1.isHexString(blockTag)) {
              return lib$1.hexValue(blockTag);
            }
            throw new Error("invalid blockTag");
          };
          Formatter2.prototype.hash = function(value, strict) {
            var result = this.hex(value, strict);
            if (lib$1.hexDataLength(result) !== 32) {
              return logger.throwArgumentError("invalid hash", "value", value);
            }
            return result;
          };
          Formatter2.prototype.difficulty = function(value) {
            if (value == null) {
              return null;
            }
            var v = lib$2.BigNumber.from(value);
            try {
              return v.toNumber();
            } catch (error) {
            }
            return null;
          };
          Formatter2.prototype.uint256 = function(value) {
            if (!lib$1.isHexString(value)) {
              throw new Error("invalid uint256");
            }
            return lib$1.hexZeroPad(value, 32);
          };
          Formatter2.prototype._block = function(value, format) {
            if (value.author != null && value.miner == null) {
              value.miner = value.author;
            }
            return Formatter2.check(format, value);
          };
          Formatter2.prototype.block = function(value) {
            return this._block(value, this.formats.block);
          };
          Formatter2.prototype.blockWithTransactions = function(value) {
            return this._block(value, this.formats.blockWithTransactions);
          };
          Formatter2.prototype.transactionRequest = function(value) {
            return Formatter2.check(this.formats.transactionRequest, value);
          };
          Formatter2.prototype.transactionResponse = function(transaction) {
            if (transaction.gas != null && transaction.gasLimit == null) {
              transaction.gasLimit = transaction.gas;
            }
            if (transaction.to && lib$2.BigNumber.from(transaction.to).isZero()) {
              transaction.to = "0x0000000000000000000000000000000000000000";
            }
            if (transaction.input != null && transaction.data == null) {
              transaction.data = transaction.input;
            }
            if (transaction.to == null && transaction.creates == null) {
              transaction.creates = this.contractAddress(transaction);
            }
            var result = Formatter2.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
              var chainId = transaction.chainId;
              if (lib$1.isHexString(chainId)) {
                chainId = lib$2.BigNumber.from(chainId).toNumber();
              }
              result.chainId = chainId;
            } else {
              var chainId = transaction.networkId;
              if (chainId == null && result.v == null) {
                chainId = transaction.chainId;
              }
              if (lib$1.isHexString(chainId)) {
                chainId = lib$2.BigNumber.from(chainId).toNumber();
              }
              if (typeof chainId !== "number" && result.v != null) {
                chainId = (result.v - 35) / 2;
                if (chainId < 0) {
                  chainId = 0;
                }
                chainId = parseInt(chainId);
              }
              if (typeof chainId !== "number") {
                chainId = 0;
              }
              result.chainId = chainId;
            }
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
              result.blockHash = null;
            }
            return result;
          };
          Formatter2.prototype.transaction = function(value) {
            return lib$g.parse(value);
          };
          Formatter2.prototype.receiptLog = function(value) {
            return Formatter2.check(this.formats.receiptLog, value);
          };
          Formatter2.prototype.receipt = function(value) {
            var result = Formatter2.check(this.formats.receipt, value);
            if (value.status != null) {
              result.byzantium = true;
            }
            return result;
          };
          Formatter2.prototype.topics = function(value) {
            var _this = this;
            if (Array.isArray(value)) {
              return value.map(function(v) {
                return _this.topics(v);
              });
            } else if (value != null) {
              return this.hash(value, true);
            }
            return null;
          };
          Formatter2.prototype.filter = function(value) {
            return Formatter2.check(this.formats.filter, value);
          };
          Formatter2.prototype.filterLog = function(value) {
            return Formatter2.check(this.formats.filterLog, value);
          };
          Formatter2.check = function(format, object) {
            var result = {};
            for (var key2 in format) {
              try {
                var value = format[key2](object[key2]);
                if (value !== void 0) {
                  result[key2] = value;
                }
              } catch (error) {
                error.checkKey = key2;
                error.checkValue = object[key2];
                throw error;
              }
            }
            return result;
          };
          Formatter2.allowNull = function(format, nullValue) {
            return function(value) {
              if (value == null) {
                return nullValue;
              }
              return format(value);
            };
          };
          Formatter2.allowFalsish = function(format, replaceValue) {
            return function(value) {
              if (!value) {
                return replaceValue;
              }
              return format(value);
            };
          };
          Formatter2.arrayOf = function(format) {
            return function(array2) {
              if (!Array.isArray(array2)) {
                throw new Error("not an array");
              }
              var result = [];
              array2.forEach(function(value) {
                result.push(format(value));
              });
              return result;
            };
          };
          return Formatter2;
        }();
        exports3.Formatter = Formatter;
      });
      var formatter$1 = unwrapExports(formatter);
      var formatter_1 = formatter.Formatter;
      var baseProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        function checkTopic(topic) {
          if (topic == null) {
            return "null";
          }
          if (lib$1.hexDataLength(topic) !== 32) {
            logger.throwArgumentError("invalid topic", "topic", topic);
          }
          return topic.toLowerCase();
        }
        function serializeTopics(topics) {
          topics = topics.slice();
          while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
          }
          return topics.map(function(topic) {
            if (Array.isArray(topic)) {
              var unique_1 = {};
              topic.forEach(function(topic2) {
                unique_1[checkTopic(topic2)] = true;
              });
              var sorted = Object.keys(unique_1);
              sorted.sort();
              return sorted.join("|");
            } else {
              return checkTopic(topic);
            }
          }).join("&");
        }
        function deserializeTopics(data) {
          if (data === "") {
            return [];
          }
          return data.split(/&/g).map(function(topic) {
            if (topic === "") {
              return [];
            }
            var comps = topic.split("|").map(function(topic2) {
              return topic2 === "null" ? null : topic2;
            });
            return comps.length === 1 ? comps[0] : comps;
          });
        }
        function getEventTag(eventName) {
          if (typeof eventName === "string") {
            eventName = eventName.toLowerCase();
            if (lib$1.hexDataLength(eventName) === 32) {
              return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
              return eventName;
            }
          } else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
          } else if (lib$b.ForkEvent.isForkEvent(eventName)) {
            logger.warn("not implemented");
            throw new Error("not implemented");
          } else if (eventName && typeof eventName === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
          }
          throw new Error("invalid event - " + eventName);
        }
        function getTime() {
          return new Date().getTime();
        }
        function stall(duration) {
          return new Promise(function(resolve) {
            setTimeout(resolve, duration);
          });
        }
        var PollableEvents = ["block", "network", "pending", "poll"];
        var Event = function() {
          function Event2(tag, listener, once) {
            lib$3.defineReadOnly(this, "tag", tag);
            lib$3.defineReadOnly(this, "listener", listener);
            lib$3.defineReadOnly(this, "once", once);
          }
          Object.defineProperty(Event2.prototype, "event", {
            get: function() {
              switch (this.type) {
                case "tx":
                  return this.hash;
                case "filter":
                  return this.filter;
              }
              return this.tag;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Event2.prototype, "type", {
            get: function() {
              return this.tag.split(":")[0];
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Event2.prototype, "hash", {
            get: function() {
              var comps = this.tag.split(":");
              if (comps[0] !== "tx") {
                return null;
              }
              return comps[1];
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(Event2.prototype, "filter", {
            get: function() {
              var comps = this.tag.split(":");
              if (comps[0] !== "filter") {
                return null;
              }
              var address2 = comps[1];
              var topics = deserializeTopics(comps[2]);
              var filter = {};
              if (topics.length > 0) {
                filter.topics = topics;
              }
              if (address2 && address2 !== "*") {
                filter.address = address2;
              }
              return filter;
            },
            enumerable: true,
            configurable: true
          });
          Event2.prototype.pollable = function() {
            return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
          };
          return Event2;
        }();
        exports3.Event = Event;
        var defaultFormatter = null;
        var nextPollId = 1;
        var BaseProvider = function(_super) {
          __extends(BaseProvider2, _super);
          function BaseProvider2(network) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, lib$b.Provider);
            _this = _super.call(this) || this;
            _this._events = [];
            _this._emitted = {block: -2};
            _this.formatter = _newTarget.getFormatter();
            lib$3.defineReadOnly(_this, "anyNetwork", network === "any");
            if (_this.anyNetwork) {
              network = _this.detectNetwork();
            }
            if (network instanceof Promise) {
              _this._networkPromise = network;
              network.catch(function(error) {
              });
              _this._ready().catch(function(error) {
              });
            } else {
              var knownNetwork = lib$3.getStatic(_newTarget, "getNetwork")(network);
              if (knownNetwork) {
                lib$3.defineReadOnly(_this, "_network", knownNetwork);
                _this.emit("network", knownNetwork, null);
              } else {
                logger.throwArgumentError("invalid network", "network", network);
              }
            }
            _this._maxInternalBlockNumber = -1024;
            _this._lastBlockNumber = -2;
            _this._pollingInterval = 4e3;
            _this._fastQueryDate = 0;
            return _this;
          }
          BaseProvider2.prototype._ready = function() {
            return __awaiter(this, void 0, void 0, function() {
              var network, error_1;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(this._network == null))
                      return [3, 7];
                    network = null;
                    if (!this._networkPromise)
                      return [3, 4];
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4, this._networkPromise];
                  case 2:
                    network = _a.sent();
                    return [3, 4];
                  case 3:
                    error_1 = _a.sent();
                    return [3, 4];
                  case 4:
                    if (!(network == null))
                      return [3, 6];
                    return [4, this.detectNetwork()];
                  case 5:
                    network = _a.sent();
                    _a.label = 6;
                  case 6:
                    if (!network) {
                      logger.throwError("no network detected", lib.Logger.errors.UNKNOWN_ERROR, {});
                    }
                    if (this._network == null) {
                      if (this.anyNetwork) {
                        this._network = network;
                      } else {
                        lib$3.defineReadOnly(this, "_network", network);
                      }
                      this.emit("network", network, null);
                    }
                    _a.label = 7;
                  case 7:
                    return [2, this._network];
                }
              });
            });
          };
          Object.defineProperty(BaseProvider2.prototype, "ready", {
            get: function() {
              var _this = this;
              return lib$l.poll(function() {
                return _this._ready().then(function(network) {
                  return network;
                }, function(error) {
                  if (error.code === lib.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                    return void 0;
                  }
                  throw error;
                });
              });
            },
            enumerable: true,
            configurable: true
          });
          BaseProvider2.getFormatter = function() {
            if (defaultFormatter == null) {
              defaultFormatter = new formatter.Formatter();
            }
            return defaultFormatter;
          };
          BaseProvider2.getNetwork = function(network) {
            return lib$k.getNetwork(network == null ? "homestead" : network);
          };
          BaseProvider2.prototype._getInternalBlockNumber = function(maxAge) {
            return __awaiter(this, void 0, void 0, function() {
              var internalBlockNumber, result, reqTime, checkInternalBlockNumber;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this._ready()];
                  case 1:
                    _a.sent();
                    internalBlockNumber = this._internalBlockNumber;
                    if (!(maxAge > 0 && this._internalBlockNumber))
                      return [3, 3];
                    return [4, internalBlockNumber];
                  case 2:
                    result = _a.sent();
                    if (getTime() - result.respTime <= maxAge) {
                      return [2, result.blockNumber];
                    }
                    _a.label = 3;
                  case 3:
                    reqTime = getTime();
                    checkInternalBlockNumber = lib$3.resolveProperties({
                      blockNumber: this.perform("getBlockNumber", {}),
                      networkError: this.getNetwork().then(function(network) {
                        return null;
                      }, function(error) {
                        return error;
                      })
                    }).then(function(_a2) {
                      var blockNumber = _a2.blockNumber, networkError = _a2.networkError;
                      if (networkError) {
                        if (_this._internalBlockNumber === checkInternalBlockNumber) {
                          _this._internalBlockNumber = null;
                        }
                        throw networkError;
                      }
                      var respTime = getTime();
                      blockNumber = lib$2.BigNumber.from(blockNumber).toNumber();
                      if (blockNumber < _this._maxInternalBlockNumber) {
                        blockNumber = _this._maxInternalBlockNumber;
                      }
                      _this._maxInternalBlockNumber = blockNumber;
                      _this._setFastBlockNumber(blockNumber);
                      return {blockNumber, reqTime, respTime};
                    });
                    this._internalBlockNumber = checkInternalBlockNumber;
                    return [4, checkInternalBlockNumber];
                  case 4:
                    return [2, _a.sent().blockNumber];
                }
              });
            });
          };
          BaseProvider2.prototype.poll = function() {
            return __awaiter(this, void 0, void 0, function() {
              var pollId, runners, blockNumber, i2;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    pollId = nextPollId++;
                    runners = [];
                    return [4, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];
                  case 1:
                    blockNumber = _a.sent();
                    this._setFastBlockNumber(blockNumber);
                    this.emit("poll", pollId, blockNumber);
                    if (blockNumber === this._lastBlockNumber) {
                      this.emit("didPoll", pollId);
                      return [2];
                    }
                    if (this._emitted.block === -2) {
                      this._emitted.block = blockNumber - 1;
                    }
                    if (Math.abs(this._emitted.block - blockNumber) > 1e3) {
                      logger.warn("network block skew detected; skipping block events");
                      this.emit("error", logger.makeError("network block skew detected", lib.Logger.errors.NETWORK_ERROR, {
                        blockNumber,
                        event: "blockSkew",
                        previousBlockNumber: this._emitted.block
                      }));
                      this.emit("block", blockNumber);
                    } else {
                      for (i2 = this._emitted.block + 1; i2 <= blockNumber; i2++) {
                        this.emit("block", i2);
                      }
                    }
                    if (this._emitted.block !== blockNumber) {
                      this._emitted.block = blockNumber;
                      Object.keys(this._emitted).forEach(function(key2) {
                        if (key2 === "block") {
                          return;
                        }
                        var eventBlockNumber = _this._emitted[key2];
                        if (eventBlockNumber === "pending") {
                          return;
                        }
                        if (blockNumber - eventBlockNumber > 12) {
                          delete _this._emitted[key2];
                        }
                      });
                    }
                    if (this._lastBlockNumber === -2) {
                      this._lastBlockNumber = blockNumber - 1;
                    }
                    this._events.forEach(function(event) {
                      switch (event.type) {
                        case "tx": {
                          var hash_22 = event.hash;
                          var runner = _this.getTransactionReceipt(hash_22).then(function(receipt) {
                            if (!receipt || receipt.blockNumber == null) {
                              return null;
                            }
                            _this._emitted["t:" + hash_22] = receipt.blockNumber;
                            _this.emit(hash_22, receipt);
                            return null;
                          }).catch(function(error) {
                            _this.emit("error", error);
                          });
                          runners.push(runner);
                          break;
                        }
                        case "filter": {
                          var filter_1 = event.filter;
                          filter_1.fromBlock = _this._lastBlockNumber + 1;
                          filter_1.toBlock = blockNumber;
                          var runner = _this.getLogs(filter_1).then(function(logs) {
                            if (logs.length === 0) {
                              return;
                            }
                            logs.forEach(function(log) {
                              _this._emitted["b:" + log.blockHash] = log.blockNumber;
                              _this._emitted["t:" + log.transactionHash] = log.blockNumber;
                              _this.emit(filter_1, log);
                            });
                          }).catch(function(error) {
                            _this.emit("error", error);
                          });
                          runners.push(runner);
                          break;
                        }
                      }
                    });
                    this._lastBlockNumber = blockNumber;
                    Promise.all(runners).then(function() {
                      _this.emit("didPoll", pollId);
                    });
                    return [2, null];
                }
              });
            });
          };
          BaseProvider2.prototype.resetEventsBlock = function(blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
              this.poll();
            }
          };
          Object.defineProperty(BaseProvider2.prototype, "network", {
            get: function() {
              return this._network;
            },
            enumerable: true,
            configurable: true
          });
          BaseProvider2.prototype.detectNetwork = function() {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, logger.throwError("provider does not support network detection", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "provider.detectNetwork"
                })];
              });
            });
          };
          BaseProvider2.prototype.getNetwork = function() {
            return __awaiter(this, void 0, void 0, function() {
              var network, currentNetwork, error;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this._ready()];
                  case 1:
                    network = _a.sent();
                    return [4, this.detectNetwork()];
                  case 2:
                    currentNetwork = _a.sent();
                    if (!(network.chainId !== currentNetwork.chainId))
                      return [3, 5];
                    if (!this.anyNetwork)
                      return [3, 4];
                    this._network = currentNetwork;
                    this._lastBlockNumber = -2;
                    this._fastBlockNumber = null;
                    this._fastBlockNumberPromise = null;
                    this._fastQueryDate = 0;
                    this._emitted.block = -2;
                    this._maxInternalBlockNumber = -1024;
                    this._internalBlockNumber = null;
                    this.emit("network", currentNetwork, network);
                    return [4, stall(0)];
                  case 3:
                    _a.sent();
                    return [2, this._network];
                  case 4:
                    error = logger.makeError("underlying network changed", lib.Logger.errors.NETWORK_ERROR, {
                      event: "changed",
                      network,
                      detectedNetwork: currentNetwork
                    });
                    this.emit("error", error);
                    throw error;
                  case 5:
                    return [2, network];
                }
              });
            });
          };
          Object.defineProperty(BaseProvider2.prototype, "blockNumber", {
            get: function() {
              var _this = this;
              this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function(blockNumber) {
                _this._setFastBlockNumber(blockNumber);
              });
              return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(BaseProvider2.prototype, "polling", {
            get: function() {
              return this._poller != null;
            },
            set: function(value) {
              var _this = this;
              if (value && !this._poller) {
                this._poller = setInterval(this.poll.bind(this), this.pollingInterval);
                if (!this._bootstrapPoll) {
                  this._bootstrapPoll = setTimeout(function() {
                    _this.poll();
                    _this._bootstrapPoll = setTimeout(function() {
                      if (!_this._poller) {
                        _this.poll();
                      }
                      _this._bootstrapPoll = null;
                    }, _this.pollingInterval);
                  }, 0);
                }
              } else if (!value && this._poller) {
                clearInterval(this._poller);
                this._poller = null;
              }
            },
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(BaseProvider2.prototype, "pollingInterval", {
            get: function() {
              return this._pollingInterval;
            },
            set: function(value) {
              var _this = this;
              if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
                throw new Error("invalid polling interval");
              }
              this._pollingInterval = value;
              if (this._poller) {
                clearInterval(this._poller);
                this._poller = setInterval(function() {
                  _this.poll();
                }, this._pollingInterval);
              }
            },
            enumerable: true,
            configurable: true
          });
          BaseProvider2.prototype._getFastBlockNumber = function() {
            var _this = this;
            var now = getTime();
            if (now - this._fastQueryDate > 2 * this._pollingInterval) {
              this._fastQueryDate = now;
              this._fastBlockNumberPromise = this.getBlockNumber().then(function(blockNumber) {
                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {
                  _this._fastBlockNumber = blockNumber;
                }
                return _this._fastBlockNumber;
              });
            }
            return this._fastBlockNumberPromise;
          };
          BaseProvider2.prototype._setFastBlockNumber = function(blockNumber) {
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
              return;
            }
            this._fastQueryDate = getTime();
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
              this._fastBlockNumber = blockNumber;
              this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
          };
          BaseProvider2.prototype.waitForTransaction = function(transactionHash, confirmations, timeout) {
            return __awaiter(this, void 0, void 0, function() {
              var receipt;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (confirmations == null) {
                      confirmations = 1;
                    }
                    return [4, this.getTransactionReceipt(transactionHash)];
                  case 1:
                    receipt = _a.sent();
                    if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                      return [2, receipt];
                    }
                    return [2, new Promise(function(resolve, reject) {
                      var timer = null;
                      var done = false;
                      var handler = function(receipt2) {
                        if (receipt2.confirmations < confirmations) {
                          return;
                        }
                        if (timer) {
                          clearTimeout(timer);
                        }
                        if (done) {
                          return;
                        }
                        done = true;
                        _this.removeListener(transactionHash, handler);
                        resolve(receipt2);
                      };
                      _this.on(transactionHash, handler);
                      if (typeof timeout === "number" && timeout > 0) {
                        timer = setTimeout(function() {
                          if (done) {
                            return;
                          }
                          timer = null;
                          done = true;
                          _this.removeListener(transactionHash, handler);
                          reject(logger.makeError("timeout exceeded", lib.Logger.errors.TIMEOUT, {timeout}));
                        }, timeout);
                        if (timer.unref) {
                          timer.unref();
                        }
                      }
                    })];
                }
              });
            });
          };
          BaseProvider2.prototype.getBlockNumber = function() {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, this._getInternalBlockNumber(0)];
              });
            });
          };
          BaseProvider2.prototype.getGasPrice = function() {
            return __awaiter(this, void 0, void 0, function() {
              var _a, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _c.sent();
                    _b = (_a = lib$2.BigNumber).from;
                    return [4, this.perform("getGasPrice", {})];
                  case 2:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype.getBalance = function(addressOrName, blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              var params, _a, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _c.sent();
                    return [4, lib$3.resolveProperties({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag)
                    })];
                  case 2:
                    params = _c.sent();
                    _b = (_a = lib$2.BigNumber).from;
                    return [4, this.perform("getBalance", params)];
                  case 3:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype.getTransactionCount = function(addressOrName, blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              var params, _a, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _c.sent();
                    return [4, lib$3.resolveProperties({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag)
                    })];
                  case 2:
                    params = _c.sent();
                    _b = (_a = lib$2.BigNumber).from;
                    return [4, this.perform("getTransactionCount", params)];
                  case 3:
                    return [2, _b.apply(_a, [_c.sent()]).toNumber()];
                }
              });
            });
          };
          BaseProvider2.prototype.getCode = function(addressOrName, blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              var params, _a;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _b.sent();
                    return [4, lib$3.resolveProperties({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag)
                    })];
                  case 2:
                    params = _b.sent();
                    _a = lib$1.hexlify;
                    return [4, this.perform("getCode", params)];
                  case 3:
                    return [2, _a.apply(void 0, [_b.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype.getStorageAt = function(addressOrName, position, blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              var params, _a;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _b.sent();
                    return [4, lib$3.resolveProperties({
                      address: this._getAddress(addressOrName),
                      blockTag: this._getBlockTag(blockTag),
                      position: Promise.resolve(position).then(function(p) {
                        return lib$1.hexValue(p);
                      })
                    })];
                  case 2:
                    params = _b.sent();
                    _a = lib$1.hexlify;
                    return [4, this.perform("getStorageAt", params)];
                  case 3:
                    return [2, _a.apply(void 0, [_b.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype._wrapTransaction = function(tx, hash) {
            var _this = this;
            if (hash != null && lib$1.hexDataLength(hash) !== 32) {
              throw new Error("invalid response - sendTransaction");
            }
            var result = tx;
            if (hash != null && tx.hash !== hash) {
              logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", lib.Logger.errors.UNKNOWN_ERROR, {expectedHash: tx.hash, returnedHash: hash});
            }
            result.wait = function(confirmations) {
              return __awaiter(_this, void 0, void 0, function() {
                var receipt;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                    case 0:
                      if (confirmations !== 0) {
                        this._emitted["t:" + tx.hash] = "pending";
                      }
                      return [4, this.waitForTransaction(tx.hash, confirmations)];
                    case 1:
                      receipt = _a.sent();
                      if (receipt == null && confirmations === 0) {
                        return [2, null];
                      }
                      this._emitted["t:" + tx.hash] = receipt.blockNumber;
                      if (receipt.status === 0) {
                        logger.throwError("transaction failed", lib.Logger.errors.CALL_EXCEPTION, {
                          transactionHash: tx.hash,
                          transaction: tx,
                          receipt
                        });
                      }
                      return [2, receipt];
                  }
                });
              });
            };
            return result;
          };
          BaseProvider2.prototype.sendTransaction = function(signedTransaction) {
            return __awaiter(this, void 0, void 0, function() {
              var hexTx, tx, hash, error_2;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, Promise.resolve(signedTransaction).then(function(t) {
                      return lib$1.hexlify(t);
                    })];
                  case 2:
                    hexTx = _a.sent();
                    tx = this.formatter.transaction(signedTransaction);
                    _a.label = 3;
                  case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4, this.perform("sendTransaction", {signedTransaction: hexTx})];
                  case 4:
                    hash = _a.sent();
                    return [2, this._wrapTransaction(tx, hash)];
                  case 5:
                    error_2 = _a.sent();
                    error_2.transaction = tx;
                    error_2.transactionHash = tx.hash;
                    throw error_2;
                  case 6:
                    return [2];
                }
              });
            });
          };
          BaseProvider2.prototype._getTransactionRequest = function(transaction) {
            return __awaiter(this, void 0, void 0, function() {
              var values, tx, _a, _b;
              var _this = this;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, transaction];
                  case 1:
                    values = _c.sent();
                    tx = {};
                    ["from", "to"].forEach(function(key2) {
                      if (values[key2] == null) {
                        return;
                      }
                      tx[key2] = Promise.resolve(values[key2]).then(function(v) {
                        return v ? _this._getAddress(v) : null;
                      });
                    });
                    ["gasLimit", "gasPrice", "value"].forEach(function(key2) {
                      if (values[key2] == null) {
                        return;
                      }
                      tx[key2] = Promise.resolve(values[key2]).then(function(v) {
                        return v ? lib$2.BigNumber.from(v) : null;
                      });
                    });
                    ["data"].forEach(function(key2) {
                      if (values[key2] == null) {
                        return;
                      }
                      tx[key2] = Promise.resolve(values[key2]).then(function(v) {
                        return v ? lib$1.hexlify(v) : null;
                      });
                    });
                    _b = (_a = this.formatter).transactionRequest;
                    return [4, lib$3.resolveProperties(tx)];
                  case 2:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype._getFilter = function(filter) {
            return __awaiter(this, void 0, void 0, function() {
              var result, _a, _b;
              var _this = this;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, filter];
                  case 1:
                    filter = _c.sent();
                    result = {};
                    if (filter.address != null) {
                      result.address = this._getAddress(filter.address);
                    }
                    ["blockHash", "topics"].forEach(function(key2) {
                      if (filter[key2] == null) {
                        return;
                      }
                      result[key2] = filter[key2];
                    });
                    ["fromBlock", "toBlock"].forEach(function(key2) {
                      if (filter[key2] == null) {
                        return;
                      }
                      result[key2] = _this._getBlockTag(filter[key2]);
                    });
                    _b = (_a = this.formatter).filter;
                    return [4, lib$3.resolveProperties(result)];
                  case 2:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype.call = function(transaction, blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              var params, _a;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _b.sent();
                    return [4, lib$3.resolveProperties({
                      transaction: this._getTransactionRequest(transaction),
                      blockTag: this._getBlockTag(blockTag)
                    })];
                  case 2:
                    params = _b.sent();
                    _a = lib$1.hexlify;
                    return [4, this.perform("call", params)];
                  case 3:
                    return [2, _a.apply(void 0, [_b.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype.estimateGas = function(transaction) {
            return __awaiter(this, void 0, void 0, function() {
              var params, _a, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _c.sent();
                    return [4, lib$3.resolveProperties({
                      transaction: this._getTransactionRequest(transaction)
                    })];
                  case 2:
                    params = _c.sent();
                    _b = (_a = lib$2.BigNumber).from;
                    return [4, this.perform("estimateGas", params)];
                  case 3:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype._getAddress = function(addressOrName) {
            return __awaiter(this, void 0, void 0, function() {
              var address2;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.resolveName(addressOrName)];
                  case 1:
                    address2 = _a.sent();
                    if (address2 == null) {
                      logger.throwError("ENS name not configured", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "resolveName(" + JSON.stringify(addressOrName) + ")"
                      });
                    }
                    return [2, address2];
                }
              });
            });
          };
          BaseProvider2.prototype._getBlock = function(blockHashOrBlockTag, includeTransactions) {
            return __awaiter(this, void 0, void 0, function() {
              var blockNumber, params, _a, _b, _c, error_3;
              var _this = this;
              return __generator(this, function(_d) {
                switch (_d.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _d.sent();
                    return [4, blockHashOrBlockTag];
                  case 2:
                    blockHashOrBlockTag = _d.sent();
                    blockNumber = -128;
                    params = {
                      includeTransactions: !!includeTransactions
                    };
                    if (!lib$1.isHexString(blockHashOrBlockTag, 32))
                      return [3, 3];
                    params.blockHash = blockHashOrBlockTag;
                    return [3, 6];
                  case 3:
                    _d.trys.push([3, 5, , 6]);
                    _a = params;
                    _c = (_b = this.formatter).blockTag;
                    return [4, this._getBlockTag(blockHashOrBlockTag)];
                  case 4:
                    _a.blockTag = _c.apply(_b, [_d.sent()]);
                    if (lib$1.isHexString(params.blockTag)) {
                      blockNumber = parseInt(params.blockTag.substring(2), 16);
                    }
                    return [3, 6];
                  case 5:
                    error_3 = _d.sent();
                    logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                    return [3, 6];
                  case 6:
                    return [2, lib$l.poll(function() {
                      return __awaiter(_this, void 0, void 0, function() {
                        var block, blockNumber_1, i2, tx, confirmations;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.perform("getBlock", params)];
                            case 1:
                              block = _a2.sent();
                              if (block == null) {
                                if (params.blockHash != null) {
                                  if (this._emitted["b:" + params.blockHash] == null) {
                                    return [2, null];
                                  }
                                }
                                if (params.blockTag != null) {
                                  if (blockNumber > this._emitted.block) {
                                    return [2, null];
                                  }
                                }
                                return [2, void 0];
                              }
                              if (!includeTransactions)
                                return [3, 8];
                              blockNumber_1 = null;
                              i2 = 0;
                              _a2.label = 2;
                            case 2:
                              if (!(i2 < block.transactions.length))
                                return [3, 7];
                              tx = block.transactions[i2];
                              if (!(tx.blockNumber == null))
                                return [3, 3];
                              tx.confirmations = 0;
                              return [3, 6];
                            case 3:
                              if (!(tx.confirmations == null))
                                return [3, 6];
                              if (!(blockNumber_1 == null))
                                return [3, 5];
                              return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                            case 4:
                              blockNumber_1 = _a2.sent();
                              _a2.label = 5;
                            case 5:
                              confirmations = blockNumber_1 - tx.blockNumber + 1;
                              if (confirmations <= 0) {
                                confirmations = 1;
                              }
                              tx.confirmations = confirmations;
                              _a2.label = 6;
                            case 6:
                              i2++;
                              return [3, 2];
                            case 7:
                              return [2, this.formatter.blockWithTransactions(block)];
                            case 8:
                              return [2, this.formatter.block(block)];
                          }
                        });
                      });
                    }, {oncePoll: this})];
                }
              });
            });
          };
          BaseProvider2.prototype.getBlock = function(blockHashOrBlockTag) {
            return this._getBlock(blockHashOrBlockTag, false);
          };
          BaseProvider2.prototype.getBlockWithTransactions = function(blockHashOrBlockTag) {
            return this._getBlock(blockHashOrBlockTag, true);
          };
          BaseProvider2.prototype.getTransaction = function(transactionHash) {
            return __awaiter(this, void 0, void 0, function() {
              var params;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, transactionHash];
                  case 2:
                    transactionHash = _a.sent();
                    params = {transactionHash: this.formatter.hash(transactionHash, true)};
                    return [2, lib$l.poll(function() {
                      return __awaiter(_this, void 0, void 0, function() {
                        var result, tx, blockNumber, confirmations;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.perform("getTransaction", params)];
                            case 1:
                              result = _a2.sent();
                              if (result == null) {
                                if (this._emitted["t:" + transactionHash] == null) {
                                  return [2, null];
                                }
                                return [2, void 0];
                              }
                              tx = this.formatter.transactionResponse(result);
                              if (!(tx.blockNumber == null))
                                return [3, 2];
                              tx.confirmations = 0;
                              return [3, 4];
                            case 2:
                              if (!(tx.confirmations == null))
                                return [3, 4];
                              return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                            case 3:
                              blockNumber = _a2.sent();
                              confirmations = blockNumber - tx.blockNumber + 1;
                              if (confirmations <= 0) {
                                confirmations = 1;
                              }
                              tx.confirmations = confirmations;
                              _a2.label = 4;
                            case 4:
                              return [2, this._wrapTransaction(tx)];
                          }
                        });
                      });
                    }, {oncePoll: this})];
                }
              });
            });
          };
          BaseProvider2.prototype.getTransactionReceipt = function(transactionHash) {
            return __awaiter(this, void 0, void 0, function() {
              var params;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, transactionHash];
                  case 2:
                    transactionHash = _a.sent();
                    params = {transactionHash: this.formatter.hash(transactionHash, true)};
                    return [2, lib$l.poll(function() {
                      return __awaiter(_this, void 0, void 0, function() {
                        var result, receipt, blockNumber, confirmations;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              return [4, this.perform("getTransactionReceipt", params)];
                            case 1:
                              result = _a2.sent();
                              if (result == null) {
                                if (this._emitted["t:" + transactionHash] == null) {
                                  return [2, null];
                                }
                                return [2, void 0];
                              }
                              if (result.blockHash == null) {
                                return [2, void 0];
                              }
                              receipt = this.formatter.receipt(result);
                              if (!(receipt.blockNumber == null))
                                return [3, 2];
                              receipt.confirmations = 0;
                              return [3, 4];
                            case 2:
                              if (!(receipt.confirmations == null))
                                return [3, 4];
                              return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                            case 3:
                              blockNumber = _a2.sent();
                              confirmations = blockNumber - receipt.blockNumber + 1;
                              if (confirmations <= 0) {
                                confirmations = 1;
                              }
                              receipt.confirmations = confirmations;
                              _a2.label = 4;
                            case 4:
                              return [2, receipt];
                          }
                        });
                      });
                    }, {oncePoll: this})];
                }
              });
            });
          };
          BaseProvider2.prototype.getLogs = function(filter) {
            return __awaiter(this, void 0, void 0, function() {
              var params, logs;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [4, lib$3.resolveProperties({filter: this._getFilter(filter)})];
                  case 2:
                    params = _a.sent();
                    return [4, this.perform("getLogs", params)];
                  case 3:
                    logs = _a.sent();
                    logs.forEach(function(log) {
                      if (log.removed == null) {
                        log.removed = false;
                      }
                    });
                    return [2, formatter.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];
                }
              });
            });
          };
          BaseProvider2.prototype.getEtherPrice = function() {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    _a.sent();
                    return [2, this.perform("getEtherPrice", {})];
                }
              });
            });
          };
          BaseProvider2.prototype._getBlockTag = function(blockTag) {
            return __awaiter(this, void 0, void 0, function() {
              var blockNumber;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, blockTag];
                  case 1:
                    blockTag = _a.sent();
                    if (!(typeof blockTag === "number" && blockTag < 0))
                      return [3, 3];
                    if (blockTag % 1) {
                      logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                    }
                    return [4, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];
                  case 2:
                    blockNumber = _a.sent();
                    blockNumber += blockTag;
                    if (blockNumber < 0) {
                      blockNumber = 0;
                    }
                    return [2, this.formatter.blockTag(blockNumber)];
                  case 3:
                    return [2, this.formatter.blockTag(blockTag)];
                }
              });
            });
          };
          BaseProvider2.prototype._getResolver = function(name2) {
            return __awaiter(this, void 0, void 0, function() {
              var network, transaction, _a, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, this.getNetwork()];
                  case 1:
                    network = _c.sent();
                    if (!network.ensAddress) {
                      logger.throwError("network does not support ENS", lib.Logger.errors.UNSUPPORTED_OPERATION, {operation: "ENS", network: network.name});
                    }
                    transaction = {
                      to: network.ensAddress,
                      data: "0x0178b8bf" + lib$9.namehash(name2).substring(2)
                    };
                    _b = (_a = this.formatter).callAddress;
                    return [4, this.call(transaction)];
                  case 2:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype.resolveName = function(name2) {
            return __awaiter(this, void 0, void 0, function() {
              var resolverAddress, transaction, _a, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    return [4, name2];
                  case 1:
                    name2 = _c.sent();
                    try {
                      return [2, Promise.resolve(this.formatter.address(name2))];
                    } catch (error) {
                      if (lib$1.isHexString(name2)) {
                        throw error;
                      }
                    }
                    if (typeof name2 !== "string") {
                      logger.throwArgumentError("invalid ENS name", "name", name2);
                    }
                    return [4, this._getResolver(name2)];
                  case 2:
                    resolverAddress = _c.sent();
                    if (!resolverAddress) {
                      return [2, null];
                    }
                    transaction = {
                      to: resolverAddress,
                      data: "0x3b3b57de" + lib$9.namehash(name2).substring(2)
                    };
                    _b = (_a = this.formatter).callAddress;
                    return [4, this.call(transaction)];
                  case 3:
                    return [2, _b.apply(_a, [_c.sent()])];
                }
              });
            });
          };
          BaseProvider2.prototype.lookupAddress = function(address2) {
            return __awaiter(this, void 0, void 0, function() {
              var reverseName, resolverAddress, bytes2, _a, length, name2, addr;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [4, address2];
                  case 1:
                    address2 = _b.sent();
                    address2 = this.formatter.address(address2);
                    reverseName = address2.substring(2).toLowerCase() + ".addr.reverse";
                    return [4, this._getResolver(reverseName)];
                  case 2:
                    resolverAddress = _b.sent();
                    if (!resolverAddress) {
                      return [2, null];
                    }
                    _a = lib$1.arrayify;
                    return [4, this.call({
                      to: resolverAddress,
                      data: "0x691f3431" + lib$9.namehash(reverseName).substring(2)
                    })];
                  case 3:
                    bytes2 = _a.apply(void 0, [_b.sent()]);
                    if (bytes2.length < 32 || !lib$2.BigNumber.from(bytes2.slice(0, 32)).eq(32)) {
                      return [2, null];
                    }
                    bytes2 = bytes2.slice(32);
                    if (bytes2.length < 32) {
                      return [2, null];
                    }
                    length = lib$2.BigNumber.from(bytes2.slice(0, 32)).toNumber();
                    bytes2 = bytes2.slice(32);
                    if (length > bytes2.length) {
                      return [2, null];
                    }
                    name2 = lib$8.toUtf8String(bytes2.slice(0, length));
                    return [4, this.resolveName(name2)];
                  case 4:
                    addr = _b.sent();
                    if (addr != address2) {
                      return [2, null];
                    }
                    return [2, name2];
                }
              });
            });
          };
          BaseProvider2.prototype.perform = function(method, params) {
            return logger.throwError(method + " not implemented", lib.Logger.errors.NOT_IMPLEMENTED, {operation: method});
          };
          BaseProvider2.prototype._startEvent = function(event) {
            this.polling = this._events.filter(function(e) {
              return e.pollable();
            }).length > 0;
          };
          BaseProvider2.prototype._stopEvent = function(event) {
            this.polling = this._events.filter(function(e) {
              return e.pollable();
            }).length > 0;
          };
          BaseProvider2.prototype._addEventListener = function(eventName, listener, once) {
            var event = new Event(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
          };
          BaseProvider2.prototype.on = function(eventName, listener) {
            return this._addEventListener(eventName, listener, false);
          };
          BaseProvider2.prototype.once = function(eventName, listener) {
            return this._addEventListener(eventName, listener, true);
          };
          BaseProvider2.prototype.emit = function(eventName) {
            var _this = this;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
            }
            var result = false;
            var stopped = [];
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function(event) {
              if (event.tag !== eventTag) {
                return true;
              }
              setTimeout(function() {
                event.listener.apply(_this, args);
              }, 0);
              result = true;
              if (event.once) {
                stopped.push(event);
                return false;
              }
              return true;
            });
            stopped.forEach(function(event) {
              _this._stopEvent(event);
            });
            return result;
          };
          BaseProvider2.prototype.listenerCount = function(eventName) {
            if (!eventName) {
              return this._events.length;
            }
            var eventTag = getEventTag(eventName);
            return this._events.filter(function(event) {
              return event.tag === eventTag;
            }).length;
          };
          BaseProvider2.prototype.listeners = function(eventName) {
            if (eventName == null) {
              return this._events.map(function(event) {
                return event.listener;
              });
            }
            var eventTag = getEventTag(eventName);
            return this._events.filter(function(event) {
              return event.tag === eventTag;
            }).map(function(event) {
              return event.listener;
            });
          };
          BaseProvider2.prototype.off = function(eventName, listener) {
            var _this = this;
            if (listener == null) {
              return this.removeAllListeners(eventName);
            }
            var stopped = [];
            var found = false;
            var eventTag = getEventTag(eventName);
            this._events = this._events.filter(function(event) {
              if (event.tag !== eventTag || event.listener != listener) {
                return true;
              }
              if (found) {
                return true;
              }
              found = true;
              stopped.push(event);
              return false;
            });
            stopped.forEach(function(event) {
              _this._stopEvent(event);
            });
            return this;
          };
          BaseProvider2.prototype.removeAllListeners = function(eventName) {
            var _this = this;
            var stopped = [];
            if (eventName == null) {
              stopped = this._events;
              this._events = [];
            } else {
              var eventTag_1 = getEventTag(eventName);
              this._events = this._events.filter(function(event) {
                if (event.tag !== eventTag_1) {
                  return true;
                }
                stopped.push(event);
                return false;
              });
            }
            stopped.forEach(function(event) {
              _this._stopEvent(event);
            });
            return this;
          };
          return BaseProvider2;
        }(lib$b.Provider);
        exports3.BaseProvider = BaseProvider;
      });
      var baseProvider$1 = unwrapExports(baseProvider);
      var baseProvider_1 = baseProvider.Event;
      var baseProvider_2 = baseProvider.BaseProvider;
      var browserWs = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var WS = null;
        try {
          WS = WebSocket;
          if (WS == null) {
            throw new Error("inject please");
          }
        } catch (error) {
          var logger_2 = new lib.Logger(_version$I.version);
          WS = function() {
            logger_2.throwError("WebSockets not supported in this environment", lib.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new WebSocket()"
            });
          };
        }
        module2.exports = WS;
      });
      var browserWs$1 = unwrapExports(browserWs);
      var jsonRpcProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        function timer(timeout) {
          return new Promise(function(resolve) {
            setTimeout(resolve, timeout);
          });
        }
        function getResult(payload) {
          if (payload.error) {
            var error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
          }
          return payload.result;
        }
        function getLowerCase(value) {
          if (value) {
            return value.toLowerCase();
          }
          return value;
        }
        var _constructorGuard = {};
        var JsonRpcSigner = function(_super) {
          __extends(JsonRpcSigner2, _super);
          function JsonRpcSigner2(constructorGuard, provider, addressOrIndex) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, JsonRpcSigner2);
            _this = _super.call(this) || this;
            if (constructorGuard !== _constructorGuard) {
              throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            lib$3.defineReadOnly(_this, "provider", provider);
            if (addressOrIndex == null) {
              addressOrIndex = 0;
            }
            if (typeof addressOrIndex === "string") {
              lib$3.defineReadOnly(_this, "_address", _this.provider.formatter.address(addressOrIndex));
              lib$3.defineReadOnly(_this, "_index", null);
            } else if (typeof addressOrIndex === "number") {
              lib$3.defineReadOnly(_this, "_index", addressOrIndex);
              lib$3.defineReadOnly(_this, "_address", null);
            } else {
              logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
            return _this;
          }
          JsonRpcSigner2.prototype.connect = function(provider) {
            return logger.throwError("cannot alter JSON-RPC Signer connection", lib.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "connect"
            });
          };
          JsonRpcSigner2.prototype.connectUnchecked = function() {
            return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
          };
          JsonRpcSigner2.prototype.getAddress = function() {
            var _this = this;
            if (this._address) {
              return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then(function(accounts) {
              if (accounts.length <= _this._index) {
                logger.throwError("unknown account #" + _this._index, lib.Logger.errors.UNSUPPORTED_OPERATION, {
                  operation: "getAddress"
                });
              }
              return _this.provider.formatter.address(accounts[_this._index]);
            });
          };
          JsonRpcSigner2.prototype.sendUncheckedTransaction = function(transaction) {
            var _this = this;
            transaction = lib$3.shallowCopy(transaction);
            var fromAddress = this.getAddress().then(function(address2) {
              if (address2) {
                address2 = address2.toLowerCase();
              }
              return address2;
            });
            if (transaction.gasLimit == null) {
              var estimate = lib$3.shallowCopy(transaction);
              estimate.from = fromAddress;
              transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            return lib$3.resolveProperties({
              tx: lib$3.resolveProperties(transaction),
              sender: fromAddress
            }).then(function(_a) {
              var tx = _a.tx, sender = _a.sender;
              if (tx.from != null) {
                if (tx.from.toLowerCase() !== sender) {
                  logger.throwArgumentError("from address mismatch", "transaction", transaction);
                }
              } else {
                tx.from = sender;
              }
              var hexTx = _this.provider.constructor.hexlifyTransaction(tx, {from: true});
              return _this.provider.send("eth_sendTransaction", [hexTx]).then(function(hash) {
                return hash;
              }, function(error) {
                if (error.responseText) {
                  if (error.responseText.indexOf("insufficient funds") >= 0) {
                    logger.throwError("insufficient funds", lib.Logger.errors.INSUFFICIENT_FUNDS, {
                      transaction: tx
                    });
                  }
                  if (error.responseText.indexOf("nonce too low") >= 0) {
                    logger.throwError("nonce has already been used", lib.Logger.errors.NONCE_EXPIRED, {
                      transaction: tx
                    });
                  }
                  if (error.responseText.indexOf("replacement transaction underpriced") >= 0) {
                    logger.throwError("replacement fee too low", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {
                      transaction: tx
                    });
                  }
                }
                throw error;
              });
            });
          };
          JsonRpcSigner2.prototype.signTransaction = function(transaction) {
            return logger.throwError("signing transactions is unsupported", lib.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "signTransaction"
            });
          };
          JsonRpcSigner2.prototype.sendTransaction = function(transaction) {
            var _this = this;
            return this.sendUncheckedTransaction(transaction).then(function(hash) {
              return lib$l.poll(function() {
                return _this.provider.getTransaction(hash).then(function(tx) {
                  if (tx === null) {
                    return void 0;
                  }
                  return _this.provider._wrapTransaction(tx, hash);
                });
              }, {onceBlock: _this.provider}).catch(function(error) {
                error.transactionHash = hash;
                throw error;
              });
            });
          };
          JsonRpcSigner2.prototype.signMessage = function(message) {
            var _this = this;
            var data = typeof message === "string" ? lib$8.toUtf8Bytes(message) : message;
            return this.getAddress().then(function(address2) {
              return _this.provider.send("eth_sign", [address2.toLowerCase(), lib$1.hexlify(data)]);
            });
          };
          JsonRpcSigner2.prototype.unlock = function(password) {
            var provider = this.provider;
            return this.getAddress().then(function(address2) {
              return provider.send("personal_unlockAccount", [address2.toLowerCase(), password, null]);
            });
          };
          return JsonRpcSigner2;
        }(lib$c.Signer);
        exports3.JsonRpcSigner = JsonRpcSigner;
        var UncheckedJsonRpcSigner = function(_super) {
          __extends(UncheckedJsonRpcSigner2, _super);
          function UncheckedJsonRpcSigner2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          UncheckedJsonRpcSigner2.prototype.sendTransaction = function(transaction) {
            var _this = this;
            return this.sendUncheckedTransaction(transaction).then(function(hash) {
              return {
                hash,
                nonce: null,
                gasLimit: null,
                gasPrice: null,
                data: null,
                value: null,
                chainId: null,
                confirmations: 0,
                from: null,
                wait: function(confirmations) {
                  return _this.provider.waitForTransaction(hash, confirmations);
                }
              };
            });
          };
          return UncheckedJsonRpcSigner2;
        }(JsonRpcSigner);
        var allowedTransactionKeys = {
          chainId: true,
          data: true,
          gasLimit: true,
          gasPrice: true,
          nonce: true,
          to: true,
          value: true
        };
        var JsonRpcProvider = function(_super) {
          __extends(JsonRpcProvider2, _super);
          function JsonRpcProvider2(url, network) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, JsonRpcProvider2);
            var networkOrReady = network;
            if (networkOrReady == null) {
              networkOrReady = new Promise(function(resolve, reject) {
                setTimeout(function() {
                  _this.detectNetwork().then(function(network2) {
                    resolve(network2);
                  }, function(error) {
                    reject(error);
                  });
                }, 0);
              });
            }
            _this = _super.call(this, networkOrReady) || this;
            if (!url) {
              url = lib$3.getStatic(_this.constructor, "defaultUrl")();
            }
            if (typeof url === "string") {
              lib$3.defineReadOnly(_this, "connection", Object.freeze({
                url
              }));
            } else {
              lib$3.defineReadOnly(_this, "connection", Object.freeze(lib$3.shallowCopy(url)));
            }
            _this._nextId = 42;
            return _this;
          }
          JsonRpcProvider2.defaultUrl = function() {
            return "http://localhost:8545";
          };
          JsonRpcProvider2.prototype.detectNetwork = function() {
            return __awaiter(this, void 0, void 0, function() {
              var chainId, error_1, error_2, getNetwork;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, timer(0)];
                  case 1:
                    _a.sent();
                    chainId = null;
                    _a.label = 2;
                  case 2:
                    _a.trys.push([2, 4, , 9]);
                    return [4, this.send("eth_chainId", [])];
                  case 3:
                    chainId = _a.sent();
                    return [3, 9];
                  case 4:
                    error_1 = _a.sent();
                    _a.label = 5;
                  case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4, this.send("net_version", [])];
                  case 6:
                    chainId = _a.sent();
                    return [3, 8];
                  case 7:
                    error_2 = _a.sent();
                    return [3, 8];
                  case 8:
                    return [3, 9];
                  case 9:
                    if (chainId != null) {
                      getNetwork = lib$3.getStatic(this.constructor, "getNetwork");
                      try {
                        return [2, getNetwork(lib$2.BigNumber.from(chainId).toNumber())];
                      } catch (error) {
                        return [2, logger.throwError("could not detect network", lib.Logger.errors.NETWORK_ERROR, {
                          chainId,
                          event: "invalidNetwork",
                          serverError: error
                        })];
                      }
                    }
                    return [2, logger.throwError("could not detect network", lib.Logger.errors.NETWORK_ERROR, {
                      event: "noNetwork"
                    })];
                }
              });
            });
          };
          JsonRpcProvider2.prototype.getSigner = function(addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
          };
          JsonRpcProvider2.prototype.getUncheckedSigner = function(addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
          };
          JsonRpcProvider2.prototype.listAccounts = function() {
            var _this = this;
            return this.send("eth_accounts", []).then(function(accounts) {
              return accounts.map(function(a) {
                return _this.formatter.address(a);
              });
            });
          };
          JsonRpcProvider2.prototype.send = function(method, params) {
            var _this = this;
            var request = {
              method,
              params,
              id: this._nextId++,
              jsonrpc: "2.0"
            };
            this.emit("debug", {
              action: "request",
              request: lib$3.deepCopy(request),
              provider: this
            });
            return lib$l.fetchJson(this.connection, JSON.stringify(request), getResult).then(function(result) {
              _this.emit("debug", {
                action: "response",
                request,
                response: result,
                provider: _this
              });
              return result;
            }, function(error) {
              _this.emit("debug", {
                action: "response",
                error,
                request,
                provider: _this
              });
              throw error;
            });
          };
          JsonRpcProvider2.prototype.prepareRequest = function(method, params) {
            switch (method) {
              case "getBlockNumber":
                return ["eth_blockNumber", []];
              case "getGasPrice":
                return ["eth_gasPrice", []];
              case "getBalance":
                return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
              case "getTransactionCount":
                return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
              case "getCode":
                return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
              case "getStorageAt":
                return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
              case "sendTransaction":
                return ["eth_sendRawTransaction", [params.signedTransaction]];
              case "getBlock":
                if (params.blockTag) {
                  return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                } else if (params.blockHash) {
                  return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                }
                return null;
              case "getTransaction":
                return ["eth_getTransactionByHash", [params.transactionHash]];
              case "getTransactionReceipt":
                return ["eth_getTransactionReceipt", [params.transactionHash]];
              case "call": {
                var hexlifyTransaction = lib$3.getStatic(this.constructor, "hexlifyTransaction");
                return ["eth_call", [hexlifyTransaction(params.transaction, {from: true}), params.blockTag]];
              }
              case "estimateGas": {
                var hexlifyTransaction = lib$3.getStatic(this.constructor, "hexlifyTransaction");
                return ["eth_estimateGas", [hexlifyTransaction(params.transaction, {from: true})]];
              }
              case "getLogs":
                if (params.filter && params.filter.address != null) {
                  params.filter.address = getLowerCase(params.filter.address);
                }
                return ["eth_getLogs", [params.filter]];
              default:
                break;
            }
            return null;
          };
          JsonRpcProvider2.prototype.perform = function(method, params) {
            var args = this.prepareRequest(method, params);
            if (args == null) {
              logger.throwError(method + " not implemented", lib.Logger.errors.NOT_IMPLEMENTED, {operation: method});
            }
            if (method === "sendTransaction") {
              return this.send(args[0], args[1]).catch(function(error) {
                if (error.responseText) {
                  if (error.responseText.indexOf("insufficient funds") > 0) {
                    logger.throwError("insufficient funds", lib.Logger.errors.INSUFFICIENT_FUNDS, {});
                  }
                  if (error.responseText.indexOf("nonce too low") > 0) {
                    logger.throwError("nonce has already been used", lib.Logger.errors.NONCE_EXPIRED, {});
                  }
                  if (error.responseText.indexOf("replacement transaction underpriced") > 0) {
                    logger.throwError("replacement fee too low", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {});
                  }
                }
                throw error;
              });
            }
            return this.send(args[0], args[1]);
          };
          JsonRpcProvider2.prototype._startEvent = function(event) {
            if (event.tag === "pending") {
              this._startPending();
            }
            _super.prototype._startEvent.call(this, event);
          };
          JsonRpcProvider2.prototype._startPending = function() {
            if (this._pendingFilter != null) {
              return;
            }
            var self2 = this;
            var pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function(filterId) {
              function poll() {
                self2.send("eth_getFilterChanges", [filterId]).then(function(hashes) {
                  if (self2._pendingFilter != pendingFilter) {
                    return null;
                  }
                  var seq = Promise.resolve();
                  hashes.forEach(function(hash) {
                    self2._emitted["t:" + hash.toLowerCase()] = "pending";
                    seq = seq.then(function() {
                      return self2.getTransaction(hash).then(function(tx) {
                        self2.emit("pending", tx);
                        return null;
                      });
                    });
                  });
                  return seq.then(function() {
                    return timer(1e3);
                  });
                }).then(function() {
                  if (self2._pendingFilter != pendingFilter) {
                    self2.send("eth_uninstallFilter", [filterId]);
                    return;
                  }
                  setTimeout(function() {
                    poll();
                  }, 0);
                  return null;
                }).catch(function(error) {
                });
              }
              poll();
              return filterId;
            }).catch(function(error) {
            });
          };
          JsonRpcProvider2.prototype._stopEvent = function(event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
              this._pendingFilter = null;
            }
            _super.prototype._stopEvent.call(this, event);
          };
          JsonRpcProvider2.hexlifyTransaction = function(transaction, allowExtra) {
            var allowed = lib$3.shallowCopy(allowedTransactionKeys);
            if (allowExtra) {
              for (var key2 in allowExtra) {
                if (allowExtra[key2]) {
                  allowed[key2] = true;
                }
              }
            }
            lib$3.checkProperties(transaction, allowed);
            var result = {};
            ["gasLimit", "gasPrice", "nonce", "value"].forEach(function(key3) {
              if (transaction[key3] == null) {
                return;
              }
              var value = lib$1.hexValue(transaction[key3]);
              if (key3 === "gasLimit") {
                key3 = "gas";
              }
              result[key3] = value;
            });
            ["from", "to", "data"].forEach(function(key3) {
              if (transaction[key3] == null) {
                return;
              }
              result[key3] = lib$1.hexlify(transaction[key3]);
            });
            return result;
          };
          return JsonRpcProvider2;
        }(baseProvider.BaseProvider);
        exports3.JsonRpcProvider = JsonRpcProvider;
      });
      var jsonRpcProvider$1 = unwrapExports(jsonRpcProvider);
      var jsonRpcProvider_1 = jsonRpcProvider.JsonRpcSigner;
      var jsonRpcProvider_2 = jsonRpcProvider.JsonRpcProvider;
      var websocketProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
          return mod && mod.__esModule ? mod : {default: mod};
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var ws_1 = __importDefault(browserWs);
        var logger = new lib.Logger(_version$I.version);
        var NextId = 1;
        var WebSocketProvider = function(_super) {
          __extends(WebSocketProvider2, _super);
          function WebSocketProvider2(url, network) {
            var _this = this;
            if (network === "any") {
              logger.throwError("WebSocketProvider does not support 'any' network yet", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "network:any"
              });
            }
            _this = _super.call(this, url, network) || this;
            _this._pollingInterval = -1;
            lib$3.defineReadOnly(_this, "_websocket", new ws_1.default(_this.connection.url));
            lib$3.defineReadOnly(_this, "_requests", {});
            lib$3.defineReadOnly(_this, "_subs", {});
            lib$3.defineReadOnly(_this, "_subIds", {});
            _this._wsReady = false;
            _this._websocket.onopen = function() {
              _this._wsReady = true;
              Object.keys(_this._requests).forEach(function(id) {
                _this._websocket.send(_this._requests[id].payload);
              });
            };
            _this._websocket.onmessage = function(messageEvent) {
              var data = messageEvent.data;
              var result = JSON.parse(data);
              if (result.id != null) {
                var id = String(result.id);
                var request = _this._requests[id];
                delete _this._requests[id];
                if (result.result !== void 0) {
                  request.callback(null, result.result);
                } else {
                  if (result.error) {
                    var error = new Error(result.error.message || "unknown error");
                    lib$3.defineReadOnly(error, "code", result.error.code || null);
                    lib$3.defineReadOnly(error, "response", data);
                    request.callback(error, void 0);
                  } else {
                    request.callback(new Error("unknown error"), void 0);
                  }
                }
              } else if (result.method === "eth_subscription") {
                var sub = _this._subs[result.params.subscription];
                if (sub) {
                  sub.processFunc(result.params.result);
                }
              } else {
                console.warn("this should not happen");
              }
            };
            var fauxPoll = setInterval(function() {
              _this.emit("poll");
            }, 1e3);
            if (fauxPoll.unref) {
              fauxPoll.unref();
            }
            return _this;
          }
          Object.defineProperty(WebSocketProvider2.prototype, "pollingInterval", {
            get: function() {
              return 0;
            },
            set: function(value) {
              logger.throwError("cannot set polling interval on WebSocketProvider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPollingInterval"
              });
            },
            enumerable: true,
            configurable: true
          });
          WebSocketProvider2.prototype.resetEventsBlock = function(blockNumber) {
            logger.throwError("cannot reset events block on WebSocketProvider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "resetEventBlock"
            });
          };
          WebSocketProvider2.prototype.poll = function() {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, null];
              });
            });
          };
          Object.defineProperty(WebSocketProvider2.prototype, "polling", {
            set: function(value) {
              if (!value) {
                return;
              }
              logger.throwError("cannot set polling on WebSocketProvider", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPolling"
              });
            },
            enumerable: true,
            configurable: true
          });
          WebSocketProvider2.prototype.send = function(method, params) {
            var _this = this;
            var rid = NextId++;
            return new Promise(function(resolve, reject) {
              function callback(error, result) {
                if (error) {
                  return reject(error);
                }
                return resolve(result);
              }
              var payload = JSON.stringify({
                method,
                params,
                id: rid,
                jsonrpc: "2.0"
              });
              _this._requests[String(rid)] = {callback, payload};
              if (_this._wsReady) {
                _this._websocket.send(payload);
              }
            });
          };
          WebSocketProvider2.defaultUrl = function() {
            return "ws://localhost:8546";
          };
          WebSocketProvider2.prototype._subscribe = function(tag, param, processFunc) {
            return __awaiter(this, void 0, void 0, function() {
              var subIdPromise, subId;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    subIdPromise = this._subIds[tag];
                    if (subIdPromise == null) {
                      subIdPromise = Promise.all(param).then(function(param2) {
                        return _this.send("eth_subscribe", param2);
                      });
                      this._subIds[tag] = subIdPromise;
                    }
                    return [4, subIdPromise];
                  case 1:
                    subId = _a.sent();
                    this._subs[subId] = {tag, processFunc};
                    return [2];
                }
              });
            });
          };
          WebSocketProvider2.prototype._startEvent = function(event) {
            var _this = this;
            switch (event.type) {
              case "block":
                this._subscribe("block", ["newHeads"], function(result) {
                  var blockNumber = lib$2.BigNumber.from(result.number).toNumber();
                  _this._emitted.block = blockNumber;
                  _this.emit("block", blockNumber);
                });
                break;
              case "pending":
                this._subscribe("pending", ["newPendingTransactions"], function(result) {
                  _this.emit("pending", result);
                });
                break;
              case "filter":
                this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], function(result) {
                  if (result.removed == null) {
                    result.removed = false;
                  }
                  _this.emit(event.filter, _this.formatter.filterLog(result));
                });
                break;
              case "tx": {
                var emitReceipt_1 = function(event2) {
                  var hash = event2.hash;
                  _this.getTransactionReceipt(hash).then(function(receipt) {
                    if (!receipt) {
                      return;
                    }
                    _this.emit(hash, receipt);
                  });
                };
                emitReceipt_1(event);
                this._subscribe("tx", ["newHeads"], function(result) {
                  _this._events.filter(function(e) {
                    return e.type === "tx";
                  }).forEach(emitReceipt_1);
                });
                break;
              }
              case "debug":
              case "poll":
              case "willPoll":
              case "didPoll":
              case "error":
                break;
              default:
                console.log("unhandled:", event);
                break;
            }
          };
          WebSocketProvider2.prototype._stopEvent = function(event) {
            var _this = this;
            var tag = event.tag;
            if (event.type === "tx") {
              if (this._events.filter(function(e) {
                return e.type === "tx";
              }).length) {
                return;
              }
              tag = "tx";
            } else if (this.listenerCount(event.event)) {
              return;
            }
            var subId = this._subIds[tag];
            if (!subId) {
              return;
            }
            delete this._subIds[tag];
            subId.then(function(subId2) {
              if (!_this._subs[subId2]) {
                return;
              }
              delete _this._subs[subId2];
              _this.send("eth_unsubscribe", [subId2]);
            });
          };
          return WebSocketProvider2;
        }(jsonRpcProvider.JsonRpcProvider);
        exports3.WebSocketProvider = WebSocketProvider;
      });
      var websocketProvider$1 = unwrapExports(websocketProvider);
      var websocketProvider_1 = websocketProvider.WebSocketProvider;
      var urlJsonRpcProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        var StaticJsonRpcProvider = function(_super) {
          __extends(StaticJsonRpcProvider2, _super);
          function StaticJsonRpcProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          StaticJsonRpcProvider2.prototype.detectNetwork = function() {
            return __awaiter(this, void 0, void 0, function() {
              var network;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    network = this.network;
                    if (!(network == null))
                      return [3, 2];
                    return [4, _super.prototype.detectNetwork.call(this)];
                  case 1:
                    network = _a.sent();
                    if (!network) {
                      logger.throwError("no network detected", lib.Logger.errors.UNKNOWN_ERROR, {});
                    }
                    if (this._network == null) {
                      lib$3.defineReadOnly(this, "_network", network);
                      this.emit("network", network, null);
                    }
                    _a.label = 2;
                  case 2:
                    return [2, network];
                }
              });
            });
          };
          return StaticJsonRpcProvider2;
        }(jsonRpcProvider.JsonRpcProvider);
        exports3.StaticJsonRpcProvider = StaticJsonRpcProvider;
        var UrlJsonRpcProvider = function(_super) {
          __extends(UrlJsonRpcProvider2, _super);
          function UrlJsonRpcProvider2(network, apiKey) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkAbstract(_newTarget, UrlJsonRpcProvider2);
            network = lib$3.getStatic(_newTarget, "getNetwork")(network);
            apiKey = lib$3.getStatic(_newTarget, "getApiKey")(apiKey);
            var connection = lib$3.getStatic(_newTarget, "getUrl")(network, apiKey);
            _this = _super.call(this, connection, network) || this;
            if (typeof apiKey === "string") {
              lib$3.defineReadOnly(_this, "apiKey", apiKey);
            } else if (apiKey != null) {
              Object.keys(apiKey).forEach(function(key2) {
                lib$3.defineReadOnly(_this, key2, apiKey[key2]);
              });
            }
            return _this;
          }
          UrlJsonRpcProvider2.prototype._startPending = function() {
            logger.warn("WARNING: API provider does not support pending filters");
          };
          UrlJsonRpcProvider2.prototype.getSigner = function(address2) {
            return logger.throwError("API provider does not support signing", lib.Logger.errors.UNSUPPORTED_OPERATION, {operation: "getSigner"});
          };
          UrlJsonRpcProvider2.prototype.listAccounts = function() {
            return Promise.resolve([]);
          };
          UrlJsonRpcProvider2.getApiKey = function(apiKey) {
            return apiKey;
          };
          UrlJsonRpcProvider2.getUrl = function(network, apiKey) {
            return logger.throwError("not implemented; sub-classes must override getUrl", lib.Logger.errors.NOT_IMPLEMENTED, {
              operation: "getUrl"
            });
          };
          return UrlJsonRpcProvider2;
        }(StaticJsonRpcProvider);
        exports3.UrlJsonRpcProvider = UrlJsonRpcProvider;
      });
      var urlJsonRpcProvider$1 = unwrapExports(urlJsonRpcProvider);
      var urlJsonRpcProvider_1 = urlJsonRpcProvider.StaticJsonRpcProvider;
      var urlJsonRpcProvider_2 = urlJsonRpcProvider.UrlJsonRpcProvider;
      var alchemyProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
        var AlchemyProvider = function(_super) {
          __extends(AlchemyProvider2, _super);
          function AlchemyProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          AlchemyProvider2.getWebSocketProvider = function(network, apiKey) {
            var provider = new AlchemyProvider2(network, apiKey);
            var url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
            return new websocketProvider.WebSocketProvider(url, provider.network);
          };
          AlchemyProvider2.getApiKey = function(apiKey) {
            if (apiKey == null) {
              return defaultApiKey;
            }
            if (apiKey && typeof apiKey !== "string") {
              logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
          };
          AlchemyProvider2.getUrl = function(network, apiKey) {
            var host = null;
            switch (network.name) {
              case "homestead":
                host = "eth-mainnet.alchemyapi.io/v2/";
                break;
              case "ropsten":
                host = "eth-ropsten.alchemyapi.io/v2/";
                break;
              case "rinkeby":
                host = "eth-rinkeby.alchemyapi.io/v2/";
                break;
              case "goerli":
                host = "eth-goerli.alchemyapi.io/v2/";
                break;
              case "kovan":
                host = "eth-kovan.alchemyapi.io/v2/";
                break;
              default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return "https://" + host + apiKey;
          };
          return AlchemyProvider2;
        }(urlJsonRpcProvider.UrlJsonRpcProvider);
        exports3.AlchemyProvider = AlchemyProvider;
      });
      var alchemyProvider$1 = unwrapExports(alchemyProvider);
      var alchemyProvider_1 = alchemyProvider.AlchemyProvider;
      var cloudflareProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        var CloudflareProvider = function(_super) {
          __extends(CloudflareProvider2, _super);
          function CloudflareProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          CloudflareProvider2.getApiKey = function(apiKey) {
            if (apiKey != null) {
              logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
          };
          CloudflareProvider2.getUrl = function(network, apiKey) {
            var host = null;
            switch (network.name) {
              case "homestead":
                host = "https://cloudflare-eth.com/";
                break;
              default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
          };
          CloudflareProvider2.prototype.perform = function(method, params) {
            return __awaiter(this, void 0, void 0, function() {
              var block;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(method === "getBlockNumber"))
                      return [3, 2];
                    return [4, _super.prototype.perform.call(this, "getBlock", {blockTag: "latest"})];
                  case 1:
                    block = _a.sent();
                    return [2, block.number];
                  case 2:
                    return [2, _super.prototype.perform.call(this, method, params)];
                }
              });
            });
          };
          return CloudflareProvider2;
        }(urlJsonRpcProvider.UrlJsonRpcProvider);
        exports3.CloudflareProvider = CloudflareProvider;
      });
      var cloudflareProvider$1 = unwrapExports(cloudflareProvider);
      var cloudflareProvider_1 = cloudflareProvider.CloudflareProvider;
      var etherscanProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        function getTransactionString(transaction) {
          var result = [];
          for (var key2 in transaction) {
            if (transaction[key2] == null) {
              continue;
            }
            var value = lib$1.hexlify(transaction[key2]);
            if ({gasLimit: true, gasPrice: true, nonce: true, value: true}[key2]) {
              value = lib$1.hexValue(value);
            }
            result.push(key2 + "=" + value);
          }
          return result.join("&");
        }
        function getResult(result) {
          if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            return result.result;
          }
          if (result.status != 1 || result.message != "OK") {
            var error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
          }
          return result.result;
        }
        function getJsonResult(result) {
          if (result.jsonrpc != "2.0") {
            var error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
          }
          if (result.error) {
            var error = new Error(result.error.message || "unknown error");
            if (result.error.code) {
              error.code = result.error.code;
            }
            if (result.error.data) {
              error.data = result.error.data;
            }
            throw error;
          }
          return result.result;
        }
        function checkLogTag(blockTag) {
          if (blockTag === "pending") {
            throw new Error("pending not supported");
          }
          if (blockTag === "latest") {
            return blockTag;
          }
          return parseInt(blockTag.substring(2), 16);
        }
        var defaultApiKey = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
        var EtherscanProvider = function(_super) {
          __extends(EtherscanProvider2, _super);
          function EtherscanProvider2(network, apiKey) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, EtherscanProvider2);
            _this = _super.call(this, network) || this;
            var name2 = "invalid";
            if (_this.network) {
              name2 = _this.network.name;
            }
            var baseUrl = null;
            switch (name2) {
              case "homestead":
                baseUrl = "https://api.etherscan.io";
                break;
              case "ropsten":
                baseUrl = "https://api-ropsten.etherscan.io";
                break;
              case "rinkeby":
                baseUrl = "https://api-rinkeby.etherscan.io";
                break;
              case "kovan":
                baseUrl = "https://api-kovan.etherscan.io";
                break;
              case "goerli":
                baseUrl = "https://api-goerli.etherscan.io";
                break;
              default:
                throw new Error("unsupported network");
            }
            lib$3.defineReadOnly(_this, "baseUrl", baseUrl);
            lib$3.defineReadOnly(_this, "apiKey", apiKey || defaultApiKey);
            return _this;
          }
          EtherscanProvider2.prototype.detectNetwork = function() {
            return __awaiter(this, void 0, void 0, function() {
              return __generator(this, function(_a) {
                return [2, this.network];
              });
            });
          };
          EtherscanProvider2.prototype.perform = function(method, params) {
            return __awaiter(this, void 0, void 0, function() {
              var url, apiKey, get, _a, transaction, transaction, topic0, logs, txs, i2, log, tx, _b;
              var _this = this;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    url = this.baseUrl;
                    apiKey = "";
                    if (this.apiKey) {
                      apiKey += "&apikey=" + this.apiKey;
                    }
                    get = function(url2, procFunc) {
                      return __awaiter(_this, void 0, void 0, function() {
                        var result;
                        return __generator(this, function(_a2) {
                          switch (_a2.label) {
                            case 0:
                              this.emit("debug", {
                                action: "request",
                                request: url2,
                                provider: this
                              });
                              return [4, lib$l.fetchJson(url2, null, procFunc || getJsonResult)];
                            case 1:
                              result = _a2.sent();
                              this.emit("debug", {
                                action: "response",
                                request: url2,
                                response: lib$3.deepCopy(result),
                                provider: this
                              });
                              return [2, result];
                          }
                        });
                      });
                    };
                    _a = method;
                    switch (_a) {
                      case "getBlockNumber":
                        return [3, 1];
                      case "getGasPrice":
                        return [3, 2];
                      case "getBalance":
                        return [3, 3];
                      case "getTransactionCount":
                        return [3, 4];
                      case "getCode":
                        return [3, 5];
                      case "getStorageAt":
                        return [3, 6];
                      case "sendTransaction":
                        return [3, 7];
                      case "getBlock":
                        return [3, 8];
                      case "getTransaction":
                        return [3, 9];
                      case "getTransactionReceipt":
                        return [3, 10];
                      case "call":
                        return [3, 11];
                      case "estimateGas":
                        return [3, 12];
                      case "getLogs":
                        return [3, 13];
                      case "getEtherPrice":
                        return [3, 20];
                    }
                    return [3, 22];
                  case 1:
                    url += "/api?module=proxy&action=eth_blockNumber" + apiKey;
                    return [2, get(url)];
                  case 2:
                    url += "/api?module=proxy&action=eth_gasPrice" + apiKey;
                    return [2, get(url)];
                  case 3:
                    url += "/api?module=account&action=balance&address=" + params.address;
                    url += "&tag=" + params.blockTag + apiKey;
                    return [2, get(url, getResult)];
                  case 4:
                    url += "/api?module=proxy&action=eth_getTransactionCount&address=" + params.address;
                    url += "&tag=" + params.blockTag + apiKey;
                    return [2, get(url)];
                  case 5:
                    url += "/api?module=proxy&action=eth_getCode&address=" + params.address;
                    url += "&tag=" + params.blockTag + apiKey;
                    return [2, get(url, getJsonResult)];
                  case 6:
                    url += "/api?module=proxy&action=eth_getStorageAt&address=" + params.address;
                    url += "&position=" + params.position;
                    url += "&tag=" + params.blockTag + apiKey;
                    return [2, get(url, getJsonResult)];
                  case 7:
                    url += "/api?module=proxy&action=eth_sendRawTransaction&hex=" + params.signedTransaction;
                    url += apiKey;
                    return [2, get(url).catch(function(error) {
                      if (error.responseText) {
                        if (error.responseText.toLowerCase().indexOf("insufficient funds") >= 0) {
                          logger.throwError("insufficient funds", lib.Logger.errors.INSUFFICIENT_FUNDS, {});
                        }
                        if (error.responseText.indexOf("same hash was already imported") >= 0) {
                          logger.throwError("nonce has already been used", lib.Logger.errors.NONCE_EXPIRED, {});
                        }
                        if (error.responseText.indexOf("another transaction with same nonce") >= 0) {
                          logger.throwError("replacement fee too low", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {});
                        }
                      }
                      throw error;
                    })];
                  case 8:
                    if (params.blockTag) {
                      url += "/api?module=proxy&action=eth_getBlockByNumber&tag=" + params.blockTag;
                      if (params.includeTransactions) {
                        url += "&boolean=true";
                      } else {
                        url += "&boolean=false";
                      }
                      url += apiKey;
                      return [2, get(url)];
                    }
                    throw new Error("getBlock by blockHash not implemented");
                  case 9:
                    url += "/api?module=proxy&action=eth_getTransactionByHash&txhash=" + params.transactionHash;
                    url += apiKey;
                    return [2, get(url)];
                  case 10:
                    url += "/api?module=proxy&action=eth_getTransactionReceipt&txhash=" + params.transactionHash;
                    url += apiKey;
                    return [2, get(url)];
                  case 11:
                    {
                      transaction = getTransactionString(params.transaction);
                      if (transaction) {
                        transaction = "&" + transaction;
                      }
                      url += "/api?module=proxy&action=eth_call" + transaction;
                      if (params.blockTag !== "latest") {
                        throw new Error("EtherscanProvider does not support blockTag for call");
                      }
                      url += apiKey;
                      return [2, get(url)];
                    }
                    _c.label = 12;
                  case 12:
                    {
                      transaction = getTransactionString(params.transaction);
                      if (transaction) {
                        transaction = "&" + transaction;
                      }
                      url += "/api?module=proxy&action=eth_estimateGas&" + transaction;
                      url += apiKey;
                      return [2, get(url)];
                    }
                    _c.label = 13;
                  case 13:
                    url += "/api?module=logs&action=getLogs";
                    if (params.filter.fromBlock) {
                      url += "&fromBlock=" + checkLogTag(params.filter.fromBlock);
                    }
                    if (params.filter.toBlock) {
                      url += "&toBlock=" + checkLogTag(params.filter.toBlock);
                    }
                    if (params.filter.address) {
                      url += "&address=" + params.filter.address;
                    }
                    if (params.filter.topics && params.filter.topics.length > 0) {
                      if (params.filter.topics.length > 1) {
                        logger.throwError("unsupported topic count", lib.Logger.errors.UNSUPPORTED_OPERATION, {topics: params.filter.topics});
                      }
                      if (params.filter.topics.length === 1) {
                        topic0 = params.filter.topics[0];
                        if (typeof topic0 !== "string" || topic0.length !== 66) {
                          logger.throwError("unsupported topic format", lib.Logger.errors.UNSUPPORTED_OPERATION, {topic0});
                        }
                        url += "&topic0=" + topic0;
                      }
                    }
                    url += apiKey;
                    return [4, get(url, getResult)];
                  case 14:
                    logs = _c.sent();
                    txs = {};
                    i2 = 0;
                    _c.label = 15;
                  case 15:
                    if (!(i2 < logs.length))
                      return [3, 19];
                    log = logs[i2];
                    if (log.blockHash != null) {
                      return [3, 18];
                    }
                    if (!(txs[log.transactionHash] == null))
                      return [3, 17];
                    return [4, this.getTransaction(log.transactionHash)];
                  case 16:
                    tx = _c.sent();
                    if (tx) {
                      txs[log.transactionHash] = tx.blockHash;
                    }
                    _c.label = 17;
                  case 17:
                    log.blockHash = txs[log.transactionHash];
                    _c.label = 18;
                  case 18:
                    i2++;
                    return [3, 15];
                  case 19:
                    return [2, logs];
                  case 20:
                    if (this.network.name !== "homestead") {
                      return [2, 0];
                    }
                    url += "/api?module=stats&action=ethprice";
                    url += apiKey;
                    _b = parseFloat;
                    return [4, get(url, getResult)];
                  case 21:
                    return [2, _b.apply(void 0, [_c.sent().ethusd])];
                  case 22:
                    return [3, 23];
                  case 23:
                    return [2, _super.prototype.perform.call(this, method, params)];
                }
              });
            });
          };
          EtherscanProvider2.prototype.getHistory = function(addressOrName, startBlock, endBlock) {
            var _this = this;
            var url = this.baseUrl;
            var apiKey = "";
            if (this.apiKey) {
              apiKey += "&apikey=" + this.apiKey;
            }
            if (startBlock == null) {
              startBlock = 0;
            }
            if (endBlock == null) {
              endBlock = 99999999;
            }
            return this.resolveName(addressOrName).then(function(address2) {
              url += "/api?module=account&action=txlist&address=" + address2;
              url += "&startblock=" + startBlock;
              url += "&endblock=" + endBlock;
              url += "&sort=asc" + apiKey;
              _this.emit("debug", {
                action: "request",
                request: url,
                provider: _this
              });
              return lib$l.fetchJson(url, null, getResult).then(function(result) {
                _this.emit("debug", {
                  action: "response",
                  request: url,
                  response: lib$3.deepCopy(result),
                  provider: _this
                });
                var output = [];
                result.forEach(function(tx) {
                  ["contractAddress", "to"].forEach(function(key2) {
                    if (tx[key2] == "") {
                      delete tx[key2];
                    }
                  });
                  if (tx.creates == null && tx.contractAddress != null) {
                    tx.creates = tx.contractAddress;
                  }
                  var item = _this.formatter.transactionResponse(tx);
                  if (tx.timeStamp) {
                    item.timestamp = parseInt(tx.timeStamp);
                  }
                  output.push(item);
                });
                return output;
              });
            });
          };
          return EtherscanProvider2;
        }(baseProvider.BaseProvider);
        exports3.EtherscanProvider = EtherscanProvider;
      });
      var etherscanProvider$1 = unwrapExports(etherscanProvider);
      var etherscanProvider_1 = etherscanProvider.EtherscanProvider;
      var fallbackProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = commonjsGlobal && commonjsGlobal.__generator || function(thisArg, body) {
          var _ = {label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: []}, f2, y, t, g;
          return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return {value: op[1], done: false};
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return {value: op[0] ? op[1] : void 0, done: true};
          }
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        function now() {
          return new Date().getTime();
        }
        function checkNetworks(networks) {
          var result = null;
          for (var i2 = 0; i2 < networks.length; i2++) {
            var network = networks[i2];
            if (network == null) {
              return null;
            }
            if (result) {
              if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
                logger.throwArgumentError("provider mismatch", "networks", networks);
              }
            } else {
              result = network;
            }
          }
          return result;
        }
        function median(values, maxDelta) {
          values = values.slice().sort();
          var middle = Math.floor(values.length / 2);
          if (values.length % 2) {
            return values[middle];
          }
          var a = values[middle - 1], b = values[middle];
          if (maxDelta != null && Math.abs(a - b) > maxDelta) {
            return null;
          }
          return (a + b) / 2;
        }
        function serialize(value) {
          if (value === null) {
            return "null";
          } else if (typeof value === "number" || typeof value === "boolean") {
            return JSON.stringify(value);
          } else if (typeof value === "string") {
            return value;
          } else if (lib$2.BigNumber.isBigNumber(value)) {
            return value.toString();
          } else if (Array.isArray(value)) {
            return JSON.stringify(value.map(function(i2) {
              return serialize(i2);
            }));
          } else if (typeof value === "object") {
            var keys = Object.keys(value);
            keys.sort();
            return "{" + keys.map(function(key2) {
              var v = value[key2];
              if (typeof v === "function") {
                v = "[function]";
              } else {
                v = serialize(v);
              }
              return JSON.stringify(key2) + ":" + v;
            }).join(",") + "}";
          }
          throw new Error("unknown value type: " + typeof value);
        }
        var nextRid = 1;
        ;
        function stall(duration) {
          var cancel = null;
          var timer = null;
          var promise = new Promise(function(resolve) {
            cancel = function() {
              if (timer) {
                clearTimeout(timer);
                timer = null;
              }
              resolve();
            };
            timer = setTimeout(cancel, duration);
          });
          var wait = function(func) {
            promise = promise.then(func);
            return promise;
          };
          function getPromise() {
            return promise;
          }
          return {cancel, getPromise, wait};
        }
        ;
        function exposeDebugConfig(config, now2) {
          var result = {
            provider: config.provider,
            weight: config.weight
          };
          if (config.start) {
            result.start = config.start;
          }
          if (now2) {
            result.duration = now2 - config.start;
          }
          if (config.done) {
            if (config.error) {
              result.error = config.error;
            } else {
              result.result = config.result || null;
            }
          }
          return result;
        }
        function normalizedTally(normalize, quorum) {
          return function(configs) {
            var tally = {};
            configs.forEach(function(c) {
              var value = normalize(c.result);
              if (!tally[value]) {
                tally[value] = {count: 0, result: c.result};
              }
              tally[value].count++;
            });
            var keys = Object.keys(tally);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var check = tally[keys[i2]];
              if (check.count >= quorum) {
                return check.result;
              }
            }
            return void 0;
          };
        }
        function getProcessFunc(provider, method, params) {
          var normalize = serialize;
          switch (method) {
            case "getBlockNumber":
              return function(configs) {
                var values = configs.map(function(c) {
                  return c.result;
                });
                var blockNumber = median(configs.map(function(c) {
                  return c.result;
                }), 2);
                if (blockNumber == null) {
                  return void 0;
                }
                blockNumber = Math.ceil(blockNumber);
                if (values.indexOf(blockNumber + 1) >= 0) {
                  blockNumber++;
                }
                if (blockNumber >= provider._highestBlockNumber) {
                  provider._highestBlockNumber = blockNumber;
                }
                return provider._highestBlockNumber;
              };
            case "getGasPrice":
              return function(configs) {
                var values = configs.map(function(c) {
                  return c.result;
                });
                values.sort();
                return values[Math.floor(values.length / 2)];
              };
            case "getEtherPrice":
              return function(configs) {
                return median(configs.map(function(c) {
                  return c.result;
                }));
              };
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
            case "getStorageAt":
            case "call":
            case "estimateGas":
            case "getLogs":
              break;
            case "getTransaction":
            case "getTransactionReceipt":
              normalize = function(tx) {
                if (tx == null) {
                  return null;
                }
                tx = lib$3.shallowCopy(tx);
                tx.confirmations = -1;
                return serialize(tx);
              };
              break;
            case "getBlock":
              if (params.includeTransactions) {
                normalize = function(block) {
                  if (block == null) {
                    return null;
                  }
                  block = lib$3.shallowCopy(block);
                  block.transactions = block.transactions.map(function(tx) {
                    tx = lib$3.shallowCopy(tx);
                    tx.confirmations = -1;
                    return tx;
                  });
                  return serialize(block);
                };
              } else {
                normalize = function(block) {
                  if (block == null) {
                    return null;
                  }
                  return serialize(block);
                };
              }
              break;
            default:
              throw new Error("unknown method: " + method);
          }
          return normalizedTally(normalize, provider.quorum);
        }
        function waitForSync(config, blockNumber) {
          return __awaiter(this, void 0, void 0, function() {
            var provider;
            return __generator(this, function(_a) {
              provider = config.provider;
              if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
                return [2, provider];
              }
              return [2, lib$l.poll(function() {
                return new Promise(function(resolve, reject) {
                  setTimeout(function() {
                    if (provider.blockNumber >= blockNumber) {
                      return resolve(provider);
                    }
                    if (config.cancelled) {
                      return resolve(null);
                    }
                    return resolve(void 0);
                  }, 0);
                });
              }, {oncePoll: provider})];
            });
          });
        }
        function getRunner(config, currentBlockNumber, method, params) {
          return __awaiter(this, void 0, void 0, function() {
            var provider, _a, filter;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  provider = config.provider;
                  _a = method;
                  switch (_a) {
                    case "getBlockNumber":
                      return [3, 1];
                    case "getGasPrice":
                      return [3, 1];
                    case "getEtherPrice":
                      return [3, 2];
                    case "getBalance":
                      return [3, 3];
                    case "getTransactionCount":
                      return [3, 3];
                    case "getCode":
                      return [3, 3];
                    case "getStorageAt":
                      return [3, 6];
                    case "getBlock":
                      return [3, 9];
                    case "call":
                      return [3, 12];
                    case "estimateGas":
                      return [3, 12];
                    case "getTransaction":
                      return [3, 15];
                    case "getTransactionReceipt":
                      return [3, 15];
                    case "getLogs":
                      return [3, 16];
                  }
                  return [3, 19];
                case 1:
                  return [2, provider[method]()];
                case 2:
                  if (provider.getEtherPrice) {
                    return [2, provider.getEtherPrice()];
                  }
                  return [3, 19];
                case 3:
                  if (!(params.blockTag && lib$1.isHexString(params.blockTag)))
                    return [3, 5];
                  return [4, waitForSync(config, currentBlockNumber)];
                case 4:
                  provider = _b.sent();
                  _b.label = 5;
                case 5:
                  return [2, provider[method](params.address, params.blockTag || "latest")];
                case 6:
                  if (!(params.blockTag && lib$1.isHexString(params.blockTag)))
                    return [3, 8];
                  return [4, waitForSync(config, currentBlockNumber)];
                case 7:
                  provider = _b.sent();
                  _b.label = 8;
                case 8:
                  return [2, provider.getStorageAt(params.address, params.position, params.blockTag || "latest")];
                case 9:
                  if (!(params.blockTag && lib$1.isHexString(params.blockTag)))
                    return [3, 11];
                  return [4, waitForSync(config, currentBlockNumber)];
                case 10:
                  provider = _b.sent();
                  _b.label = 11;
                case 11:
                  return [2, provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash)];
                case 12:
                  if (!(params.blockTag && lib$1.isHexString(params.blockTag)))
                    return [3, 14];
                  return [4, waitForSync(config, currentBlockNumber)];
                case 13:
                  provider = _b.sent();
                  _b.label = 14;
                case 14:
                  return [2, provider[method](params.transaction)];
                case 15:
                  return [2, provider[method](params.transactionHash)];
                case 16:
                  filter = params.filter;
                  if (!(filter.fromBlock && lib$1.isHexString(filter.fromBlock) || filter.toBlock && lib$1.isHexString(filter.toBlock)))
                    return [3, 18];
                  return [4, waitForSync(config, currentBlockNumber)];
                case 17:
                  provider = _b.sent();
                  _b.label = 18;
                case 18:
                  return [2, provider.getLogs(filter)];
                case 19:
                  return [2, logger.throwError("unknown method error", lib.Logger.errors.UNKNOWN_ERROR, {
                    method,
                    params
                  })];
              }
            });
          });
        }
        var FallbackProvider = function(_super) {
          __extends(FallbackProvider2, _super);
          function FallbackProvider2(providers, quorum) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, FallbackProvider2);
            if (providers.length === 0) {
              logger.throwArgumentError("missing providers", "providers", providers);
            }
            var providerConfigs = providers.map(function(configOrProvider, index2) {
              if (lib$b.Provider.isProvider(configOrProvider)) {
                return Object.freeze({provider: configOrProvider, weight: 1, stallTimeout: 750, priority: 1});
              }
              var config = lib$3.shallowCopy(configOrProvider);
              if (config.priority == null) {
                config.priority = 1;
              }
              if (config.stallTimeout == null) {
                config.stallTimeout = 750;
              }
              if (config.weight == null) {
                config.weight = 1;
              }
              var weight = config.weight;
              if (weight % 1 || weight > 512 || weight < 1) {
                logger.throwArgumentError("invalid weight; must be integer in [1, 512]", "providers[" + index2 + "].weight", weight);
              }
              return Object.freeze(config);
            });
            var total = providerConfigs.reduce(function(accum, c) {
              return accum + c.weight;
            }, 0);
            if (quorum == null) {
              quorum = total / 2;
            } else if (quorum > total) {
              logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            var networkOrReady = checkNetworks(providerConfigs.map(function(c) {
              return c.provider.network;
            }));
            if (networkOrReady == null) {
              networkOrReady = new Promise(function(resolve, reject) {
                setTimeout(function() {
                  _this.detectNetwork().then(resolve, reject);
                }, 0);
              });
            }
            _this = _super.call(this, networkOrReady) || this;
            lib$3.defineReadOnly(_this, "providerConfigs", Object.freeze(providerConfigs));
            lib$3.defineReadOnly(_this, "quorum", quorum);
            _this._highestBlockNumber = -1;
            return _this;
          }
          FallbackProvider2.prototype.detectNetwork = function() {
            return __awaiter(this, void 0, void 0, function() {
              var networks;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, Promise.all(this.providerConfigs.map(function(c) {
                      return c.provider.getNetwork();
                    }))];
                  case 1:
                    networks = _a.sent();
                    return [2, checkNetworks(networks)];
                }
              });
            });
          };
          FallbackProvider2.prototype.perform = function(method, params) {
            return __awaiter(this, void 0, void 0, function() {
              var results, i_1, result, processFunc, configs, currentBlockNumber, i2, first, _loop_1, this_1, state_1;
              var _this = this;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    if (!(method === "sendTransaction"))
                      return [3, 2];
                    return [4, Promise.all(this.providerConfigs.map(function(c) {
                      return c.provider.sendTransaction(params.signedTransaction).then(function(result2) {
                        return result2.hash;
                      }, function(error) {
                        return error;
                      });
                    }))];
                  case 1:
                    results = _a.sent();
                    for (i_1 = 0; i_1 < results.length; i_1++) {
                      result = results[i_1];
                      if (typeof result === "string") {
                        return [2, result];
                      }
                    }
                    throw results[0];
                  case 2:
                    if (!(this._highestBlockNumber === -1 && method !== "getBlockNumber"))
                      return [3, 4];
                    return [4, this.getBlockNumber()];
                  case 3:
                    _a.sent();
                    _a.label = 4;
                  case 4:
                    processFunc = getProcessFunc(this, method, params);
                    configs = browser$6.shuffled(this.providerConfigs.map(lib$3.shallowCopy));
                    configs.sort(function(a, b) {
                      return a.priority - b.priority;
                    });
                    currentBlockNumber = this._highestBlockNumber;
                    i2 = 0;
                    first = true;
                    _loop_1 = function() {
                      var t0, inflightWeight, _loop_2, waiting, results2, result2;
                      return __generator(this, function(_a2) {
                        switch (_a2.label) {
                          case 0:
                            t0 = now();
                            inflightWeight = configs.filter(function(c) {
                              return c.runner && t0 - c.start < c.stallTimeout;
                            }).reduce(function(accum, c) {
                              return accum + c.weight;
                            }, 0);
                            _loop_2 = function() {
                              var config = configs[i2++];
                              var rid = nextRid++;
                              config.start = now();
                              config.staller = stall(config.stallTimeout);
                              config.staller.wait(function() {
                                config.staller = null;
                              });
                              config.runner = getRunner(config, currentBlockNumber, method, params).then(function(result3) {
                                config.done = true;
                                config.result = result3;
                                if (_this.listenerCount("debug")) {
                                  _this.emit("debug", {
                                    action: "request",
                                    rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: {method, params: lib$3.deepCopy(params)},
                                    provider: _this
                                  });
                                }
                              }, function(error) {
                                config.done = true;
                                config.error = error;
                                if (_this.listenerCount("debug")) {
                                  _this.emit("debug", {
                                    action: "request",
                                    rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: {method, params: lib$3.deepCopy(params)},
                                    provider: _this
                                  });
                                }
                              });
                              if (this_1.listenerCount("debug")) {
                                this_1.emit("debug", {
                                  action: "request",
                                  rid,
                                  backend: exposeDebugConfig(config, null),
                                  request: {method, params: lib$3.deepCopy(params)},
                                  provider: this_1
                                });
                              }
                              inflightWeight += config.weight;
                            };
                            while (inflightWeight < this_1.quorum && i2 < configs.length) {
                              _loop_2();
                            }
                            waiting = [];
                            configs.forEach(function(c) {
                              if (c.done || !c.runner) {
                                return;
                              }
                              waiting.push(c.runner);
                              if (c.staller) {
                                waiting.push(c.staller.getPromise());
                              }
                            });
                            if (!waiting.length)
                              return [3, 2];
                            return [4, Promise.race(waiting)];
                          case 1:
                            _a2.sent();
                            _a2.label = 2;
                          case 2:
                            results2 = configs.filter(function(c) {
                              return c.done && c.error == null;
                            });
                            if (!(results2.length >= this_1.quorum))
                              return [3, 5];
                            result2 = processFunc(results2);
                            if (result2 !== void 0) {
                              configs.forEach(function(c) {
                                if (c.staller) {
                                  c.staller.cancel();
                                }
                                c.cancelled = true;
                              });
                              return [2, {value: result2}];
                            }
                            if (!!first)
                              return [3, 4];
                            return [4, stall(100).getPromise()];
                          case 3:
                            _a2.sent();
                            _a2.label = 4;
                          case 4:
                            first = false;
                            _a2.label = 5;
                          case 5:
                            if (configs.filter(function(c) {
                              return !c.done;
                            }).length === 0) {
                              return [2, "break"];
                            }
                            return [2];
                        }
                      });
                    };
                    this_1 = this;
                    _a.label = 5;
                  case 5:
                    if (false)
                      return [3, 7];
                    return [5, _loop_1()];
                  case 6:
                    state_1 = _a.sent();
                    if (typeof state_1 === "object")
                      return [2, state_1.value];
                    if (state_1 === "break")
                      return [3, 7];
                    return [3, 5];
                  case 7:
                    configs.forEach(function(c) {
                      if (c.staller) {
                        c.staller.cancel();
                      }
                      c.cancelled = true;
                    });
                    return [2, logger.throwError("failed to meet quorum", lib.Logger.errors.SERVER_ERROR, {
                      method,
                      params,
                      results: configs.map(function(c) {
                        return exposeDebugConfig(c);
                      }),
                      provider: this
                    })];
                }
              });
            });
          };
          return FallbackProvider2;
        }(baseProvider.BaseProvider);
        exports3.FallbackProvider = FallbackProvider;
      });
      var fallbackProvider$1 = unwrapExports(fallbackProvider);
      var fallbackProvider_1 = fallbackProvider.FallbackProvider;
      "use strict";
      var IpcProvider = null;
      var browserIpcProvider = {
        IpcProvider
      };
      var infuraProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        var defaultProjectId = "84842078b09946638c03157f83405213";
        var InfuraProvider = function(_super) {
          __extends(InfuraProvider2, _super);
          function InfuraProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          InfuraProvider2.getWebSocketProvider = function(network, apiKey) {
            var provider = new InfuraProvider2(network, apiKey);
            var connection = provider.connection;
            if (connection.password) {
              logger.throwError("INFURA WebSocket project secrets unsupported", lib.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "InfuraProvider.getWebSocketProvider()"
              });
            }
            var url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            return new websocketProvider.WebSocketProvider(url, network);
          };
          InfuraProvider2.getApiKey = function(apiKey) {
            var apiKeyObj = {
              apiKey: defaultProjectId,
              projectId: defaultProjectId,
              projectSecret: null
            };
            if (apiKey == null) {
              return apiKeyObj;
            }
            if (typeof apiKey === "string") {
              apiKeyObj.projectId = apiKey;
            } else if (apiKey.projectSecret != null) {
              if (typeof apiKey.projectId !== "string") {
                logger.throwArgumentError("projectSecret requires a projectId", "projectId", apiKey.projectId);
              }
              if (typeof apiKey.projectSecret !== "string") {
                logger.throwArgumentError("invalid projectSecret", "projectSecret", "[REDACTED]");
              }
              apiKeyObj.projectId = apiKey.projectId;
              apiKeyObj.projectSecret = apiKey.projectSecret;
            } else if (apiKey.projectId) {
              apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
          };
          InfuraProvider2.getUrl = function(network, apiKey) {
            var host = null;
            switch (network.name) {
              case "homestead":
                host = "mainnet.infura.io";
                break;
              case "ropsten":
                host = "ropsten.infura.io";
                break;
              case "rinkeby":
                host = "rinkeby.infura.io";
                break;
              case "kovan":
                host = "kovan.infura.io";
                break;
              case "goerli":
                host = "goerli.infura.io";
                break;
              default:
                logger.throwError("unsupported network", lib.Logger.errors.INVALID_ARGUMENT, {
                  argument: "network",
                  value: network
                });
            }
            var connection = {
              url: "https://" + host + "/v3/" + apiKey.projectId
            };
            if (apiKey.projectSecret != null) {
              connection.user = "";
              connection.password = apiKey.projectSecret;
            }
            return connection;
          };
          return InfuraProvider2;
        }(urlJsonRpcProvider.UrlJsonRpcProvider);
        exports3.InfuraProvider = InfuraProvider;
      });
      var infuraProvider$1 = unwrapExports(infuraProvider);
      var infuraProvider_1 = infuraProvider.InfuraProvider;
      var nodesmithProvider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        var defaultApiKey = "ETHERS_JS_SHARED";
        var NodesmithProvider = function(_super) {
          __extends(NodesmithProvider2, _super);
          function NodesmithProvider2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          NodesmithProvider2.getApiKey = function(apiKey) {
            if (apiKey && typeof apiKey !== "string") {
              logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || defaultApiKey;
          };
          NodesmithProvider2.getUrl = function(network, apiKey) {
            logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            var host = null;
            switch (network.name) {
              case "homestead":
                host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                break;
              case "ropsten":
                host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                break;
              case "rinkeby":
                host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                break;
              case "goerli":
                host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                break;
              case "kovan":
                host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                break;
              default:
                logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host + "?apiKey=" + apiKey;
          };
          return NodesmithProvider2;
        }(urlJsonRpcProvider.UrlJsonRpcProvider);
        exports3.NodesmithProvider = NodesmithProvider;
      });
      var nodesmithProvider$1 = unwrapExports(nodesmithProvider);
      var nodesmithProvider_1 = nodesmithProvider.NodesmithProvider;
      var web3Provider = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __extends = commonjsGlobal && commonjsGlobal.__extends || function() {
          var extendStatics = function(d, b) {
            extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
              d2.__proto__ = b2;
            } || function(d2, b2) {
              for (var p in b2)
                if (b2.hasOwnProperty(p))
                  d2[p] = b2[p];
            };
            return extendStatics(d, b);
          };
          return function(d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$I.version);
        var _nextId = 1;
        function buildWeb3LegacyFetcher(provider, sendFunc) {
          return function(method, params) {
            if (method == "eth_sign" && provider.isMetaMask) {
              method = "personal_sign";
              params = [params[1], params[0]];
            }
            var request = {
              method,
              params,
              id: _nextId++,
              jsonrpc: "2.0"
            };
            return new Promise(function(resolve, reject) {
              sendFunc(request, function(error, result) {
                if (error) {
                  return reject(error);
                }
                if (result.error) {
                  var error_1 = new Error(result.error.message);
                  error_1.code = result.error.code;
                  error_1.data = result.error.data;
                  return reject(error_1);
                }
                resolve(result.result);
              });
            });
          };
        }
        function buildEip1193Fetcher(provider) {
          return function(method, params) {
            if (params == null) {
              params = [];
            }
            if (method == "eth_sign" && provider.isMetaMask) {
              method = "personal_sign";
              params = [params[1], params[0]];
            }
            return provider.request({method, params});
          };
        }
        var Web3Provider = function(_super) {
          __extends(Web3Provider2, _super);
          function Web3Provider2(provider, network) {
            var _newTarget = this.constructor;
            var _this = this;
            logger.checkNew(_newTarget, Web3Provider2);
            if (provider == null) {
              logger.throwArgumentError("missing provider", "provider", provider);
            }
            var path = null;
            var jsonRpcFetchFunc = null;
            var subprovider = null;
            if (typeof provider === "function") {
              path = "unknown:";
              jsonRpcFetchFunc = provider;
            } else {
              path = provider.host || provider.path || "";
              if (!path && provider.isMetaMask) {
                path = "metamask";
              }
              subprovider = provider;
              if (provider.request) {
                if (path === "") {
                  path = "eip-1193:";
                }
                jsonRpcFetchFunc = buildEip1193Fetcher(provider);
              } else if (provider.sendAsync) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
              } else if (provider.send) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
              } else {
                logger.throwArgumentError("unsupported provider", "provider", provider);
              }
              if (!path) {
                path = "unknown:";
              }
            }
            _this = _super.call(this, path, network) || this;
            lib$3.defineReadOnly(_this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            lib$3.defineReadOnly(_this, "provider", subprovider);
            return _this;
          }
          Web3Provider2.prototype.send = function(method, params) {
            return this.jsonRpcFetchFunc(method, params);
          };
          return Web3Provider2;
        }(jsonRpcProvider.JsonRpcProvider);
        exports3.Web3Provider = Web3Provider;
      });
      var web3Provider$1 = unwrapExports(web3Provider);
      var web3Provider_1 = web3Provider.Web3Provider;
      var lib$m = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.Provider = lib$b.Provider;
        exports3.getNetwork = lib$k.getNetwork;
        exports3.BaseProvider = baseProvider.BaseProvider;
        exports3.AlchemyProvider = alchemyProvider.AlchemyProvider;
        exports3.CloudflareProvider = cloudflareProvider.CloudflareProvider;
        exports3.EtherscanProvider = etherscanProvider.EtherscanProvider;
        exports3.FallbackProvider = fallbackProvider.FallbackProvider;
        exports3.IpcProvider = browserIpcProvider.IpcProvider;
        exports3.InfuraProvider = infuraProvider.InfuraProvider;
        exports3.JsonRpcProvider = jsonRpcProvider.JsonRpcProvider;
        exports3.JsonRpcSigner = jsonRpcProvider.JsonRpcSigner;
        exports3.NodesmithProvider = nodesmithProvider.NodesmithProvider;
        exports3.StaticJsonRpcProvider = urlJsonRpcProvider.StaticJsonRpcProvider;
        exports3.UrlJsonRpcProvider = urlJsonRpcProvider.UrlJsonRpcProvider;
        exports3.Web3Provider = web3Provider.Web3Provider;
        exports3.WebSocketProvider = websocketProvider.WebSocketProvider;
        exports3.Formatter = formatter.Formatter;
        var logger = new lib.Logger(_version$I.version);
        function getDefaultProvider(network, options) {
          if (network == null) {
            network = "homestead";
          }
          if (typeof network === "string") {
            var match = network.match(/^(ws|http)s?:/i);
            if (match) {
              switch (match[1]) {
                case "http":
                  return new jsonRpcProvider.JsonRpcProvider(network);
                case "ws":
                  return new websocketProvider.WebSocketProvider(network);
                default:
                  logger.throwArgumentError("unsupported URL scheme", "network", network);
              }
            }
          }
          var n = lib$k.getNetwork(network);
          if (!n || !n._defaultProvider) {
            logger.throwError("unsupported getDefaultProvider network", lib.Logger.errors.NETWORK_ERROR, {
              operation: "getDefaultProvider",
              network
            });
          }
          return n._defaultProvider({
            FallbackProvider: fallbackProvider.FallbackProvider,
            AlchemyProvider: alchemyProvider.AlchemyProvider,
            CloudflareProvider: cloudflareProvider.CloudflareProvider,
            EtherscanProvider: etherscanProvider.EtherscanProvider,
            InfuraProvider: infuraProvider.InfuraProvider,
            JsonRpcProvider: jsonRpcProvider.JsonRpcProvider,
            NodesmithProvider: nodesmithProvider.NodesmithProvider,
            Web3Provider: web3Provider.Web3Provider,
            IpcProvider: browserIpcProvider.IpcProvider
          }, options);
        }
        exports3.getDefaultProvider = getDefaultProvider;
      });
      var index$m = unwrapExports(lib$m);
      var lib_1$m = lib$m.Provider;
      var lib_2$k = lib$m.getNetwork;
      var lib_3$f = lib$m.BaseProvider;
      var lib_4$c = lib$m.AlchemyProvider;
      var lib_5$b = lib$m.CloudflareProvider;
      var lib_6$7 = lib$m.EtherscanProvider;
      var lib_7$6 = lib$m.FallbackProvider;
      var lib_8$5 = lib$m.IpcProvider;
      var lib_9$5 = lib$m.InfuraProvider;
      var lib_10$3 = lib$m.JsonRpcProvider;
      var lib_11$2 = lib$m.JsonRpcSigner;
      var lib_12$2 = lib$m.NodesmithProvider;
      var lib_13$2 = lib$m.StaticJsonRpcProvider;
      var lib_14$1 = lib$m.UrlJsonRpcProvider;
      var lib_15$1 = lib$m.Web3Provider;
      var lib_16$1 = lib$m.WebSocketProvider;
      var lib_17 = lib$m.Formatter;
      var lib_18 = lib$m.getDefaultProvider;
      var lib$n = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var regexBytes = new RegExp("^bytes([0-9]+)$");
        var regexNumber = new RegExp("^(u?int)([0-9]*)$");
        var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
        var Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
        function _pack(type, value, isArray) {
          switch (type) {
            case "address":
              if (isArray) {
                return lib$1.zeroPad(value, 32);
              }
              return lib$1.arrayify(value);
            case "string":
              return lib$8.toUtf8Bytes(value);
            case "bytes":
              return lib$1.arrayify(value);
            case "bool":
              value = value ? "0x01" : "0x00";
              if (isArray) {
                return lib$1.zeroPad(value, 32);
              }
              return lib$1.arrayify(value);
          }
          var match = type.match(regexNumber);
          if (match) {
            var size = parseInt(match[2] || "256");
            if (size % 8 != 0 || size === 0 || size > 256) {
              throw new Error("invalid number type - " + type);
            }
            if (isArray) {
              size = 256;
            }
            value = lib$2.BigNumber.from(value).toTwos(size);
            return lib$1.zeroPad(value, size / 8);
          }
          match = type.match(regexBytes);
          if (match) {
            var size = parseInt(match[1]);
            if (String(size) != match[1] || size === 0 || size > 32) {
              throw new Error("invalid number type - " + type);
            }
            if (lib$1.arrayify(value).byteLength !== size) {
              throw new Error("invalid value for " + type);
            }
            if (isArray) {
              return lib$1.arrayify((value + Zeros).substring(0, 66));
            }
            return value;
          }
          match = type.match(regexArray);
          if (match && Array.isArray(value)) {
            var baseType_1 = match[1];
            var count = parseInt(match[2] || String(value.length));
            if (count != value.length) {
              throw new Error("invalid value for " + type);
            }
            var result_1 = [];
            value.forEach(function(value2) {
              result_1.push(_pack(baseType_1, value2, true));
            });
            return lib$1.concat(result_1);
          }
          throw new Error("unknown type - " + type);
        }
        function pack(types, values) {
          if (types.length != values.length) {
            throw new Error("type/value count mismatch");
          }
          var tight = [];
          types.forEach(function(type, index2) {
            tight.push(_pack(type, values[index2]));
          });
          return lib$1.hexlify(lib$1.concat(tight));
        }
        exports3.pack = pack;
        function keccak256(types, values) {
          return lib$4.keccak256(pack(types, values));
        }
        exports3.keccak256 = keccak256;
        function sha2562(types, values) {
          return browser.sha256(pack(types, values));
        }
        exports3.sha256 = sha2562;
      });
      var index$n = unwrapExports(lib$n);
      var lib_1$n = lib$n.pack;
      var lib_2$l = lib$n.keccak256;
      var lib_3$g = lib$n.sha256;
      var _version$K = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "units/5.0.1";
      });
      var _version$L = unwrapExports(_version$K);
      var _version_1$n = _version$K.version;
      var lib$o = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        var logger = new lib.Logger(_version$K.version);
        var names = [
          "wei",
          "kwei",
          "mwei",
          "gwei",
          "szabo",
          "finney",
          "ether"
        ];
        function commify(value) {
          var comps = String(value).split(".");
          if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
            logger.throwArgumentError("invalid value", "value", value);
          }
          var whole = comps[0];
          var negative = "";
          if (whole.substring(0, 1) === "-") {
            negative = "-";
            whole = whole.substring(1);
          }
          while (whole.substring(0, 1) === "0") {
            whole = whole.substring(1);
          }
          if (whole === "") {
            whole = "0";
          }
          var suffix = "";
          if (comps.length === 2) {
            suffix = "." + (comps[1] || "0");
          }
          var formatted = [];
          while (whole.length) {
            if (whole.length <= 3) {
              formatted.unshift(whole);
              break;
            } else {
              var index2 = whole.length - 3;
              formatted.unshift(whole.substring(index2));
              whole = whole.substring(0, index2);
            }
          }
          return negative + formatted.join(",") + suffix;
        }
        exports3.commify = commify;
        function formatUnits(value, unitName) {
          if (typeof unitName === "string") {
            var index2 = names.indexOf(unitName);
            if (index2 !== -1) {
              unitName = 3 * index2;
            }
          }
          return lib$2.formatFixed(value, unitName != null ? unitName : 18);
        }
        exports3.formatUnits = formatUnits;
        function parseUnits(value, unitName) {
          if (typeof unitName === "string") {
            var index2 = names.indexOf(unitName);
            if (index2 !== -1) {
              unitName = 3 * index2;
            }
          }
          return lib$2.parseFixed(value, unitName != null ? unitName : 18);
        }
        exports3.parseUnits = parseUnits;
        function formatEther(wei) {
          return formatUnits(wei, 18);
        }
        exports3.formatEther = formatEther;
        function parseEther(ether) {
          return parseUnits(ether, 18);
        }
        exports3.parseEther = parseEther;
      });
      var index$o = unwrapExports(lib$o);
      var lib_1$o = lib$o.commify;
      var lib_2$m = lib$o.formatUnits;
      var lib_3$h = lib$o.parseUnits;
      var lib_4$d = lib$o.formatEther;
      var lib_5$c = lib$o.parseEther;
      var utils$3 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.AbiCoder = lib$a.AbiCoder;
        exports3.checkResultErrors = lib$a.checkResultErrors;
        exports3.defaultAbiCoder = lib$a.defaultAbiCoder;
        exports3.EventFragment = lib$a.EventFragment;
        exports3.FormatTypes = lib$a.FormatTypes;
        exports3.Fragment = lib$a.Fragment;
        exports3.FunctionFragment = lib$a.FunctionFragment;
        exports3.Indexed = lib$a.Indexed;
        exports3.Interface = lib$a.Interface;
        exports3.LogDescription = lib$a.LogDescription;
        exports3.ParamType = lib$a.ParamType;
        exports3.TransactionDescription = lib$a.TransactionDescription;
        exports3.getAddress = lib$6.getAddress;
        exports3.getCreate2Address = lib$6.getCreate2Address;
        exports3.getContractAddress = lib$6.getContractAddress;
        exports3.getIcapAddress = lib$6.getIcapAddress;
        exports3.isAddress = lib$6.isAddress;
        var base64 = __importStar(browser$8);
        exports3.base64 = base64;
        exports3.arrayify = lib$1.arrayify;
        exports3.concat = lib$1.concat;
        exports3.hexDataSlice = lib$1.hexDataSlice;
        exports3.hexDataLength = lib$1.hexDataLength;
        exports3.hexlify = lib$1.hexlify;
        exports3.hexStripZeros = lib$1.hexStripZeros;
        exports3.hexValue = lib$1.hexValue;
        exports3.hexZeroPad = lib$1.hexZeroPad;
        exports3.isBytes = lib$1.isBytes;
        exports3.isBytesLike = lib$1.isBytesLike;
        exports3.isHexString = lib$1.isHexString;
        exports3.joinSignature = lib$1.joinSignature;
        exports3.zeroPad = lib$1.zeroPad;
        exports3.splitSignature = lib$1.splitSignature;
        exports3.stripZeros = lib$1.stripZeros;
        exports3.hashMessage = lib$9.hashMessage;
        exports3.id = lib$9.id;
        exports3.isValidName = lib$9.isValidName;
        exports3.namehash = lib$9.namehash;
        exports3.defaultPath = lib$h.defaultPath;
        exports3.entropyToMnemonic = lib$h.entropyToMnemonic;
        exports3.HDNode = lib$h.HDNode;
        exports3.isValidMnemonic = lib$h.isValidMnemonic;
        exports3.mnemonicToEntropy = lib$h.mnemonicToEntropy;
        exports3.mnemonicToSeed = lib$h.mnemonicToSeed;
        exports3.getJsonWalletAddress = lib$i.getJsonWalletAddress;
        exports3.keccak256 = lib$4.keccak256;
        exports3.Logger = lib.Logger;
        exports3.computeHmac = browser.computeHmac;
        exports3.ripemd160 = browser.ripemd160;
        exports3.sha256 = browser.sha256;
        exports3.sha512 = browser.sha512;
        exports3.solidityKeccak256 = lib$n.keccak256;
        exports3.solidityPack = lib$n.pack;
        exports3.soliditySha256 = lib$n.sha256;
        exports3.randomBytes = browser$6.randomBytes;
        exports3.shuffled = browser$6.shuffled;
        exports3.checkProperties = lib$3.checkProperties;
        exports3.deepCopy = lib$3.deepCopy;
        exports3.defineReadOnly = lib$3.defineReadOnly;
        exports3.getStatic = lib$3.getStatic;
        exports3.resolveProperties = lib$3.resolveProperties;
        exports3.shallowCopy = lib$3.shallowCopy;
        var RLP = __importStar(lib$5);
        exports3.RLP = RLP;
        exports3.computePublicKey = lib$f.computePublicKey;
        exports3.recoverPublicKey = lib$f.recoverPublicKey;
        exports3.SigningKey = lib$f.SigningKey;
        exports3.formatBytes32String = lib$8.formatBytes32String;
        exports3.nameprep = lib$8.nameprep;
        exports3.parseBytes32String = lib$8.parseBytes32String;
        exports3._toEscapedUtf8String = lib$8._toEscapedUtf8String;
        exports3.toUtf8Bytes = lib$8.toUtf8Bytes;
        exports3.toUtf8CodePoints = lib$8.toUtf8CodePoints;
        exports3.toUtf8String = lib$8.toUtf8String;
        exports3.Utf8ErrorFuncs = lib$8.Utf8ErrorFuncs;
        exports3.computeAddress = lib$g.computeAddress;
        exports3.parseTransaction = lib$g.parse;
        exports3.recoverAddress = lib$g.recoverAddress;
        exports3.serializeTransaction = lib$g.serialize;
        exports3.commify = lib$o.commify;
        exports3.formatEther = lib$o.formatEther;
        exports3.parseEther = lib$o.parseEther;
        exports3.formatUnits = lib$o.formatUnits;
        exports3.parseUnits = lib$o.parseUnits;
        exports3.verifyMessage = lib$j.verifyMessage;
        exports3.fetchJson = lib$l.fetchJson;
        exports3.poll = lib$l.poll;
        var sha2_2 = browser;
        exports3.SupportedAlgorithm = sha2_2.SupportedAlgorithm;
        var strings_2 = lib$8;
        exports3.UnicodeNormalizationForm = strings_2.UnicodeNormalizationForm;
        exports3.Utf8ErrorReason = strings_2.Utf8ErrorReason;
      });
      var utils$4 = unwrapExports(utils$3);
      var utils_1$3 = utils$3.AbiCoder;
      var utils_2$1 = utils$3.checkResultErrors;
      var utils_3$1 = utils$3.defaultAbiCoder;
      var utils_4$1 = utils$3.EventFragment;
      var utils_5 = utils$3.FormatTypes;
      var utils_6 = utils$3.Fragment;
      var utils_7 = utils$3.FunctionFragment;
      var utils_8 = utils$3.Indexed;
      var utils_9 = utils$3.Interface;
      var utils_10 = utils$3.LogDescription;
      var utils_11 = utils$3.ParamType;
      var utils_12 = utils$3.TransactionDescription;
      var utils_13 = utils$3.getAddress;
      var utils_14 = utils$3.getCreate2Address;
      var utils_15 = utils$3.getContractAddress;
      var utils_16 = utils$3.getIcapAddress;
      var utils_17 = utils$3.isAddress;
      var utils_18 = utils$3.base64;
      var utils_19 = utils$3.arrayify;
      var utils_20 = utils$3.concat;
      var utils_21 = utils$3.hexDataSlice;
      var utils_22 = utils$3.hexDataLength;
      var utils_23 = utils$3.hexlify;
      var utils_24 = utils$3.hexStripZeros;
      var utils_25 = utils$3.hexValue;
      var utils_26 = utils$3.hexZeroPad;
      var utils_27 = utils$3.isBytes;
      var utils_28 = utils$3.isBytesLike;
      var utils_29 = utils$3.isHexString;
      var utils_30 = utils$3.joinSignature;
      var utils_31 = utils$3.zeroPad;
      var utils_32 = utils$3.splitSignature;
      var utils_33 = utils$3.stripZeros;
      var utils_34 = utils$3.hashMessage;
      var utils_35 = utils$3.id;
      var utils_36 = utils$3.isValidName;
      var utils_37 = utils$3.namehash;
      var utils_38 = utils$3.defaultPath;
      var utils_39 = utils$3.entropyToMnemonic;
      var utils_40 = utils$3.HDNode;
      var utils_41 = utils$3.isValidMnemonic;
      var utils_42 = utils$3.mnemonicToEntropy;
      var utils_43 = utils$3.mnemonicToSeed;
      var utils_44 = utils$3.getJsonWalletAddress;
      var utils_45 = utils$3.keccak256;
      var utils_46 = utils$3.Logger;
      var utils_47 = utils$3.computeHmac;
      var utils_48 = utils$3.ripemd160;
      var utils_49 = utils$3.sha256;
      var utils_50 = utils$3.sha512;
      var utils_51 = utils$3.solidityKeccak256;
      var utils_52 = utils$3.solidityPack;
      var utils_53 = utils$3.soliditySha256;
      var utils_54 = utils$3.randomBytes;
      var utils_55 = utils$3.shuffled;
      var utils_56 = utils$3.checkProperties;
      var utils_57 = utils$3.deepCopy;
      var utils_58 = utils$3.defineReadOnly;
      var utils_59 = utils$3.getStatic;
      var utils_60 = utils$3.resolveProperties;
      var utils_61 = utils$3.shallowCopy;
      var utils_62 = utils$3.RLP;
      var utils_63 = utils$3.computePublicKey;
      var utils_64 = utils$3.recoverPublicKey;
      var utils_65 = utils$3.SigningKey;
      var utils_66 = utils$3.formatBytes32String;
      var utils_67 = utils$3.nameprep;
      var utils_68 = utils$3.parseBytes32String;
      var utils_69 = utils$3._toEscapedUtf8String;
      var utils_70 = utils$3.toUtf8Bytes;
      var utils_71 = utils$3.toUtf8CodePoints;
      var utils_72 = utils$3.toUtf8String;
      var utils_73 = utils$3.Utf8ErrorFuncs;
      var utils_74 = utils$3.computeAddress;
      var utils_75 = utils$3.parseTransaction;
      var utils_76 = utils$3.recoverAddress;
      var utils_77 = utils$3.serializeTransaction;
      var utils_78 = utils$3.commify;
      var utils_79 = utils$3.formatEther;
      var utils_80 = utils$3.parseEther;
      var utils_81 = utils$3.formatUnits;
      var utils_82 = utils$3.parseUnits;
      var utils_83 = utils$3.verifyMessage;
      var utils_84 = utils$3.fetchJson;
      var utils_85 = utils$3.poll;
      var utils_86 = utils$3.SupportedAlgorithm;
      var utils_87 = utils$3.UnicodeNormalizationForm;
      var utils_88 = utils$3.Utf8ErrorReason;
      var _version$M = createCommonjsModule(function(module2, exports3) {
        "use strict";
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.version = "ethers/5.0.5";
      });
      var _version$N = unwrapExports(_version$M);
      var _version_1$o = _version$M.version;
      var ethers3 = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        exports3.Contract = lib$d.Contract;
        exports3.ContractFactory = lib$d.ContractFactory;
        exports3.BigNumber = lib$2.BigNumber;
        exports3.FixedNumber = lib$2.FixedNumber;
        exports3.Signer = lib$c.Signer;
        exports3.VoidSigner = lib$c.VoidSigner;
        exports3.Wallet = lib$j.Wallet;
        var constants = __importStar(lib$7);
        exports3.constants = constants;
        var providers = __importStar(lib$m);
        exports3.providers = providers;
        var providers_1 = lib$m;
        exports3.getDefaultProvider = providers_1.getDefaultProvider;
        exports3.Wordlist = browser$4.Wordlist;
        exports3.wordlists = browser$4.wordlists;
        var utils2 = __importStar(utils$3);
        exports3.utils = utils2;
        exports3.errors = lib.ErrorCode;
        exports3.version = _version$M.version;
        var logger = new lib.Logger(_version$M.version);
        exports3.logger = logger;
      });
      var ethers$1 = unwrapExports(ethers3);
      var ethers_1 = ethers3.Contract;
      var ethers_2 = ethers3.ContractFactory;
      var ethers_3 = ethers3.BigNumber;
      var ethers_4 = ethers3.FixedNumber;
      var ethers_5 = ethers3.Signer;
      var ethers_6 = ethers3.VoidSigner;
      var ethers_7 = ethers3.Wallet;
      var ethers_8 = ethers3.constants;
      var ethers_9 = ethers3.providers;
      var ethers_10 = ethers3.getDefaultProvider;
      var ethers_11 = ethers3.Wordlist;
      var ethers_12 = ethers3.wordlists;
      var ethers_13 = ethers3.utils;
      var ethers_14 = ethers3.errors;
      var ethers_15 = ethers3.version;
      var ethers_16 = ethers3.logger;
      var lib$p = createCommonjsModule(function(module2, exports3) {
        "use strict";
        var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (Object.hasOwnProperty.call(mod, k))
                result[k] = mod[k];
          }
          result["default"] = mod;
          return result;
        };
        Object.defineProperty(exports3, "__esModule", {value: true});
        var ethers$12 = __importStar(ethers3);
        exports3.ethers = ethers$12;
        try {
          var anyGlobal = window;
          if (anyGlobal._ethers == null) {
            anyGlobal._ethers = ethers$12;
          }
        } catch (error) {
        }
        var ethers_17 = ethers3;
        exports3.Signer = ethers_17.Signer;
        exports3.Wallet = ethers_17.Wallet;
        exports3.VoidSigner = ethers_17.VoidSigner;
        exports3.getDefaultProvider = ethers_17.getDefaultProvider;
        exports3.providers = ethers_17.providers;
        exports3.Contract = ethers_17.Contract;
        exports3.ContractFactory = ethers_17.ContractFactory;
        exports3.BigNumber = ethers_17.BigNumber;
        exports3.FixedNumber = ethers_17.FixedNumber;
        exports3.constants = ethers_17.constants;
        exports3.errors = ethers_17.errors;
        exports3.logger = ethers_17.logger;
        exports3.utils = ethers_17.utils;
        exports3.wordlists = ethers_17.wordlists;
        exports3.version = ethers_17.version;
        exports3.Wordlist = ethers_17.Wordlist;
      });
      var index$p = unwrapExports(lib$p);
      var lib_1$p = lib$p.ethers;
      var lib_2$n = lib$p.Signer;
      var lib_3$i = lib$p.Wallet;
      var lib_4$e = lib$p.VoidSigner;
      var lib_5$d = lib$p.getDefaultProvider;
      var lib_6$8 = lib$p.providers;
      var lib_7$7 = lib$p.Contract;
      var lib_8$6 = lib$p.ContractFactory;
      var lib_9$6 = lib$p.BigNumber;
      var lib_10$4 = lib$p.FixedNumber;
      var lib_11$3 = lib$p.constants;
      var lib_12$3 = lib$p.errors;
      var lib_13$3 = lib$p.logger;
      var lib_14$2 = lib$p.utils;
      var lib_15$2 = lib$p.wordlists;
      var lib_16$2 = lib$p.version;
      var lib_17$1 = lib$p.Wordlist;
      exports2.BigNumber = lib_9$6;
      exports2.Contract = lib_7$7;
      exports2.ContractFactory = lib_8$6;
      exports2.FixedNumber = lib_10$4;
      exports2.Signer = lib_2$n;
      exports2.VoidSigner = lib_4$e;
      exports2.Wallet = lib_3$i;
      exports2.Wordlist = lib_17$1;
      exports2.constants = lib_11$3;
      exports2.default = index$p;
      exports2.errors = lib_12$3;
      exports2.ethers = lib_1$p;
      exports2.getDefaultProvider = lib_5$d;
      exports2.logger = lib_13$3;
      exports2.providers = lib_6$8;
      exports2.utils = lib_14$2;
      exports2.version = lib_16$2;
      exports2.wordlists = lib_15$2;
      Object.defineProperty(exports2, "__esModule", {value: true});
    });
  });

  // src/App.js
  const React = __toModule(require_react());
  const ReactDOM = __toModule(require_react_dom());
  const ethers = __toModule(require_ethers_umd());
  class MyForm extends React.Component {
    constructor(props) {
      super(props);
      this.handleSubmit = this.handleSubmit.bind(this);
      this.mnemonic = React.createRef();
      this.message = React.createRef();
      this.headers = React.createRef();
    }
    handleSubmit(event) {
      var mnemonic = this.mnemonic.current.value;
      var message = this.message.current.value;
      this.encode(mnemonic, message);
    }
    async encode(mnemonic, message) {
      console.log(this.mnemonic.current.value);
      console.log(this.message.current.value);
      const wallet = ethers.ethers.Wallet.fromMnemonic(this.mnemonic.current.value);
      const signedMessage = await wallet.signMessage(this.message.current.value);
      const address = await wallet.getAddress();
      var text = `x-auth-ethereum-address: ${address} 
  x-auth-message: ${message}   
  x-auth-signature: ${signedMessage}`;
      this.headers.current.innerText = text;
    }
    render() {
      return React.createElement("div", {
        className: "container"
      }, React.createElement("link", {
        rel: "stylesheet",
        href: "https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      }), React.createElement("h2", null, "Generate Auth Headers"), React.createElement("div", {
        className: "row"
      }, React.createElement("div", {
        className: "col"
      }, React.createElement("em", null, "Caution"), " only use a sample mnemonic here. Do not use your real mnemonic", React.createElement("br", null), React.createElement("pre", null, "inflict stairs vast caution vacant female boring label mandate more cash heart pen school pattern"), React.createElement("div", null, React.createElement("label", {
        htmlFor: "mnemonic"
      }, "mnemonic"), React.createElement("input", {
        name: "mnemonic",
        type: "text",
        className: "form-control",
        ref: this.mnemonic
      })), React.createElement("div", null, React.createElement("label", {
        htmlFor: "message"
      }, "message"), React.createElement("input", {
        name: "message",
        type: "text",
        className: "form-control",
        ref: this.message
      })), React.createElement("br", null), React.createElement("div", null, React.createElement("p", {
        className: "lead"
      }, React.createElement("a", {
        className: "btn btn-primary btn-lg",
        href: "#",
        role: "button",
        onClick: this.handleSubmit
      }, "Generate Headers"))))), React.createElement("div", {
        className: "row"
      }, React.createElement("div", {
        className: "col-md-auto"
      }, React.createElement("div", {
        className: "border",
        ref: this.headers
      }))));
    }
  }
  ReactDOM.render(React.createElement(MyForm, null), document.getElementById("root"));
})();
//# sourceMappingURL=bundle.js.map
